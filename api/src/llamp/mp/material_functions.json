[
    {
        "name": "search_materials_core_formula_autocomplete__get",
        "description": "Get FormulaAutocomplete documents",
        "parameters": {
            "type": "object",
            "properties": {
                "formula": {
                    "type": "string",
                    "description": "Human readable chemical formula."
                },
                "limit": {
                    "type": "integer",
                    "description": "Maximum number of matches to show. Defaults to 10."
                }
            }
        },
        "required": [
            "formula"
        ]
    },
    {
        "name": "search_materials_core__get",
        "description": "Get MaterialsDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "formula": {
                    "type": "string",
                    "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
                },
                "chemsys": {
                    "type": "string",
                    "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
                },
                "elements": {
                    "type": "string",
                    "description": "Query by elements in the material composition as a comma-separated list"
                },
                "exclude_elements": {
                    "type": "string",
                    "description": "Query by excluded elements in the material composition as a comma-separated list"
                },
                "task_ids": {
                    "type": "string",
                    "description": "Comma-separated list of task_ids to query on"
                },
                "spacegroup_number": {
                    "type": "integer",
                    "description": "Space group number of the material"
                },
                "spacegroup_symbol": {
                    "type": "string",
                    "description": "Space group symbol of the material"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether the material is marked as deprecated"
                },
                "nsites_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nsites"
                },
                "nsites_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nsites"
                },
                "nsites": {
                    "type": "integer",
                    "description": "Query for nsites being equal to an exact value"
                },
                "nsites_not_eq": {
                    "type": "integer",
                    "description": "Query for nsites being not equal to an exact value"
                },
                "nsites_eq_any": {
                    "type": "string",
                    "description": "Query for nsites being any of these values. Provide a comma separated list."
                },
                "nsites_neq_any": {
                    "type": "string",
                    "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
                },
                "nelements_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nelements"
                },
                "nelements_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nelements"
                },
                "nelements": {
                    "type": "integer",
                    "description": "Query for nelements being equal to an exact value"
                },
                "nelements_not_eq": {
                    "type": "integer",
                    "description": "Query for nelements being not equal to an exact value"
                },
                "nelements_eq_any": {
                    "type": "string",
                    "description": "Query for nelements being any of these values. Provide a comma separated list."
                },
                "nelements_neq_any": {
                    "type": "string",
                    "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
                },
                "volume_max": {
                    "type": "number",
                    "description": "Query for maximum value of Volume"
                },
                "volume_min": {
                    "type": "number",
                    "description": "Query for minimum value of Volume"
                },
                "density_max": {
                    "type": "number",
                    "description": "Query for maximum value of Density"
                },
                "density_min": {
                    "type": "number",
                    "description": "Query for minimum value of Density"
                },
                "density_atomic_max": {
                    "type": "number",
                    "description": "Query for maximum value of Packing Density"
                },
                "density_atomic_min": {
                    "type": "number",
                    "description": "Query for minimum value of Packing Density"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from MaterialsDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `material_id` `structure` `deprecated` `deprecation_reasons` `initial_structures` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `task_types` `run_types` `entries`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_absorption__get",
        "description": "Get AbsorptionDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "nsites_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nsites"
                },
                "nsites_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nsites"
                },
                "nsites": {
                    "type": "integer",
                    "description": "Query for nsites being equal to an exact value"
                },
                "nsites_not_eq": {
                    "type": "integer",
                    "description": "Query for nsites being not equal to an exact value"
                },
                "nsites_eq_any": {
                    "type": "string",
                    "description": "Query for nsites being any of these values. Provide a comma separated list."
                },
                "nsites_neq_any": {
                    "type": "string",
                    "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
                },
                "nelements_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nelements"
                },
                "nelements_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nelements"
                },
                "nelements": {
                    "type": "integer",
                    "description": "Query for nelements being equal to an exact value"
                },
                "nelements_not_eq": {
                    "type": "integer",
                    "description": "Query for nelements being not equal to an exact value"
                },
                "nelements_eq_any": {
                    "type": "string",
                    "description": "Query for nelements being any of these values. Provide a comma separated list."
                },
                "nelements_neq_any": {
                    "type": "string",
                    "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
                },
                "volume_max": {
                    "type": "number",
                    "description": "Query for maximum value of Volume"
                },
                "volume_min": {
                    "type": "number",
                    "description": "Query for minimum value of Volume"
                },
                "density_max": {
                    "type": "number",
                    "description": "Query for maximum value of Density"
                },
                "density_min": {
                    "type": "number",
                    "description": "Query for minimum value of Density"
                },
                "density_atomic_max": {
                    "type": "number",
                    "description": "Query for maximum value of Packing Density"
                },
                "density_atomic_min": {
                    "type": "number",
                    "description": "Query for minimum value of Packing Density"
                },
                "bandgap_max": {
                    "type": "number",
                    "description": "Query for maximum value of bandgap"
                },
                "bandgap_min": {
                    "type": "number",
                    "description": "Query for minimum value of bandgap"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from AbsorptionDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `task_id` `energies` `energy_max` `absorption_coefficient` `average_imaginary_dielectric` `average_real_dielectric` `bandgap` `nkpoints`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            },
            "required": [
                "_fields"
            ]
        }
    },
    {
        "name": "search_materials_bonds__get",
        "description": "Get BondingDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "max_bond_length_max": {
                    "type": "number",
                    "description": "Maximum value for the maximum bond length in the structure."
                },
                "max_bond_length_min": {
                    "type": "number",
                    "description": "Minimum value for the maximum bond length in the structure."
                },
                "min_bond_length_max": {
                    "type": "number",
                    "description": "Maximum value for the minimum bond length in the structure."
                },
                "min_bond_length_min": {
                    "type": "number",
                    "description": "Minimum value for the minimum bond length in the structure."
                },
                "mean_bond_length_max": {
                    "type": "number",
                    "description": "Maximum value for the mean bond length in the structure."
                },
                "mean_bond_length_min": {
                    "type": "number",
                    "description": "Minimum value for the mean bond length in the structure."
                },
                "coordination_envs": {
                    "type": "string",
                    "description": "Query by coordination environments in the material composition as a comma-separated list (e.g. 'Mo-S(6),S-Mo(3)')"
                },
                "coordination_envs_anonymous": {
                    "type": "string",
                    "description": "Query by anonymous coordination environments in the material composition as a comma-separated list (e.g. 'A-B(6),A-B(3)')"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from BondingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure_graph` `method` `bond_types` `bond_length_stats` `coordination_envs` `coordination_envs_anonymous`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_chemenv__get",
        "description": "Get ChemEnvDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "chemenv_iucr": {
                    "type": "string",
                    "description": "A comma delimited string list of unique (cationic) species in IUCR format."
                },
                "chemenv_iupac": {
                    "type": "string",
                    "description": "A comma delimited string list of unique (cationic) species in IUPAC format."
                },
                "chemenv_name": {
                    "type": "string",
                    "description": "A comma delimited string list of coordination environment descriptions for unique (cationic) species."
                },
                "chemenv_symbol": {
                    "type": "string",
                    "description": "A comma delimited string list of ChemEnv symbols for unique (cationic) species in the structure."
                },
                "species": {
                    "type": "string",
                    "description": "A comma delimited string list of unique (cationic) species in the structure."
                },
                "csm_min": {
                    "type": "number",
                    "description": "Minimum value of the continous symmetry measure for any site."
                },
                "csm_max": {
                    "type": "number",
                    "description": "Maximum value of the continous symmetry measure for any site."
                },
                "elements": {
                    "type": "string",
                    "description": "Query by elements in the material composition as a comma-separated list"
                },
                "exclude_elements": {
                    "type": "string",
                    "description": "Query by excluded elements in the material composition as a comma-separated list"
                },
                "nsites_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nsites"
                },
                "nsites_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nsites"
                },
                "nsites": {
                    "type": "integer",
                    "description": "Query for nsites being equal to an exact value"
                },
                "nsites_not_eq": {
                    "type": "integer",
                    "description": "Query for nsites being not equal to an exact value"
                },
                "nsites_eq_any": {
                    "type": "string",
                    "description": "Query for nsites being any of these values. Provide a comma separated list."
                },
                "nsites_neq_any": {
                    "type": "string",
                    "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
                },
                "nelements_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nelements"
                },
                "nelements_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nelements"
                },
                "nelements": {
                    "type": "integer",
                    "description": "Query for nelements being equal to an exact value"
                },
                "nelements_not_eq": {
                    "type": "integer",
                    "description": "Query for nelements being not equal to an exact value"
                },
                "nelements_eq_any": {
                    "type": "string",
                    "description": "Query for nelements being any of these values. Provide a comma separated list."
                },
                "nelements_neq_any": {
                    "type": "string",
                    "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
                },
                "volume_max": {
                    "type": "number",
                    "description": "Query for maximum value of Volume"
                },
                "volume_min": {
                    "type": "number",
                    "description": "Query for minimum value of Volume"
                },
                "density_max": {
                    "type": "number",
                    "description": "Query for maximum value of Density"
                },
                "density_min": {
                    "type": "number",
                    "description": "Query for minimum value of Density"
                },
                "density_atomic_max": {
                    "type": "number",
                    "description": "Query for maximum value of Packing Density"
                },
                "density_atomic_min": {
                    "type": "number",
                    "description": "Query for minimum value of Packing Density"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from ChemEnvDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `valences` `species` `chemenv_symbol` `chemenv_iupac` `chemenv_iucr` `chemenv_name` `chemenv_name_with_alternatives` `csm` `method` `mol_from_site_environments` `wyckoff_positions`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_tasks_trajectory__get",
        "description": "Get TrajectoryDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "task_ids": {
                    "type": "string",
                    "description": "Comma-separated list of task_ids to query on"
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                }
            }
        }
    },
    {
        "name": "search_materials_tasks__get",
        "description": "Get TaskDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "formula": {
                    "type": "string",
                    "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
                },
                "chemsys": {
                    "type": "string",
                    "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
                },
                "elements": {
                    "type": "string",
                    "description": "Query by elements in the material composition as a comma-separated list"
                },
                "exclude_elements": {
                    "type": "string",
                    "description": "Query by excluded elements in the material composition as a comma-separated list"
                },
                "task_ids": {
                    "type": "string",
                    "description": "Comma-separated list of task_ids to query on"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from TaskDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `tags` `dir_name` `state` `calcs_reversed` `structure` `task_type` `task_id` `orig_inputs` `input` `output` `included_objects` `vasp_objects` `entry` `task_label` `author` `icsd_id` `transformations` `additional_json` `custodian` `analysis` `last_updated`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "get_by_key_materials_thermo_phase_diagram__phase_diagram_id___ge",
        "description": "Get a PhaseDiagramDoc document by by phase_diagram_id",
        "parameters": {
            "type": "object",
            "properties": {
                "phase_diagram_id": {
                    "type": "string",
                    "description": ""
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from PhaseDiagramDoc as a list of comma separated strings.                    Fields include: `phase_diagram_id` `chemsys` `thermo_type` `phase_diagram` `last_updated` `property_name`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "phase_diagram_id",
            "_fields"
        ]
    },
    {
        "name": "search_materials_thermo__get",
        "description": "Get ThermoDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "thermo_ids": {
                    "type": "string",
                    "description": "Comma-separated list of thermo_id values to query on"
                },
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "thermo_types": {
                    "type": "string",
                    "description": "Comma-separated list of thermo_type values to query on. Valid values include: GGA_GGA_U, GGA_GGA_U_R2SCAN, R2SCAN"
                },
                "formula": {
                    "type": "string",
                    "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
                },
                "chemsys": {
                    "type": "string",
                    "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
                },
                "is_stable": {
                    "type": "boolean",
                    "description": "Whether the material is stable."
                },
                "nsites_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nsites"
                },
                "nsites_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nsites"
                },
                "nsites": {
                    "type": "integer",
                    "description": "Query for nsites being equal to an exact value"
                },
                "nsites_not_eq": {
                    "type": "integer",
                    "description": "Query for nsites being not equal to an exact value"
                },
                "nsites_eq_any": {
                    "type": "string",
                    "description": "Query for nsites being any of these values. Provide a comma separated list."
                },
                "nsites_neq_any": {
                    "type": "string",
                    "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
                },
                "nelements_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nelements"
                },
                "nelements_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nelements"
                },
                "nelements": {
                    "type": "integer",
                    "description": "Query for nelements being equal to an exact value"
                },
                "nelements_not_eq": {
                    "type": "integer",
                    "description": "Query for nelements being not equal to an exact value"
                },
                "nelements_eq_any": {
                    "type": "string",
                    "description": "Query for nelements being any of these values. Provide a comma separated list."
                },
                "nelements_neq_any": {
                    "type": "string",
                    "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
                },
                "volume_max": {
                    "type": "number",
                    "description": "Query for maximum value of Volume"
                },
                "volume_min": {
                    "type": "number",
                    "description": "Query for minimum value of Volume"
                },
                "density_max": {
                    "type": "number",
                    "description": "Query for maximum value of Density"
                },
                "density_min": {
                    "type": "number",
                    "description": "Query for minimum value of Density"
                },
                "density_atomic_max": {
                    "type": "number",
                    "description": "Query for maximum value of Packing Density"
                },
                "density_atomic_min": {
                    "type": "number",
                    "description": "Query for minimum value of Packing Density"
                },
                "uncorrected_energy_per_atom_max": {
                    "type": "number",
                    "description": "Query for maximum value of uncorrected_energy_per_atom"
                },
                "uncorrected_energy_per_atom_min": {
                    "type": "number",
                    "description": "Query for minimum value of uncorrected_energy_per_atom"
                },
                "energy_per_atom_max": {
                    "type": "number",
                    "description": "Query for maximum value of energy_per_atom"
                },
                "energy_per_atom_min": {
                    "type": "number",
                    "description": "Query for minimum value of energy_per_atom"
                },
                "energy_uncertainy_per_atom_max": {
                    "type": "number",
                    "description": "Query for maximum value of energy_uncertainy_per_atom"
                },
                "energy_uncertainy_per_atom_min": {
                    "type": "number",
                    "description": "Query for minimum value of energy_uncertainy_per_atom"
                },
                "formation_energy_per_atom_max": {
                    "type": "number",
                    "description": "Query for maximum value of formation_energy_per_atom"
                },
                "formation_energy_per_atom_min": {
                    "type": "number",
                    "description": "Query for minimum value of formation_energy_per_atom"
                },
                "energy_above_hull_max": {
                    "type": "number",
                    "description": "Query for maximum value of energy_above_hull"
                },
                "energy_above_hull_min": {
                    "type": "number",
                    "description": "Query for minimum value of energy_above_hull"
                },
                "equilibrium_reaction_energy_per_atom_max": {
                    "type": "number",
                    "description": "Query for maximum value of equilibrium_reaction_energy_per_atom"
                },
                "equilibrium_reaction_energy_per_atom_min": {
                    "type": "number",
                    "description": "Query for minimum value of equilibrium_reaction_energy_per_atom"
                },
                "decomposition_enthalpy_max": {
                    "type": "number",
                    "description": "Query for maximum value of decomposition_enthalpy"
                },
                "decomposition_enthalpy_min": {
                    "type": "number",
                    "description": "Query for minimum value of decomposition_enthalpy"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from ThermoDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `thermo_type` `thermo_id` `uncorrected_energy_per_atom` `energy_per_atom` `energy_uncertainy_per_atom` `formation_energy_per_atom` `energy_above_hull` `is_stable` `equilibrium_reaction_energy_per_atom` `decomposes_to` `decomposition_enthalpy` `decomposition_enthalpy_decomposes_to` `energy_type` `entry_types` `entries`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_dielectric__get",
        "description": "Get DielectricDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "e_total_max": {
                    "type": "number",
                    "description": "Maximum value for the total dielectric constant."
                },
                "e_total_min": {
                    "type": "number",
                    "description": "Minimum value for the total dielectric constant."
                },
                "e_ionic_max": {
                    "type": "number",
                    "description": "Maximum value for the ionic dielectric constant."
                },
                "e_ionic_min": {
                    "type": "number",
                    "description": "Minimum value for the ionic dielectric constant."
                },
                "e_electronic_max": {
                    "type": "number",
                    "description": "Maximum value for the electronic dielectric constant."
                },
                "e_electronic_min": {
                    "type": "number",
                    "description": "Minimum value for the electronic dielectric constant."
                },
                "n_max": {
                    "type": "number",
                    "description": "Maximum value for the refractive index."
                },
                "n_min": {
                    "type": "number",
                    "description": "Minimum value for the refractive index."
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from DielectricDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `total` `ionic` `electronic` `e_total` `e_ionic` `e_electronic` `n`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_piezoelectric__get",
        "description": "Get PiezoelectricDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "piezo_modulus_max": {
                    "type": "number",
                    "description": "Maximum value for the piezoelectric modulus in C/m\u00b2."
                },
                "piezo_modulus_min": {
                    "type": "number",
                    "description": "Minimum value for the piezoelectric modulus in C/m\u00b2."
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from PiezoelectricDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `total` `ionic` `electronic` `e_ij_max` `max_direction` `strain_for_max`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_magnetism__get",
        "description": "Get MagnetismDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "total_magnetization_max": {
                    "type": "number",
                    "description": "Maximum value for the total magnetization."
                },
                "total_magnetization_min": {
                    "type": "number",
                    "description": "Minimum value for the total magnetization."
                },
                "total_magnetization_normalized_vol_max": {
                    "type": "number",
                    "description": "Maximum value for the total magnetization normalized with volume."
                },
                "total_magnetization_normalized_vol_min": {
                    "type": "number",
                    "description": "Minimum value for the total magnetization normalized with volume."
                },
                "total_magnetization_normalized_formula_units_max": {
                    "type": "number",
                    "description": "Maximum value for the total magnetization normalized with formula units."
                },
                "total_magnetization_normalized_formula_units_min": {
                    "type": "number",
                    "description": "Minimum value for the total magnetization normalized with formula units."
                },
                "num_magnetic_sites_max": {
                    "type": "integer",
                    "description": "Maximum value for the total number of magnetic sites."
                },
                "num_magnetic_sites_min": {
                    "type": "integer",
                    "description": "Minimum value for the total number of magnetic sites."
                },
                "num_unique_magnetic_sites_max": {
                    "type": "integer",
                    "description": "Maximum value for the total number of unique magnetic sites."
                },
                "num_unique_magnetic_sites_min": {
                    "type": "integer",
                    "description": "Minimum value for the total number of unique magnetic sites."
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from MagnetismDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `ordering` `is_magnetic` `exchange_symmetry` `num_magnetic_sites` `num_unique_magnetic_sites` `types_of_magnetic_species` `magmoms` `total_magnetization` `total_magnetization_normalized_vol` `total_magnetization_normalized_formula_units`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "get_by_key_materials_phonon__material_id___get",
        "description": "Get a PhononBSDOSDoc document by by material_id",
        "parameters": {
            "type": "object",
            "properties": {
                "material_id": {
                    "type": "string",
                    "description": ""
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from PhononBSDOSDoc as a list of comma separated strings.                    Fields include: `material_id` `ph_bs` `ph_dos` `last_updated`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "material_id",
            "_fields"
        ]
    },
    {
        "name": "get_by_key_materials_eos__task_id___get",
        "description": "Get a EOSDoc document by by task_id",
        "parameters": {
            "type": "object",
            "properties": {
                "task_id": {
                    "type": "string",
                    "description": ""
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from EOSDoc as a list of comma separated strings.                    Fields include: `energies` `volumes` `eos` `task_id`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "task_id",
            "_fields"
        ]
    },
    {
        "name": "search_materials_eos__get",
        "description": "Get EOSDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "energies_max": {
                    "type": "number",
                    "description": "Query for maximum value of energies"
                },
                "energies_min": {
                    "type": "number",
                    "description": "Query for minimum value of energies"
                },
                "volumes_max": {
                    "type": "number",
                    "description": "Query for maximum value of volumes"
                },
                "volumes_min": {
                    "type": "number",
                    "description": "Query for minimum value of volumes"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from EOSDoc as a list of comma separated strings.                    Fields include: `energies` `volumes` `eos` `task_id`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "get_by_key_materials_similarity__material_id___get",
        "description": "Get a SimilarityDoc document by by material_id",
        "parameters": {
            "type": "object",
            "properties": {
                "material_id": {
                    "type": "string",
                    "description": ""
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from SimilarityDoc as a list of comma separated strings.                    Fields include: `sim` `material_id`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "material_id"
        ]
    },
    {
        "name": "search_materials_xas__get",
        "description": "Get XASDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "formula": {
                    "type": "string",
                    "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
                },
                "chemsys": {
                    "type": "string",
                    "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
                },
                "elements": {
                    "type": "string",
                    "description": "Query by elements in the material composition as a comma-separated list"
                },
                "exclude_elements": {
                    "type": "string",
                    "description": "Query by excluded elements in the material composition as a comma-separated list"
                },
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id to query on"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from XASDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `spectrum_name` `material_id` `spectrum_id` `last_updated` `warnings` `spectrum` `task_ids` `absorbing_element` `spectrum_type` `edge`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_grain_boundary__get",
        "description": "Get GrainBoundaryDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "task_ids": {
                    "type": "string",
                    "description": "Comma-separated list of Materials Project IDs to query on."
                },
                "sigma_max": {
                    "type": "integer",
                    "description": "Query for maximum value of sigma"
                },
                "sigma_min": {
                    "type": "integer",
                    "description": "Query for minimum value of sigma"
                },
                "sigma": {
                    "type": "integer",
                    "description": "Value of sigma."
                },
                "sigma_not_eq": {
                    "type": "integer",
                    "description": "Query for sigma being not equal to an exact value"
                },
                "sigma_eq_any": {
                    "type": "string",
                    "description": "Query for sigma being any of these values. Provide a comma separated list."
                },
                "sigma_neq_any": {
                    "type": "string",
                    "description": "Query for sigma being not any of these values.                             Provide a comma separated list."
                },
                "rotation_angle_max": {
                    "type": "number",
                    "description": "Query for maximum value of rotation_angle"
                },
                "rotation_angle_min": {
                    "type": "number",
                    "description": "Query for minimum value of rotation_angle"
                },
                "gb_energy_max": {
                    "type": "number",
                    "description": "Query for maximum value of gb_energy"
                },
                "gb_energy_min": {
                    "type": "number",
                    "description": "Query for minimum value of gb_energy"
                },
                "w_sep_max": {
                    "type": "number",
                    "description": "Query for maximum value of w_sep"
                },
                "w_sep_min": {
                    "type": "number",
                    "description": "Query for minimum value of w_sep"
                },
                "chemsys": {
                    "type": "string",
                    "description": "Dash-delimited string of elements in the material."
                },
                "pretty_formula": {
                    "type": "string",
                    "description": "Formula of the material."
                },
                "gb_plane": {
                    "type": "string",
                    "description": "Miller index of the grain boundary plane as comma delimitd integers."
                },
                "rotation_axis": {
                    "type": "string",
                    "description": "Miller index of the rotation axis as comma delimitd integers."
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from GrainBoundaryDoc as a list of comma separated strings.                    Fields include: `task_id` `sigma` `type` `rotation_axis` `gb_plane` `rotation_angle` `gb_energy` `initial_structure` `final_structure` `pretty_formula` `w_sep` `cif` `chemsys` `last_updated`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "get_by_key_materials_fermi__task_id___get",
        "description": "Get a FermiDoc document by by task_id",
        "parameters": {
            "type": "object",
            "properties": {
                "task_id": {
                    "type": "string",
                    "description": ""
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from FermiDoc as a list of comma separated strings.                    Fields include: `fermi_surfaces` `surface_types` `task_id` `last_updated`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "task_id"
        ]
    },
    {
        "name": "get_by_key_materials_elasticity__task_id___get",
        "description": "Get a ElasticityDoc document by by task_id",
        "parameters": {
            "type": "object",
            "properties": {
                "task_id": {
                    "type": "string",
                    "description": ""
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from ElasticityDoc as a list of comma separated strings.                    Fields include: `pretty_formula` `chemsys` `elasticity` `task_id`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "task_id"
        ]
    },
    {
        "name": "search_materials_elasticity__get",
        "description": "Get ElasticityDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "chemsys": {
                    "type": "string",
                    "description": "A comma delimited string list of chemical systems."
                },
                "k_voigt_max": {
                    "type": "number",
                    "description": "Maximum value for the Voigt average of the bulk modulus in GPa."
                },
                "k_voigt_min": {
                    "type": "number",
                    "description": "Minimum value for the Voigt average of the bulk modulus in GPa."
                },
                "k_reuss_max": {
                    "type": "number",
                    "description": "Maximum value for the Reuss average of the bulk modulus in GPa."
                },
                "k_reuss_min": {
                    "type": "number",
                    "description": "Minimum value for the Reuss average of the bulk modulus in GPa."
                },
                "k_vrh_max": {
                    "type": "number",
                    "description": "Maximum value for the Voigt-Reuss-Hill average of the bulk modulus in GPa."
                },
                "k_vrh_min": {
                    "type": "number",
                    "description": "Minimum value for the Voigt-Reuss-Hill average of the bulk modulus in GPa."
                },
                "g_voigt_max": {
                    "type": "number",
                    "description": "Maximum value for the Voigt average of the shear modulus in GPa."
                },
                "g_voigt_min": {
                    "type": "number",
                    "description": "Minimum value for the Voigt average of the shear modulus in GPa."
                },
                "g_reuss_max": {
                    "type": "number",
                    "description": "Maximum value for the Reuss average of the shear modulus in GPa."
                },
                "g_reuss_min": {
                    "type": "number",
                    "description": "Minimum value for the Reuss average of the shear modulus in GPa."
                },
                "g_vrh_max": {
                    "type": "number",
                    "description": "Maximum value for the Voigt-Reuss-Hill average of the shear modulus in GPa."
                },
                "g_vrh_min": {
                    "type": "number",
                    "description": "Minimum value for the Voigt-Reuss-Hill average of the shear modulus in GPa."
                },
                "elastic_anisotropy_max": {
                    "type": "number",
                    "description": "Maximum value for the elastic anisotropy."
                },
                "elastic_anisotropy_min": {
                    "type": "number",
                    "description": "Maximum value for the elastic anisotropy."
                },
                "poisson_max": {
                    "type": "number",
                    "description": "Maximum value for Poisson's ratio."
                },
                "poisson_min": {
                    "type": "number",
                    "description": "Minimum value for Poisson's ratio."
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from ElasticityDoc as a list of comma separated strings.                    Fields include: `pretty_formula` `chemsys` `elasticity` `task_id`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        }
    },
    {
        "name": "search_materials_substrates__get",
        "description": "Get SubstratesDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "film_orientation": {
                    "type": "string",
                    "description": "Comma separated integers defining the film surface orientation."
                },
                "substrate_orientation": {
                    "type": "string",
                    "description": "Comma separated integers defining the substrate surface orientation."
                },
                "area_max": {
                    "type": "number",
                    "description": "Query for maximum value of area"
                },
                "area_min": {
                    "type": "number",
                    "description": "Query for minimum value of area"
                },
                "energy_max": {
                    "type": "number",
                    "description": "Query for maximum value of energy"
                },
                "energy_min": {
                    "type": "number",
                    "description": "Query for minimum value of energy"
                },
                "sub_form": {
                    "type": "string",
                    "description": "Query for sub_form being equal to a value"
                },
                "sub_form_not_eq": {
                    "type": "string",
                    "description": "Query for sub_form being not equal to a value"
                },
                "sub_form_eq_any": {
                    "type": "string",
                    "description": "Query for sub_form being any of these values. Provide a comma separated list."
                },
                "sub_form_neq_any": {
                    "type": "string",
                    "description": "Query for sub_form being not any of these values. Provide a comma separated list"
                },
                "sub_id": {
                    "type": "string",
                    "description": "Query for sub_id being equal to a value"
                },
                "sub_id_not_eq": {
                    "type": "string",
                    "description": "Query for sub_id being not equal to a value"
                },
                "sub_id_eq_any": {
                    "type": "string",
                    "description": "Query for sub_id being any of these values. Provide a comma separated list."
                },
                "sub_id_neq_any": {
                    "type": "string",
                    "description": "Query for sub_id being not any of these values. Provide a comma separated list"
                },
                "film_id": {
                    "type": "string",
                    "description": "Query for film_id being equal to a value"
                },
                "film_id_not_eq": {
                    "type": "string",
                    "description": "Query for film_id being not equal to a value"
                },
                "film_id_eq_any": {
                    "type": "string",
                    "description": "Query for film_id being any of these values. Provide a comma separated list."
                },
                "film_id_neq_any": {
                    "type": "string",
                    "description": "Query for film_id being not any of these values. Provide a comma separated list"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from SubstratesDoc as a list of comma separated strings.                    Fields include: `sub_form` `sub_id` `film_orient` `area` `energy` `film_id` `orient`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        }
    },
    {
        "name": "search_materials_surface_properties__get",
        "description": "Get SurfacePropDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "weighted_surface_energy_EV_PER_ANG2_max": {
                    "type": "number",
                    "description": "Query for maximum value of weighted_surface_energy_EV_PER_ANG2"
                },
                "weighted_surface_energy_EV_PER_ANG2_min": {
                    "type": "number",
                    "description": "Query for minimum value of weighted_surface_energy_EV_PER_ANG2"
                },
                "weighted_surface_energy_max": {
                    "type": "number",
                    "description": "Query for maximum value of weighted_surface_energy"
                },
                "weighted_surface_energy_min": {
                    "type": "number",
                    "description": "Query for minimum value of weighted_surface_energy"
                },
                "surface_anisotropy_max": {
                    "type": "number",
                    "description": "Query for maximum value of surface_anisotropy"
                },
                "surface_anisotropy_min": {
                    "type": "number",
                    "description": "Query for minimum value of surface_anisotropy"
                },
                "shape_factor_max": {
                    "type": "number",
                    "description": "Query for maximum value of shape_factor"
                },
                "shape_factor_min": {
                    "type": "number",
                    "description": "Query for minimum value of shape_factor"
                },
                "weighted_work_function_max": {
                    "type": "number",
                    "description": "Query for maximum value of weighted_work_function"
                },
                "weighted_work_function_min": {
                    "type": "number",
                    "description": "Query for minimum value of weighted_work_function"
                },
                "has_reconstructed": {
                    "type": "boolean",
                    "description": "Whether the entry has a reconstructed surface."
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from SurfacePropDoc as a list of comma separated strings.                    Fields include: `surfaces` `weighted_surface_energy_EV_PER_ANG2` `weighted_surface_energy` `surface_anisotropy` `pretty_formula` `shape_factor` `weighted_work_function` `has_reconstructed` `task_id` `structure`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_robocrys_text_search__get",
        "description": "Get RobocrystallogapherDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "keywords": {
                    "type": "string",
                    "description": "Comma delimited string keywords to search robocrystallographer description text with"
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search"
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 100"
                }
            }
        },
        "required": [
            "keywords"
        ]
    },
    {
        "name": "search_materials_robocrys__get",
        "description": "Get RobocrystallogapherDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from RobocrystallogapherDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `description` `condensed_structure` `robocrys_version`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_synthesis__get",
        "description": "Get SynthesisSearchResultModel documents",
        "parameters": {
            "type": "object",
            "properties": {
                "keywords": {
                    "type": "string",
                    "description": "Comma delimited string keywords to search synthesis paragraph text with."
                },
                "synthesis_type": {
                    "type": "string",
                    "description": "Comma delimited types of synthesis to include. 'solid_state', 'sol_gel'"
                },
                "target_formula": {
                    "type": "string",
                    "description": "Chemical formula of the target material."
                },
                "precursor_formula": {
                    "type": "string",
                    "description": "Chemical formula of the precursor material."
                },
                "operations": {
                    "type": "string",
                    "description": "List of operations that syntheses must have. 'starting', 'mixing', 'shaping', 'drying', 'heating', 'quenching'"
                },
                "condition_heating_temperature_min": {
                    "type": "number",
                    "description": "Minimal heating temperature."
                },
                "condition_heating_temperature_max": {
                    "type": "number",
                    "description": "Maximal heating temperature."
                },
                "condition_heating_time_min": {
                    "type": "number",
                    "description": "Minimal heating time."
                },
                "condition_heating_time_max": {
                    "type": "number",
                    "description": "Maximal heating time."
                },
                "condition_heating_atmosphere": {
                    "type": "string",
                    "description": "Comma delimited list of required heating atmosphere, such as \"air\", \"argon\"."
                },
                "condition_mixing_device": {
                    "type": "string",
                    "description": "Comma delimited list of required mixing device, such as \"zirconia\", \"Al2O3\"."
                },
                "condition_mixing_media": {
                    "type": "string",
                    "description": "Comma delimited list of required mixing media, such as \"alcohol\", \"water\"."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search"
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 10."
                }
            }
        }
    },
    {
        "name": "search_materials_oxidation_states__get",
        "description": "Get OxidationStateDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "formula": {
                    "type": "string",
                    "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
                },
                "chemsys": {
                    "type": "string",
                    "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
                },
                "possible_species": {
                    "type": "string",
                    "description": "Comma delimited list of element symbols appended with oxidation states.                 (e.g. Cr2+,O2-)"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from OxidationStateDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `possible_species` `possible_valences` `average_oxidation_states` `method`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_alloys__get",
        "description": "Get AlloyPairDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_ids to query on"
                },
                "formulae": {
                    "type": "string",
                    "description": "Comma-separated list of end-point formulas to query."
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from AlloyPairDoc as a list of comma separated strings.                    Fields include: `builder_meta` `alloy_pair` `pair_id`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        }
    },
    {
        "name": "search_materials_provenance__get",
        "description": "Get ProvenanceDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether the material is marked as deprecated"
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from ProvenanceDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `created_at` `references` `authors` `remarks` `tags` `theoretical` `database_IDs` `history`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_charge_density__get",
        "description": "Get ChgcarDataDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "task_ids": {
                    "type": "string",
                    "description": "Comma-separated list of calculation (task) IDs to query on"
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from ChgcarDataDoc as a list of comma separated strings.                    Fields include: `fs_id` `last_updated` `task_id`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        }
    },
    {
        "name": "get_by_key_materials_charge_density__fs_id___get",
        "description": "Get a ChgcarDataDoc document by by fs_id",
        "parameters": {
            "type": "object",
            "properties": {
                "fs_id": {
                    "type": "string",
                    "description": ""
                }
            }
        },
        "required": [
            "fs_id"
        ]
    },
    {
        "name": "search_materials_summary_stats__get",
        "description": "Get SummaryStats documents",
        "parameters": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string",
                    "description": "",
                    "enum": [
                        "band_gap",
                        "density",
                        "density_atomic",
                        "dos_energy_down",
                        "dos_energy_up",
                        "e_electronic",
                        "e_ij_max",
                        "e_ionic",
                        "e_total",
                        "efermi",
                        "energy_above_hull",
                        "energy_per_atom",
                        "equilibrium_reaction_energy_per_atom",
                        "formation_energy_per_atom",
                        "g_reuss",
                        "g_voigt",
                        "g_vrh",
                        "homogeneous_poisson",
                        "k_reuss",
                        "k_voigt",
                        "k_vrh",
                        "n",
                        "shape_factor",
                        "surface_anisotropy",
                        "total_magnetization",
                        "total_magnetization_normalized_formula_units",
                        "total_magnetization_normalized_vol",
                        "uncorrected_energy_per_atom",
                        "universal_anisotropy",
                        "volume",
                        "weighted_surface_energy",
                        "weighted_surface_energy_EV_PER_ANG2",
                        "weighted_work_function"
                    ]
                },
                "num_samples": {
                    "type": "integer",
                    "description": ""
                },
                "min_val": {
                    "type": "number",
                    "description": ""
                },
                "max_val": {
                    "type": "number",
                    "description": ""
                },
                "num_points": {
                    "type": "integer",
                    "description": ""
                }
            }
        }
    },
    {
        "name": "search_materials_summary__get",
        "description": "Get SummaryDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_ids to query on"
                },
                "formula": {
                    "type": "string",
                    "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
                },
                "chemsys": {
                    "type": "string",
                    "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
                },
                "elements": {
                    "type": "string",
                    "description": "Query by elements in the material composition as a comma-separated list"
                },
                "exclude_elements": {
                    "type": "string",
                    "description": "Query by excluded elements in the material composition as a comma-separated list"
                },
                "possible_species": {
                    "type": "string",
                    "description": "Comma delimited list of element symbols appended with oxidation states.                 (e.g. Cr2+,O2-)"
                },
                "spacegroup_number": {
                    "type": "integer",
                    "description": "Space group number of the material"
                },
                "spacegroup_symbol": {
                    "type": "string",
                    "description": "Space group symbol of the material"
                },
                "is_stable": {
                    "type": "boolean",
                    "description": "Whether the material is stable."
                },
                "theoretical": {
                    "type": "boolean",
                    "description": "Whether the material is theoretical."
                },
                "is_gap_direct": {
                    "type": "boolean",
                    "description": "Whether a band gap is direct or not."
                },
                "is_metal": {
                    "type": "boolean",
                    "description": "Whether the material is considered a metal."
                },
                "nsites_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nsites"
                },
                "nsites_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nsites"
                },
                "nsites": {
                    "type": "integer",
                    "description": "Query for nsites being equal to an exact value"
                },
                "nsites_not_eq": {
                    "type": "integer",
                    "description": "Query for nsites being not equal to an exact value"
                },
                "nsites_eq_any": {
                    "type": "string",
                    "description": "Query for nsites being any of these values. Provide a comma separated list."
                },
                "nsites_neq_any": {
                    "type": "string",
                    "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
                },
                "nelements_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nelements"
                },
                "nelements_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nelements"
                },
                "nelements": {
                    "type": "integer",
                    "description": "Query for nelements being equal to an exact value"
                },
                "nelements_not_eq": {
                    "type": "integer",
                    "description": "Query for nelements being not equal to an exact value"
                },
                "nelements_eq_any": {
                    "type": "string",
                    "description": "Query for nelements being any of these values. Provide a comma separated list."
                },
                "nelements_neq_any": {
                    "type": "string",
                    "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
                },
                "volume_max": {
                    "type": "number",
                    "description": "Query for maximum value of Volume"
                },
                "volume_min": {
                    "type": "number",
                    "description": "Query for minimum value of Volume"
                },
                "density_max": {
                    "type": "number",
                    "description": "Query for maximum value of Density"
                },
                "density_min": {
                    "type": "number",
                    "description": "Query for minimum value of Density"
                },
                "density_atomic_max": {
                    "type": "number",
                    "description": "Query for maximum value of Packing Density"
                },
                "density_atomic_min": {
                    "type": "number",
                    "description": "Query for minimum value of Packing Density"
                },
                "uncorrected_energy_per_atom_max": {
                    "type": "number",
                    "description": "Query for maximum value of uncorrected_energy_per_atom"
                },
                "uncorrected_energy_per_atom_min": {
                    "type": "number",
                    "description": "Query for minimum value of uncorrected_energy_per_atom"
                },
                "energy_per_atom_max": {
                    "type": "number",
                    "description": "Query for maximum value of energy_per_atom"
                },
                "energy_per_atom_min": {
                    "type": "number",
                    "description": "Query for minimum value of energy_per_atom"
                },
                "formation_energy_per_atom_max": {
                    "type": "number",
                    "description": "Query for maximum value of formation_energy_per_atom"
                },
                "formation_energy_per_atom_min": {
                    "type": "number",
                    "description": "Query for minimum value of formation_energy_per_atom"
                },
                "energy_above_hull_max": {
                    "type": "number",
                    "description": "Query for maximum value of energy_above_hull"
                },
                "energy_above_hull_min": {
                    "type": "number",
                    "description": "Query for minimum value of energy_above_hull"
                },
                "equilibrium_reaction_energy_per_atom_max": {
                    "type": "number",
                    "description": "Query for maximum value of equilibrium_reaction_energy_per_atom"
                },
                "equilibrium_reaction_energy_per_atom_min": {
                    "type": "number",
                    "description": "Query for minimum value of equilibrium_reaction_energy_per_atom"
                },
                "band_gap_max": {
                    "type": "number",
                    "description": "Query for maximum value of band_gap"
                },
                "band_gap_min": {
                    "type": "number",
                    "description": "Query for minimum value of band_gap"
                },
                "efermi_max": {
                    "type": "number",
                    "description": "Query for maximum value of efermi"
                },
                "efermi_min": {
                    "type": "number",
                    "description": "Query for minimum value of efermi"
                },
                "dos_energy_up_max": {
                    "type": "number",
                    "description": "Query for maximum value of dos_energy_up"
                },
                "dos_energy_up_min": {
                    "type": "number",
                    "description": "Query for minimum value of dos_energy_up"
                },
                "dos_energy_down_max": {
                    "type": "number",
                    "description": "Query for maximum value of dos_energy_down"
                },
                "dos_energy_down_min": {
                    "type": "number",
                    "description": "Query for minimum value of dos_energy_down"
                },
                "total_magnetization_max": {
                    "type": "number",
                    "description": "Query for maximum value of total_magnetization"
                },
                "total_magnetization_min": {
                    "type": "number",
                    "description": "Query for minimum value of total_magnetization"
                },
                "total_magnetization_normalized_vol_max": {
                    "type": "number",
                    "description": "Query for maximum value of total_magnetization_normalized_vol"
                },
                "total_magnetization_normalized_vol_min": {
                    "type": "number",
                    "description": "Query for minimum value of total_magnetization_normalized_vol"
                },
                "total_magnetization_normalized_formula_units_max": {
                    "type": "number",
                    "description": "Query for maximum value of total_magnetization_normalized_formula_units"
                },
                "total_magnetization_normalized_formula_units_min": {
                    "type": "number",
                    "description": "Query for minimum value of total_magnetization_normalized_formula_units"
                },
                "num_magnetic_sites_max": {
                    "type": "integer",
                    "description": "Query for maximum value of num_magnetic_sites"
                },
                "num_magnetic_sites_min": {
                    "type": "integer",
                    "description": "Query for minimum value of num_magnetic_sites"
                },
                "num_magnetic_sites": {
                    "type": "integer",
                    "description": "Query for num_magnetic_sites being equal to an exact value"
                },
                "num_magnetic_sites_not_eq": {
                    "type": "integer",
                    "description": "Query for num_magnetic_sites being not equal to an exact value"
                },
                "num_magnetic_sites_eq_any": {
                    "type": "string",
                    "description": "Query for num_magnetic_sites being any of these values. Provide a comma separated list."
                },
                "num_magnetic_sites_neq_any": {
                    "type": "string",
                    "description": "Query for num_magnetic_sites being not any of these values.                             Provide a comma separated list."
                },
                "num_unique_magnetic_sites_max": {
                    "type": "integer",
                    "description": "Query for maximum value of num_unique_magnetic_sites"
                },
                "num_unique_magnetic_sites_min": {
                    "type": "integer",
                    "description": "Query for minimum value of num_unique_magnetic_sites"
                },
                "num_unique_magnetic_sites": {
                    "type": "integer",
                    "description": "Query for num_unique_magnetic_sites being equal to an exact value"
                },
                "num_unique_magnetic_sites_not_eq": {
                    "type": "integer",
                    "description": "Query for num_unique_magnetic_sites being not equal to an exact value"
                },
                "num_unique_magnetic_sites_eq_any": {
                    "type": "string",
                    "description": "Query for num_unique_magnetic_sites being any of these values. Provide a comma separated list."
                },
                "num_unique_magnetic_sites_neq_any": {
                    "type": "string",
                    "description": "Query for num_unique_magnetic_sites being not any of these values.                             Provide a comma separated list."
                },
                "k_voigt_max": {
                    "type": "number",
                    "description": "Query for maximum value of k_voigt"
                },
                "k_voigt_min": {
                    "type": "number",
                    "description": "Query for minimum value of k_voigt"
                },
                "k_reuss_max": {
                    "type": "number",
                    "description": "Query for maximum value of k_reuss"
                },
                "k_reuss_min": {
                    "type": "number",
                    "description": "Query for minimum value of k_reuss"
                },
                "k_vrh_max": {
                    "type": "number",
                    "description": "Query for maximum value of k_vrh"
                },
                "k_vrh_min": {
                    "type": "number",
                    "description": "Query for minimum value of k_vrh"
                },
                "g_voigt_max": {
                    "type": "number",
                    "description": "Query for maximum value of g_voigt"
                },
                "g_voigt_min": {
                    "type": "number",
                    "description": "Query for minimum value of g_voigt"
                },
                "g_reuss_max": {
                    "type": "number",
                    "description": "Query for maximum value of g_reuss"
                },
                "g_reuss_min": {
                    "type": "number",
                    "description": "Query for minimum value of g_reuss"
                },
                "g_vrh_max": {
                    "type": "number",
                    "description": "Query for maximum value of g_vrh"
                },
                "g_vrh_min": {
                    "type": "number",
                    "description": "Query for minimum value of g_vrh"
                },
                "universal_anisotropy_max": {
                    "type": "number",
                    "description": "Query for maximum value of universal_anisotropy"
                },
                "universal_anisotropy_min": {
                    "type": "number",
                    "description": "Query for minimum value of universal_anisotropy"
                },
                "homogeneous_poisson_max": {
                    "type": "number",
                    "description": "Query for maximum value of homogeneous_poisson"
                },
                "homogeneous_poisson_min": {
                    "type": "number",
                    "description": "Query for minimum value of homogeneous_poisson"
                },
                "e_total_max": {
                    "type": "number",
                    "description": "Query for maximum value of e_total"
                },
                "e_total_min": {
                    "type": "number",
                    "description": "Query for minimum value of e_total"
                },
                "e_ionic_max": {
                    "type": "number",
                    "description": "Query for maximum value of e_ionic"
                },
                "e_ionic_min": {
                    "type": "number",
                    "description": "Query for minimum value of e_ionic"
                },
                "e_electronic_max": {
                    "type": "number",
                    "description": "Query for maximum value of e_electronic"
                },
                "e_electronic_min": {
                    "type": "number",
                    "description": "Query for minimum value of e_electronic"
                },
                "n_max": {
                    "type": "number",
                    "description": "Query for maximum value of n"
                },
                "n_min": {
                    "type": "number",
                    "description": "Query for minimum value of n"
                },
                "e_ij_max_max": {
                    "type": "number",
                    "description": "Query for maximum value of e_ij_max"
                },
                "e_ij_max_min": {
                    "type": "number",
                    "description": "Query for minimum value of e_ij_max"
                },
                "weighted_surface_energy_EV_PER_ANG2_max": {
                    "type": "number",
                    "description": "Query for maximum value of weighted_surface_energy_EV_PER_ANG2"
                },
                "weighted_surface_energy_EV_PER_ANG2_min": {
                    "type": "number",
                    "description": "Query for minimum value of weighted_surface_energy_EV_PER_ANG2"
                },
                "weighted_surface_energy_max": {
                    "type": "number",
                    "description": "Query for maximum value of weighted_surface_energy"
                },
                "weighted_surface_energy_min": {
                    "type": "number",
                    "description": "Query for minimum value of weighted_surface_energy"
                },
                "weighted_work_function_max": {
                    "type": "number",
                    "description": "Query for maximum value of weighted_work_function"
                },
                "weighted_work_function_min": {
                    "type": "number",
                    "description": "Query for minimum value of weighted_work_function"
                },
                "surface_anisotropy_max": {
                    "type": "number",
                    "description": "Query for maximum value of surface_anisotropy"
                },
                "surface_anisotropy_min": {
                    "type": "number",
                    "description": "Query for minimum value of surface_anisotropy"
                },
                "shape_factor_max": {
                    "type": "number",
                    "description": "Query for maximum value of shape_factor"
                },
                "shape_factor_min": {
                    "type": "number",
                    "description": "Query for minimum value of shape_factor"
                },
                "has_reconstructed": {
                    "type": "boolean",
                    "description": "Whether the material has reconstructed surfaces."
                },
                "has_props": {
                    "type": "string",
                    "description": "Comma-delimited list of possible properties given by HasPropsEnum to search for."
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether the material is marked as deprecated"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from SummaryDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `task_ids` `uncorrected_energy_per_atom` `energy_per_atom` `formation_energy_per_atom` `energy_above_hull` `is_stable` `equilibrium_reaction_energy_per_atom` `decomposes_to` `xas` `grain_boundaries` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `es_source_calc_id` `bandstructure` `dos` `dos_energy_up` `dos_energy_down` `is_magnetic` `ordering` `total_magnetization` `total_magnetization_normalized_vol` `total_magnetization_normalized_formula_units` `num_magnetic_sites` `num_unique_magnetic_sites` `types_of_magnetic_species` `k_voigt` `k_reuss` `k_vrh` `g_voigt` `g_reuss` `g_vrh` `universal_anisotropy` `homogeneous_poisson` `e_total` `e_ionic` `e_electronic` `n` `e_ij_max` `weighted_surface_energy_EV_PER_ANG2` `weighted_surface_energy` `weighted_work_function` `surface_anisotropy` `shape_factor` `has_reconstructed` `possible_species` `has_props` `theoretical` `database_IDs`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_electronic_structure_bandstructure__get",
        "description": "Get ElectronicStructureDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "band_gap_max": {
                    "type": "number",
                    "description": "Maximum value for the band gap energy in eV."
                },
                "band_gap_min": {
                    "type": "number",
                    "description": "Minimum value for the band gap energy in eV."
                },
                "efermi_max": {
                    "type": "number",
                    "description": "Maximum value for the fermi energy in eV."
                },
                "efermi_min": {
                    "type": "number",
                    "description": "Minimum value for the fermi energy in eV."
                },
                "is_gap_direct": {
                    "type": "boolean",
                    "description": "Whether a band gap is direct or not."
                },
                "is_metal": {
                    "type": "boolean",
                    "description": "Whether the material is considered a metal."
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether the material is marked as deprecated"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_electronic_structure_dos__get",
        "description": "Get ElectronicStructureDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "band_gap_max": {
                    "type": "number",
                    "description": "Maximum value for the band gap energy in eV."
                },
                "band_gap_min": {
                    "type": "number",
                    "description": "Minimum value for the band gap energy in eV."
                },
                "efermi_max": {
                    "type": "number",
                    "description": "Maximum value for the fermi energy in eV."
                },
                "efermi_min": {
                    "type": "number",
                    "description": "Minimum value for the fermi energy in eV."
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether the material is marked as deprecated"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_electronic_structure__get",
        "description": "Get ElectronicStructureDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "material_ids": {
                    "type": "string",
                    "description": "Comma-separated list of material_id values to query on"
                },
                "is_gap_direct": {
                    "type": "boolean",
                    "description": "Whether a band gap is direct or not."
                },
                "is_metal": {
                    "type": "boolean",
                    "description": "Whether the material is considered a metal."
                },
                "formula": {
                    "type": "string",
                    "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
                },
                "chemsys": {
                    "type": "string",
                    "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
                },
                "elements": {
                    "type": "string",
                    "description": "Query by elements in the material composition as a comma-separated list"
                },
                "exclude_elements": {
                    "type": "string",
                    "description": "Query by excluded elements in the material composition as a comma-separated list"
                },
                "band_gap_max": {
                    "type": "number",
                    "description": "Query for maximum value of band_gap"
                },
                "band_gap_min": {
                    "type": "number",
                    "description": "Query for minimum value of band_gap"
                },
                "efermi_max": {
                    "type": "number",
                    "description": "Query for maximum value of efermi"
                },
                "efermi_min": {
                    "type": "number",
                    "description": "Query for minimum value of efermi"
                },
                "nsites_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nsites"
                },
                "nsites_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nsites"
                },
                "nsites": {
                    "type": "integer",
                    "description": "Query for nsites being equal to an exact value"
                },
                "nsites_not_eq": {
                    "type": "integer",
                    "description": "Query for nsites being not equal to an exact value"
                },
                "nsites_eq_any": {
                    "type": "string",
                    "description": "Query for nsites being any of these values. Provide a comma separated list."
                },
                "nsites_neq_any": {
                    "type": "string",
                    "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
                },
                "nelements_max": {
                    "type": "integer",
                    "description": "Query for maximum value of nelements"
                },
                "nelements_min": {
                    "type": "integer",
                    "description": "Query for minimum value of nelements"
                },
                "nelements": {
                    "type": "integer",
                    "description": "Query for nelements being equal to an exact value"
                },
                "nelements_not_eq": {
                    "type": "integer",
                    "description": "Query for nelements being not equal to an exact value"
                },
                "nelements_eq_any": {
                    "type": "string",
                    "description": "Query for nelements being any of these values. Provide a comma separated list."
                },
                "nelements_neq_any": {
                    "type": "string",
                    "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
                },
                "volume_max": {
                    "type": "number",
                    "description": "Query for maximum value of Volume"
                },
                "volume_min": {
                    "type": "number",
                    "description": "Query for minimum value of Volume"
                },
                "density_max": {
                    "type": "number",
                    "description": "Query for maximum value of Density"
                },
                "density_min": {
                    "type": "number",
                    "description": "Query for minimum value of Density"
                },
                "density_atomic_max": {
                    "type": "number",
                    "description": "Query for maximum value of Packing Density"
                },
                "density_atomic_min": {
                    "type": "number",
                    "description": "Query for minimum value of Packing Density"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether the material is marked as deprecated"
                },
                "_sort_fields": {
                    "type": "string",
                    "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
                },
                "_page": {
                    "type": "integer",
                    "description": "Page number to request (takes precedent over _limit and _skip)."
                },
                "_per_page": {
                    "type": "integer",
                    "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000."
                },
                "_skip": {
                    "type": "integer",
                    "description": "Number of entries to skip in the search."
                },
                "_limit": {
                    "type": "integer",
                    "description": "Max number of entries to return in a single query. Limited to 1000."
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "_fields"
        ]
    },
    {
        "name": "search_materials_electronic_structure_bandstructure_object__get",
        "description": "Get BSObjectDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "task_id": {
                    "type": "string",
                    "description": "The calculation (task) ID associated with the data object"
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from BSObjectDoc as a list of comma separated strings.                    Fields include: `task_id` `last_updated` `data`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "task_id"
        ]
    },
    {
        "name": "search_materials_electronic_structure_dos_object__get",
        "description": "Get DOSObjectDoc documents",
        "parameters": {
            "type": "object",
            "properties": {
                "task_id": {
                    "type": "string",
                    "description": "The calculation (task) ID associated with the data object"
                },
                "_fields": {
                    "type": "string",
                    "description": "Fields to project from DOSObjectDoc as a list of comma separated strings.                    Fields include: `task_id` `last_updated` `data`"
                },
                "_all_fields": {
                    "type": "boolean",
                    "description": "Include all fields."
                }
            }
        },
        "required": [
            "task_id"
        ]
    }
]