{
  "openapi": "3.1.0",
  "info": {
    "title": "Materials Project API",
    "description": "\nThe Materials Project API allows anyone to have direct access to current, up-to-date information from the Materials Project database in a structured way.\n\nThis allows for analysis, development of automated tools, machine learning, downloading personal copies of the Materials Project database and more on a large scale.\n\nThe API is offered with the hopes of making Materials Project data more useful to you. We want you to use our data! As such, the API is offered free-of-charge and we support several tools to help you get started.\n\n## API Key\nTo make any request to the Materials Project API, you must use an API key. Your API key is generated for you automatically upon registering with the Materials Project website and is synced with the email you used to register.\n\nRemember to keep your API key safe and to not share it with anyone you do not trust.\n\nIf you are logged in, you can always access your API key from this page or from your [dashboard](https://next-gen.materialsproject.org/dashboard).\n\nIf you intend heavy API usage, you can give us a heads up by sending a message to <heavy.api.use@materialsproject.org>. With the exception of retrieving charge densities, this is not required, but may help us if we see unusual load on our servers.\n\n## Accessing Data\nTo use the API, you have three options:\n\n1. You can use our first-party supported Python client. This is the recommend route. The `mp-api` package containing the client is pip installable.\n\n    ```\n    pip install mp-api\n    ```\n\n    The `MPRester` client can be accessed by importing from it. This will ultimately replace the legacy `MPRester` available in pymatgen.\n\n    For more details on how to use this, including code examples, please see <https://next-gen.materialsproject.org/api>.\n\n2. You can demo the API interactively on this documentation page. Click the \"Authorize\" button, paste in your API key, and then click the appropriate section to try out a query.\n\n3. Since this is a REST API, and offers a fully-compliant OpenAPI specification, it's possible to use the API with many libraries in many languages and environments, including JavaScript, MATLAB, Mathematica, etc. However, we do not offer first-party support for explaining how to do this, and you will have to follow the specification yourself.\n\n",
    "version": "0.64.5.dev9+g518a78cf",
    "x-logo": {
      "url": "https://raw.githubusercontent.com/materialsproject/emmet/master/emmet-api/emmet/api/core/assets/mp_logo_small.png"
    }
  },
  "paths": {
    "/doi/{task_id}/": {
      "get": {
        "tags": ["DOIs"],
        "summary": "Get a DOIDoc document by by task_id",
        "operationId": "get_by_key_doi__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the DOIDoc to get"
            },
            "name": "task_id",
            "in": "path"
          },
          {
            "description": "Fields to project from DOIDoc as a list of comma separated strings.                    Fields include: `doi` `bibtex` `task_id`",
            "required": true,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from DOIDoc as a list of comma separated strings.                    Fields include: `doi` `bibtex` `task_id`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a DOIDoc document by task_id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_DOIDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/core/find_structure/": {
      "post": {
        "tags": ["Materials"],
        "summary": "Post FindStructure documents",
        "operationId": "search_materials_core_find_structure__post",
        "parameters": [
          {
            "description": "Fractional length tolerance. Default is 0.2.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Ltol",
              "description": "Fractional length tolerance. Default is 0.2.",
              "default": 0.2
            },
            "name": "ltol",
            "in": "query"
          },
          {
            "description": "Site tolerance. Defined as the fraction of the average free                     length per atom := ( V / Nsites ) ** (1/3). Default is 0.3.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Stol",
              "description": "Site tolerance. Defined as the fraction of the average free                     length per atom := ( V / Nsites ) ** (1/3). Default is 0.3.",
              "default": 0.3
            },
            "name": "stol",
            "in": "query"
          },
          {
            "description": "Angle tolerance in degrees. Default is 5 degrees.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Angle Tol",
              "description": "Angle tolerance in degrees. Default is 5 degrees.",
              "default": 5
            },
            "name": "angle_tol",
            "in": "query"
          },
          {
            "description": "Maximum number of matches to show. Defaults to 1, only showing the best match.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Maximum number of matches to show. Defaults to 1, only showing the best match.",
              "default": 1
            },
            "name": "_limit",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "@class": { "type": "string", "enum": ["Structure"] },
                  "@module": {
                    "type": "string",
                    "enum": ["pymatgen.core.structure"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"],
                "title": "Structure",
                "description": "Pymatgen structure object to query with"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Post FindStructure data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_FindStructure_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/core/{material_id}/": {
      "get": {
        "tags": ["Materials"],
        "summary": "Get a MaterialsDoc document by by material_id",
        "operationId": "get_by_key_materials_core__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the MaterialsDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from MaterialsDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `material_id` `structure` `deprecated` `deprecation_reasons` `initial_structures` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `task_types` `run_types` `entries`",
            "required": true,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MaterialsDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `material_id` `structure` `deprecated` `deprecation_reasons` `initial_structures` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `task_types` `run_types` `entries`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a MaterialsDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MaterialsDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/core/": {
      "get": {
        "tags": ["Materials"],
        "summary": "Get MaterialsDoc documents",
        "operationId": "search_materials_core__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Comma-separated list of task_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of task_ids to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Crystal system of the material",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/CrystalSystem" }],
              "description": "Crystal system of the material"
            },
            "name": "crystal_system",
            "in": "query"
          },
          {
            "description": "Space group number of the material",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spacegroup Number",
              "description": "Space group number of the material"
            },
            "name": "spacegroup_number",
            "in": "query"
          },
          {
            "description": "Space group symbol of the material",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Spacegroup Symbol",
              "description": "Space group symbol of the material"
            },
            "name": "spacegroup_symbol",
            "in": "query"
          },
          {
            "description": "Whether the material is marked as deprecated",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Deprecated",
              "description": "Whether the material is marked as deprecated",
              "default": false
            },
            "name": "deprecated",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Max",
              "description": "Query for maximum value of nsites"
            },
            "name": "nsites_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Min",
              "description": "Query for minimum value of nsites"
            },
            "name": "nsites_min",
            "in": "query"
          },
          {
            "description": "Query for nsites being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites",
              "description": "Query for nsites being equal to an exact value"
            },
            "name": "nsites",
            "in": "query"
          },
          {
            "description": "Query for nsites being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Not Eq",
              "description": "Query for nsites being not equal to an exact value"
            },
            "name": "nsites_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nsites being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Eq Any",
              "description": "Query for nsites being any of these values. Provide a comma separated list."
            },
            "name": "nsites_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nsites being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Neq Any",
              "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
            },
            "name": "nsites_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Max",
              "description": "Query for maximum value of nelements"
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Min",
              "description": "Query for minimum value of nelements"
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Query for nelements being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements",
              "description": "Query for nelements being equal to an exact value"
            },
            "name": "nelements",
            "in": "query"
          },
          {
            "description": "Query for nelements being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Not Eq",
              "description": "Query for nelements being not equal to an exact value"
            },
            "name": "nelements_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nelements being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Eq Any",
              "description": "Query for nelements being any of these values. Provide a comma separated list."
            },
            "name": "nelements_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nelements being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Neq Any",
              "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelements_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Max",
              "description": "Query for maximum value of Volume"
            },
            "name": "volume_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Min",
              "description": "Query for minimum value of Volume"
            },
            "name": "volume_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Max",
              "description": "Query for maximum value of Density"
            },
            "name": "density_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Min",
              "description": "Query for minimum value of Density"
            },
            "name": "density_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Max",
              "description": "Query for maximum value of Packing Density"
            },
            "name": "density_atomic_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Min",
              "description": "Query for minimum value of Packing Density"
            },
            "name": "density_atomic_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": true,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from MaterialsDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `material_id` `structure` `deprecated` `deprecation_reasons` `initial_structures` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `task_types` `run_types` `entries`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MaterialsDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `material_id` `structure` `deprecated` `deprecation_reasons` `initial_structures` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `task_types` `run_types` `entries`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a MaterialsDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MaterialsDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/absorption/{material_id}/": {
      "get": {
        "tags": ["Materials Absorption"],
        "summary": "Get a AbsorptionDoc document by by material_id",
        "operationId": "get_by_key_materials_absorption__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the AbsorptionDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from AbsorptionDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `task_id` `energies` `energy_max` `absorption_coefficient` `average_imaginary_dielectric` `average_real_dielectric` `bandgap` `nkpoints`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from AbsorptionDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `task_id` `energies` `energy_max` `absorption_coefficient` `average_imaginary_dielectric` `average_real_dielectric` `bandgap` `nkpoints`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a AbsorptionDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_AbsorptionDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/absorption/": {
      "get": {
        "tags": ["Materials Absorption"],
        "summary": "Get AbsorptionDoc documents",
        "operationId": "search_materials_absorption__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Max",
              "description": "Query for maximum value of nsites"
            },
            "name": "nsites_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Min",
              "description": "Query for minimum value of nsites"
            },
            "name": "nsites_min",
            "in": "query"
          },
          {
            "description": "Query for nsites being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites",
              "description": "Query for nsites being equal to an exact value"
            },
            "name": "nsites",
            "in": "query"
          },
          {
            "description": "Query for nsites being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Not Eq",
              "description": "Query for nsites being not equal to an exact value"
            },
            "name": "nsites_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nsites being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Eq Any",
              "description": "Query for nsites being any of these values. Provide a comma separated list."
            },
            "name": "nsites_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nsites being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Neq Any",
              "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
            },
            "name": "nsites_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Max",
              "description": "Query for maximum value of nelements"
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Min",
              "description": "Query for minimum value of nelements"
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Query for nelements being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements",
              "description": "Query for nelements being equal to an exact value"
            },
            "name": "nelements",
            "in": "query"
          },
          {
            "description": "Query for nelements being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Not Eq",
              "description": "Query for nelements being not equal to an exact value"
            },
            "name": "nelements_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nelements being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Eq Any",
              "description": "Query for nelements being any of these values. Provide a comma separated list."
            },
            "name": "nelements_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nelements being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Neq Any",
              "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelements_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Max",
              "description": "Query for maximum value of Volume"
            },
            "name": "volume_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Min",
              "description": "Query for minimum value of Volume"
            },
            "name": "volume_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Max",
              "description": "Query for maximum value of Density"
            },
            "name": "density_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Min",
              "description": "Query for minimum value of Density"
            },
            "name": "density_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Max",
              "description": "Query for maximum value of Packing Density"
            },
            "name": "density_atomic_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Min",
              "description": "Query for minimum value of Packing Density"
            },
            "name": "density_atomic_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of bandgap",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Bandgap Max",
              "description": "Query for maximum value of bandgap"
            },
            "name": "bandgap_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of bandgap",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Bandgap Min",
              "description": "Query for minimum value of bandgap"
            },
            "name": "bandgap_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from AbsorptionDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `task_id` `energies` `energy_max` `absorption_coefficient` `average_imaginary_dielectric` `average_real_dielectric` `bandgap` `nkpoints`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from AbsorptionDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `task_id` `energies` `energy_max` `absorption_coefficient` `average_imaginary_dielectric` `average_real_dielectric` `bandgap` `nkpoints`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a AbsorptionDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_AbsorptionDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/bonds/{material_id}/": {
      "get": {
        "tags": ["Materials Bonds"],
        "summary": "Get a BondingDoc document by by material_id",
        "operationId": "get_by_key_materials_bonds__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the BondingDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from BondingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure_graph` `method` `bond_types` `bond_length_stats` `coordination_envs` `coordination_envs_anonymous`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from BondingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure_graph` `method` `bond_types` `bond_length_stats` `coordination_envs` `coordination_envs_anonymous`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a BondingDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_BondingDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/bonds/": {
      "get": {
        "tags": ["Materials Bonds"],
        "summary": "Get BondingDoc documents",
        "operationId": "search_materials_bonds__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Maximum value for the maximum bond length in the structure.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Bond Length Max",
              "description": "Maximum value for the maximum bond length in the structure."
            },
            "name": "max_bond_length_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the maximum bond length in the structure.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Bond Length Min",
              "description": "Minimum value for the maximum bond length in the structure."
            },
            "name": "max_bond_length_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the minimum bond length in the structure.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Bond Length Max",
              "description": "Maximum value for the minimum bond length in the structure."
            },
            "name": "min_bond_length_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the minimum bond length in the structure.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Bond Length Min",
              "description": "Minimum value for the minimum bond length in the structure."
            },
            "name": "min_bond_length_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the mean bond length in the structure.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Mean Bond Length Max",
              "description": "Maximum value for the mean bond length in the structure."
            },
            "name": "mean_bond_length_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the mean bond length in the structure.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Mean Bond Length Min",
              "description": "Minimum value for the mean bond length in the structure."
            },
            "name": "mean_bond_length_min",
            "in": "query"
          },
          {
            "description": "Query by coordination environments in the material composition as a comma-separated list (e.g. 'Mo-S(6),S-Mo(3)')",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Coordination Envs",
              "description": "Query by coordination environments in the material composition as a comma-separated list (e.g. 'Mo-S(6),S-Mo(3)')"
            },
            "name": "coordination_envs",
            "in": "query"
          },
          {
            "description": "Query by anonymous coordination environments in the material composition as a comma-separated list (e.g. 'A-B(6),A-B(3)')",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Coordination Envs Anonymous",
              "description": "Query by anonymous coordination environments in the material composition as a comma-separated list (e.g. 'A-B(6),A-B(3)')"
            },
            "name": "coordination_envs_anonymous",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from BondingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure_graph` `method` `bond_types` `bond_length_stats` `coordination_envs` `coordination_envs_anonymous`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from BondingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure_graph` `method` `bond_types` `bond_length_stats` `coordination_envs` `coordination_envs_anonymous`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a BondingDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_BondingDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/chemenv/{material_id}/": {
      "get": {
        "tags": ["Materials Chemical Environment"],
        "summary": "Get a ChemEnvDoc document by by material_id",
        "operationId": "get_by_key_materials_chemenv__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the ChemEnvDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from ChemEnvDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `valences` `species` `chemenv_symbol` `chemenv_iupac` `chemenv_iucr` `chemenv_name` `chemenv_name_with_alternatives` `csm` `method` `mol_from_site_environments` `wyckoff_positions`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ChemEnvDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `valences` `species` `chemenv_symbol` `chemenv_iupac` `chemenv_iucr` `chemenv_name` `chemenv_name_with_alternatives` `csm` `method` `mol_from_site_environments` `wyckoff_positions`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a ChemEnvDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ChemEnvDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/chemenv/": {
      "get": {
        "tags": ["Materials Chemical Environment"],
        "summary": "Get ChemEnvDoc documents",
        "operationId": "search_materials_chemenv__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of unique (cationic) species in IUCR format.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemenv Iucr",
              "description": "A comma delimited string list of unique (cationic) species in IUCR format."
            },
            "name": "chemenv_iucr",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of unique (cationic) species in IUPAC format.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemenv Iupac",
              "description": "A comma delimited string list of unique (cationic) species in IUPAC format."
            },
            "name": "chemenv_iupac",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of coordination environment descriptions for unique (cationic) species.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemenv Name",
              "description": "A comma delimited string list of coordination environment descriptions for unique (cationic) species."
            },
            "name": "chemenv_name",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of ChemEnv symbols for unique (cationic) species in the structure.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemenv Symbol",
              "description": "A comma delimited string list of ChemEnv symbols for unique (cationic) species in the structure."
            },
            "name": "chemenv_symbol",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of unique (cationic) species in the structure.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Species",
              "description": "A comma delimited string list of unique (cationic) species in the structure."
            },
            "name": "species",
            "in": "query"
          },
          {
            "description": "Minimum value of the continous symmetry measure for any site.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Csm Min",
              "description": "Minimum value of the continous symmetry measure for any site."
            },
            "name": "csm_min",
            "in": "query"
          },
          {
            "description": "Maximum value of the continous symmetry measure for any site.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Csm Max",
              "description": "Maximum value of the continous symmetry measure for any site."
            },
            "name": "csm_max",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Max",
              "description": "Query for maximum value of nsites"
            },
            "name": "nsites_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Min",
              "description": "Query for minimum value of nsites"
            },
            "name": "nsites_min",
            "in": "query"
          },
          {
            "description": "Query for nsites being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites",
              "description": "Query for nsites being equal to an exact value"
            },
            "name": "nsites",
            "in": "query"
          },
          {
            "description": "Query for nsites being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Not Eq",
              "description": "Query for nsites being not equal to an exact value"
            },
            "name": "nsites_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nsites being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Eq Any",
              "description": "Query for nsites being any of these values. Provide a comma separated list."
            },
            "name": "nsites_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nsites being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Neq Any",
              "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
            },
            "name": "nsites_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Max",
              "description": "Query for maximum value of nelements"
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Min",
              "description": "Query for minimum value of nelements"
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Query for nelements being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements",
              "description": "Query for nelements being equal to an exact value"
            },
            "name": "nelements",
            "in": "query"
          },
          {
            "description": "Query for nelements being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Not Eq",
              "description": "Query for nelements being not equal to an exact value"
            },
            "name": "nelements_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nelements being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Eq Any",
              "description": "Query for nelements being any of these values. Provide a comma separated list."
            },
            "name": "nelements_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nelements being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Neq Any",
              "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelements_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Max",
              "description": "Query for maximum value of Volume"
            },
            "name": "volume_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Min",
              "description": "Query for minimum value of Volume"
            },
            "name": "volume_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Max",
              "description": "Query for maximum value of Density"
            },
            "name": "density_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Min",
              "description": "Query for minimum value of Density"
            },
            "name": "density_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Max",
              "description": "Query for maximum value of Packing Density"
            },
            "name": "density_atomic_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Min",
              "description": "Query for minimum value of Packing Density"
            },
            "name": "density_atomic_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from ChemEnvDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `valences` `species` `chemenv_symbol` `chemenv_iupac` `chemenv_iucr` `chemenv_name` `chemenv_name_with_alternatives` `csm` `method` `mol_from_site_environments` `wyckoff_positions`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ChemEnvDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `valences` `species` `chemenv_symbol` `chemenv_iupac` `chemenv_iucr` `chemenv_name` `chemenv_name_with_alternatives` `csm` `method` `mol_from_site_environments` `wyckoff_positions`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a ChemEnvDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ChemEnvDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/tasks/trajectory/{task_id}/": {
      "get": {
        "tags": ["Materials Tasks"],
        "summary": "Get a TrajectoryDoc document by by task_id",
        "operationId": "get_by_key_materials_tasks_trajectory__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the TrajectoryDoc to get"
            },
            "name": "task_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a TrajectoryDoc document by task_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_TrajectoryDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/tasks/trajectory/": {
      "get": {
        "tags": ["Materials Tasks"],
        "summary": "Get TrajectoryDoc documents",
        "operationId": "search_materials_tasks_trajectory__get",
        "parameters": [
          {
            "description": "Comma-separated list of task_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of task_ids to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a TrajectoryDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_TrajectoryDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/tasks/entries/{task_id}/": {
      "get": {
        "tags": ["Materials Tasks"],
        "summary": "Get a EntryDoc document by by task_id",
        "operationId": "get_by_key_materials_tasks_entries__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the EntryDoc to get"
            },
            "name": "task_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a EntryDoc document by task_id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_EntryDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/tasks/entries/": {
      "get": {
        "tags": ["Materials Tasks"],
        "summary": "Get EntryDoc documents",
        "operationId": "search_materials_tasks_entries__get",
        "parameters": [
          {
            "description": "Comma-separated list of task_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of task_ids to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a EntryDoc",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_EntryDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/tasks/{task_id}/": {
      "get": {
        "tags": ["Materials Tasks"],
        "summary": "Get a TaskDoc document by by task_id",
        "operationId": "get_by_key_materials_tasks__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the TaskDoc to get"
            },
            "name": "task_id",
            "in": "path"
          },
          {
            "description": "Fields to project from TaskDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `tags` `dir_name` `state` `calcs_reversed` `structure` `task_type` `task_id` `orig_inputs` `input` `output` `included_objects` `vasp_objects` `entry` `task_label` `author` `icsd_id` `transformations` `additional_json` `custodian` `analysis` `last_updated`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from TaskDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `tags` `dir_name` `state` `calcs_reversed` `structure` `task_type` `task_id` `orig_inputs` `input` `output` `included_objects` `vasp_objects` `entry` `task_label` `author` `icsd_id` `transformations` `additional_json` `custodian` `analysis` `last_updated`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a TaskDoc document by task_id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_TaskDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/tasks/": {
      "get": {
        "tags": ["Materials Tasks"],
        "summary": "Get TaskDoc documents",
        "operationId": "search_materials_tasks__get",
        "parameters": [
          {
            "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Comma-separated list of task_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of task_ids to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from TaskDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `tags` `dir_name` `state` `calcs_reversed` `structure` `task_type` `task_id` `orig_inputs` `input` `output` `included_objects` `vasp_objects` `entry` `task_label` `author` `icsd_id` `transformations` `additional_json` `custodian` `analysis` `last_updated`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from TaskDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `tags` `dir_name` `state` `calcs_reversed` `structure` `task_type` `task_id` `orig_inputs` `input` `output` `included_objects` `vasp_objects` `entry` `task_label` `author` `icsd_id` `transformations` `additional_json` `custodian` `analysis` `last_updated`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a TaskDoc",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_TaskDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/thermo/phase_diagram/{phase_diagram_id}/": {
      "get": {
        "tags": ["Materials Thermo"],
        "summary": "Get a PhaseDiagramDoc document by by phase_diagram_id",
        "operationId": "get_by_key_materials_thermo_phase_diagram__phase_diagram_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The phase_diagram_id of the PhaseDiagramDoc to get"
            },
            "name": "phase_diagram_id",
            "in": "path"
          },
          {
            "description": "Fields to project from PhaseDiagramDoc as a list of comma separated strings.                    Fields include: `phase_diagram_id` `chemsys` `thermo_type` `phase_diagram` `last_updated` `property_name`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from PhaseDiagramDoc as a list of comma separated strings.                    Fields include: `phase_diagram_id` `chemsys` `thermo_type` `phase_diagram` `last_updated` `property_name`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a PhaseDiagramDoc document by phase_diagram_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_PhaseDiagramDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/thermo/{thermo_id}/": {
      "get": {
        "tags": ["Materials Thermo"],
        "summary": "Get a ThermoDoc document by by thermo_id",
        "operationId": "get_by_key_materials_thermo__thermo_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The thermo_id of the ThermoDoc to get"
            },
            "name": "thermo_id",
            "in": "path"
          },
          {
            "description": "Fields to project from ThermoDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `thermo_type` `thermo_id` `uncorrected_energy_per_atom` `energy_per_atom` `energy_uncertainy_per_atom` `formation_energy_per_atom` `energy_above_hull` `is_stable` `equilibrium_reaction_energy_per_atom` `decomposes_to` `decomposition_enthalpy` `decomposition_enthalpy_decomposes_to` `energy_type` `entry_types` `entries`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ThermoDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `thermo_type` `thermo_id` `uncorrected_energy_per_atom` `energy_per_atom` `energy_uncertainy_per_atom` `formation_energy_per_atom` `energy_above_hull` `is_stable` `equilibrium_reaction_energy_per_atom` `decomposes_to` `decomposition_enthalpy` `decomposition_enthalpy_decomposes_to` `energy_type` `entry_types` `entries`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a ThermoDoc document by thermo_id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_ThermoDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/thermo/": {
      "get": {
        "tags": ["Materials Thermo"],
        "summary": "Get ThermoDoc documents",
        "operationId": "search_materials_thermo__get",
        "parameters": [
          {
            "description": "Comma-separated list of thermo_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Thermo Ids",
              "description": "Comma-separated list of thermo_id values to query on"
            },
            "name": "thermo_ids",
            "in": "query"
          },
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Comma-separated list of thermo_type values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Thermo Types",
              "description": "Comma-separated list of thermo_type values to query on"
            },
            "name": "thermo_types",
            "in": "query"
          },
          {
            "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Whether the material is stable.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Is Stable",
              "description": "Whether the material is stable."
            },
            "name": "is_stable",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Max",
              "description": "Query for maximum value of nsites"
            },
            "name": "nsites_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Min",
              "description": "Query for minimum value of nsites"
            },
            "name": "nsites_min",
            "in": "query"
          },
          {
            "description": "Query for nsites being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites",
              "description": "Query for nsites being equal to an exact value"
            },
            "name": "nsites",
            "in": "query"
          },
          {
            "description": "Query for nsites being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Not Eq",
              "description": "Query for nsites being not equal to an exact value"
            },
            "name": "nsites_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nsites being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Eq Any",
              "description": "Query for nsites being any of these values. Provide a comma separated list."
            },
            "name": "nsites_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nsites being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Neq Any",
              "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
            },
            "name": "nsites_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Max",
              "description": "Query for maximum value of nelements"
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Min",
              "description": "Query for minimum value of nelements"
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Query for nelements being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements",
              "description": "Query for nelements being equal to an exact value"
            },
            "name": "nelements",
            "in": "query"
          },
          {
            "description": "Query for nelements being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Not Eq",
              "description": "Query for nelements being not equal to an exact value"
            },
            "name": "nelements_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nelements being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Eq Any",
              "description": "Query for nelements being any of these values. Provide a comma separated list."
            },
            "name": "nelements_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nelements being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Neq Any",
              "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelements_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Max",
              "description": "Query for maximum value of Volume"
            },
            "name": "volume_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Min",
              "description": "Query for minimum value of Volume"
            },
            "name": "volume_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Max",
              "description": "Query for maximum value of Density"
            },
            "name": "density_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Min",
              "description": "Query for minimum value of Density"
            },
            "name": "density_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Max",
              "description": "Query for maximum value of Packing Density"
            },
            "name": "density_atomic_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Min",
              "description": "Query for minimum value of Packing Density"
            },
            "name": "density_atomic_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of uncorrected_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Uncorrected Energy Per Atom Max",
              "description": "Query for maximum value of uncorrected_energy_per_atom"
            },
            "name": "uncorrected_energy_per_atom_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of uncorrected_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Uncorrected Energy Per Atom Min",
              "description": "Query for minimum value of uncorrected_energy_per_atom"
            },
            "name": "uncorrected_energy_per_atom_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Per Atom Max",
              "description": "Query for maximum value of energy_per_atom"
            },
            "name": "energy_per_atom_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Per Atom Min",
              "description": "Query for minimum value of energy_per_atom"
            },
            "name": "energy_per_atom_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of energy_uncertainy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Uncertainy Per Atom Max",
              "description": "Query for maximum value of energy_uncertainy_per_atom"
            },
            "name": "energy_uncertainy_per_atom_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of energy_uncertainy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Uncertainy Per Atom Min",
              "description": "Query for minimum value of energy_uncertainy_per_atom"
            },
            "name": "energy_uncertainy_per_atom_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of formation_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Formation Energy Per Atom Max",
              "description": "Query for maximum value of formation_energy_per_atom"
            },
            "name": "formation_energy_per_atom_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of formation_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Formation Energy Per Atom Min",
              "description": "Query for minimum value of formation_energy_per_atom"
            },
            "name": "formation_energy_per_atom_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of energy_above_hull",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Above Hull Max",
              "description": "Query for maximum value of energy_above_hull"
            },
            "name": "energy_above_hull_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of energy_above_hull",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Above Hull Min",
              "description": "Query for minimum value of energy_above_hull"
            },
            "name": "energy_above_hull_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of equilibrium_reaction_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Equilibrium Reaction Energy Per Atom Max",
              "description": "Query for maximum value of equilibrium_reaction_energy_per_atom"
            },
            "name": "equilibrium_reaction_energy_per_atom_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of equilibrium_reaction_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Equilibrium Reaction Energy Per Atom Min",
              "description": "Query for minimum value of equilibrium_reaction_energy_per_atom"
            },
            "name": "equilibrium_reaction_energy_per_atom_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of decomposition_enthalpy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Decomposition Enthalpy Max",
              "description": "Query for maximum value of decomposition_enthalpy"
            },
            "name": "decomposition_enthalpy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of decomposition_enthalpy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Decomposition Enthalpy Min",
              "description": "Query for minimum value of decomposition_enthalpy"
            },
            "name": "decomposition_enthalpy_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from ThermoDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `thermo_type` `thermo_id` `uncorrected_energy_per_atom` `energy_per_atom` `energy_uncertainy_per_atom` `formation_energy_per_atom` `energy_above_hull` `is_stable` `equilibrium_reaction_energy_per_atom` `decomposes_to` `decomposition_enthalpy` `decomposition_enthalpy_decomposes_to` `energy_type` `entry_types` `entries`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ThermoDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `thermo_type` `thermo_id` `uncorrected_energy_per_atom` `energy_per_atom` `energy_uncertainy_per_atom` `formation_energy_per_atom` `energy_above_hull` `is_stable` `equilibrium_reaction_energy_per_atom` `decomposes_to` `decomposition_enthalpy` `decomposition_enthalpy_decomposes_to` `energy_type` `entry_types` `entries`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a ThermoDoc",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_ThermoDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/dielectric/{material_id}/": {
      "get": {
        "tags": ["Materials Dielectric"],
        "summary": "Get a DielectricDoc document by by material_id",
        "operationId": "get_by_key_materials_dielectric__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the DielectricDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from DielectricDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `total` `ionic` `electronic` `e_total` `e_ionic` `e_electronic` `n`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from DielectricDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `total` `ionic` `electronic` `e_total` `e_ionic` `e_electronic` `n`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a DielectricDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_DielectricDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/dielectric/": {
      "get": {
        "tags": ["Materials Dielectric"],
        "summary": "Get DielectricDoc documents",
        "operationId": "search_materials_dielectric__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Maximum value for the total dielectric constant.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Total Max",
              "description": "Maximum value for the total dielectric constant."
            },
            "name": "e_total_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the total dielectric constant.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Total Min",
              "description": "Minimum value for the total dielectric constant."
            },
            "name": "e_total_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the ionic dielectric constant.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Ionic Max",
              "description": "Maximum value for the ionic dielectric constant."
            },
            "name": "e_ionic_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the ionic dielectric constant.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Ionic Min",
              "description": "Minimum value for the ionic dielectric constant."
            },
            "name": "e_ionic_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the electronic dielectric constant.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Electronic Max",
              "description": "Maximum value for the electronic dielectric constant."
            },
            "name": "e_electronic_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the electronic dielectric constant.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Electronic Min",
              "description": "Minimum value for the electronic dielectric constant."
            },
            "name": "e_electronic_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the refractive index.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "N Max",
              "description": "Maximum value for the refractive index."
            },
            "name": "n_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the refractive index.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "N Min",
              "description": "Minimum value for the refractive index."
            },
            "name": "n_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from DielectricDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `total` `ionic` `electronic` `e_total` `e_ionic` `e_electronic` `n`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from DielectricDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `total` `ionic` `electronic` `e_total` `e_ionic` `e_electronic` `n`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a DielectricDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_DielectricDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/piezoelectric/{material_id}/": {
      "get": {
        "tags": ["Materials Piezoelectric"],
        "summary": "Get a PiezoelectricDoc document by by material_id",
        "operationId": "get_by_key_materials_piezoelectric__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the PiezoelectricDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from PiezoelectricDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `total` `ionic` `electronic` `e_ij_max` `max_direction` `strain_for_max`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from PiezoelectricDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `total` `ionic` `electronic` `e_ij_max` `max_direction` `strain_for_max`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a PiezoelectricDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_PiezoelectricDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/piezoelectric/": {
      "get": {
        "tags": ["Materials Piezoelectric"],
        "summary": "Get PiezoelectricDoc documents",
        "operationId": "search_materials_piezoelectric__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Maximum value for the piezoelectric modulus in C/m².",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Piezo Modulus Max",
              "description": "Maximum value for the piezoelectric modulus in C/m²."
            },
            "name": "piezo_modulus_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the piezoelectric modulus in C/m².",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Piezo Modulus Min",
              "description": "Minimum value for the piezoelectric modulus in C/m²."
            },
            "name": "piezo_modulus_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from PiezoelectricDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `total` `ionic` `electronic` `e_ij_max` `max_direction` `strain_for_max`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from PiezoelectricDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `total` `ionic` `electronic` `e_ij_max` `max_direction` `strain_for_max`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a PiezoelectricDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_PiezoelectricDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/magnetism/{material_id}/": {
      "get": {
        "tags": ["Materials Magnetism"],
        "summary": "Get a MagnetismDoc document by by material_id",
        "operationId": "get_by_key_materials_magnetism__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the MagnetismDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from MagnetismDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `ordering` `is_magnetic` `exchange_symmetry` `num_magnetic_sites` `num_unique_magnetic_sites` `types_of_magnetic_species` `magmoms` `total_magnetization` `total_magnetization_normalized_vol` `total_magnetization_normalized_formula_units`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MagnetismDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `ordering` `is_magnetic` `exchange_symmetry` `num_magnetic_sites` `num_unique_magnetic_sites` `types_of_magnetic_species` `magmoms` `total_magnetization` `total_magnetization_normalized_vol` `total_magnetization_normalized_formula_units`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a MagnetismDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MagnetismDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/magnetism/": {
      "get": {
        "tags": ["Materials Magnetism"],
        "summary": "Get MagnetismDoc documents",
        "operationId": "search_materials_magnetism__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Magnetic ordering of the material.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Ordering" }],
              "description": "Magnetic ordering of the material."
            },
            "name": "ordering",
            "in": "query"
          },
          {
            "description": "Maximum value for the total magnetization.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Max",
              "description": "Maximum value for the total magnetization."
            },
            "name": "total_magnetization_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the total magnetization.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Min",
              "description": "Minimum value for the total magnetization."
            },
            "name": "total_magnetization_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the total magnetization normalized with volume.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Normalized Vol Max",
              "description": "Maximum value for the total magnetization normalized with volume."
            },
            "name": "total_magnetization_normalized_vol_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the total magnetization normalized with volume.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Normalized Vol Min",
              "description": "Minimum value for the total magnetization normalized with volume."
            },
            "name": "total_magnetization_normalized_vol_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the total magnetization normalized with formula units.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Normalized Formula Units Max",
              "description": "Maximum value for the total magnetization normalized with formula units."
            },
            "name": "total_magnetization_normalized_formula_units_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the total magnetization normalized with formula units.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Normalized Formula Units Min",
              "description": "Minimum value for the total magnetization normalized with formula units."
            },
            "name": "total_magnetization_normalized_formula_units_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the total number of magnetic sites.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Magnetic Sites Max",
              "description": "Maximum value for the total number of magnetic sites."
            },
            "name": "num_magnetic_sites_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the total number of magnetic sites.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Magnetic Sites Min",
              "description": "Minimum value for the total number of magnetic sites."
            },
            "name": "num_magnetic_sites_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the total number of unique magnetic sites.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Unique Magnetic Sites Max",
              "description": "Maximum value for the total number of unique magnetic sites."
            },
            "name": "num_unique_magnetic_sites_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the total number of unique magnetic sites.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Unique Magnetic Sites Min",
              "description": "Minimum value for the total number of unique magnetic sites."
            },
            "name": "num_unique_magnetic_sites_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from MagnetismDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `ordering` `is_magnetic` `exchange_symmetry` `num_magnetic_sites` `num_unique_magnetic_sites` `types_of_magnetic_species` `magmoms` `total_magnetization` `total_magnetization_normalized_vol` `total_magnetization_normalized_formula_units`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MagnetismDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `ordering` `is_magnetic` `exchange_symmetry` `num_magnetic_sites` `num_unique_magnetic_sites` `types_of_magnetic_species` `magmoms` `total_magnetization` `total_magnetization_normalized_vol` `total_magnetization_normalized_formula_units`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a MagnetismDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MagnetismDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/phonon/{material_id}/": {
      "get": {
        "tags": ["Materials Phonon"],
        "summary": "Get a PhononBSDOSDoc document by by material_id",
        "operationId": "get_by_key_materials_phonon__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the PhononBSDOSDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from PhononBSDOSDoc as a list of comma separated strings.                    Fields include: `material_id` `ph_bs` `ph_dos` `last_updated`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from PhononBSDOSDoc as a list of comma separated strings.                    Fields include: `material_id` `ph_bs` `ph_dos` `last_updated`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a PhononBSDOSDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_PhononBSDOSDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/eos/{task_id}/": {
      "get": {
        "tags": ["Materials EOS"],
        "summary": "Get a EOSDoc document by by task_id",
        "operationId": "get_by_key_materials_eos__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the EOSDoc to get"
            },
            "name": "task_id",
            "in": "path"
          },
          {
            "description": "Fields to project from EOSDoc as a list of comma separated strings.                    Fields include: `energies` `volumes` `eos` `task_id`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from EOSDoc as a list of comma separated strings.                    Fields include: `energies` `volumes` `eos` `task_id`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a EOSDoc document by task_id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_EOSDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/eos/": {
      "get": {
        "tags": ["Materials EOS"],
        "summary": "Get EOSDoc documents",
        "operationId": "search_materials_eos__get",
        "parameters": [
          {
            "description": "Query for maximum value of energies",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energies Max",
              "description": "Query for maximum value of energies"
            },
            "name": "energies_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of energies",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energies Min",
              "description": "Query for minimum value of energies"
            },
            "name": "energies_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of volumes",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volumes Max",
              "description": "Query for maximum value of volumes"
            },
            "name": "volumes_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of volumes",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volumes Min",
              "description": "Query for minimum value of volumes"
            },
            "name": "volumes_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from EOSDoc as a list of comma separated strings.                    Fields include: `energies` `volumes` `eos` `task_id`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from EOSDoc as a list of comma separated strings.                    Fields include: `energies` `volumes` `eos` `task_id`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a EOSDoc",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_EOSDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/similarity/{material_id}/": {
      "get": {
        "tags": ["Materials Similarity"],
        "summary": "Get a SimilarityDoc document by by material_id",
        "operationId": "get_by_key_materials_similarity__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the SimilarityDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from SimilarityDoc as a list of comma separated strings.                    Fields include: `sim` `material_id`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from SimilarityDoc as a list of comma separated strings.                    Fields include: `sim` `material_id`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a SimilarityDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_SimilarityDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/xas/{spectrum_id}/": {
      "get": {
        "tags": ["Materials XAS"],
        "summary": "Get a XASDoc document by by spectrum_id",
        "operationId": "get_by_key_materials_xas__spectrum_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The spectrum_id of the XASDoc to get"
            },
            "name": "spectrum_id",
            "in": "path"
          },
          {
            "description": "Fields to project from XASDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `spectrum_name` `material_id` `spectrum_id` `last_updated` `warnings` `spectrum` `task_ids` `absorbing_element` `spectrum_type` `edge`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from XASDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `spectrum_name` `material_id` `spectrum_id` `last_updated` `warnings` `spectrum` `task_ids` `absorbing_element` `spectrum_type` `edge`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a XASDoc document by spectrum_id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_XASDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/xas/": {
      "get": {
        "tags": ["Materials XAS"],
        "summary": "Get XASDoc documents",
        "operationId": "search_materials_xas__get",
        "parameters": [
          {
            "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Edge" }],
              "title": "XAS Edge"
            },
            "name": "edge",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Type" }],
              "title": "Spectrum Type"
            },
            "name": "spectrum_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Element" }],
              "title": "Absorbing Element"
            },
            "name": "absorbing_element",
            "in": "query"
          },
          {
            "description": "Comma-separated list of material_id to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from XASDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `spectrum_name` `material_id` `spectrum_id` `last_updated` `warnings` `spectrum` `task_ids` `absorbing_element` `spectrum_type` `edge`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from XASDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `spectrum_name` `material_id` `spectrum_id` `last_updated` `warnings` `spectrum` `task_ids` `absorbing_element` `spectrum_type` `edge`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a XASDoc",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_XASDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/grain_boundary/": {
      "get": {
        "tags": ["Materials Grain Boundaries"],
        "summary": "Get GrainBoundaryDoc documents",
        "operationId": "search_materials_grain_boundary__get",
        "parameters": [
          {
            "description": "Comma-separated list of Materials Project IDs to query on.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of Materials Project IDs to query on."
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Query for maximum value of sigma",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Sigma Max",
              "description": "Query for maximum value of sigma"
            },
            "name": "sigma_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of sigma",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Sigma Min",
              "description": "Query for minimum value of sigma"
            },
            "name": "sigma_min",
            "in": "query"
          },
          {
            "description": "Value of sigma.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Sigma",
              "description": "Value of sigma."
            },
            "name": "sigma",
            "in": "query"
          },
          {
            "description": "Query for sigma being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Sigma Not Eq",
              "description": "Query for sigma being not equal to an exact value"
            },
            "name": "sigma_not_eq",
            "in": "query"
          },
          {
            "description": "Query for sigma being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sigma Eq Any",
              "description": "Query for sigma being any of these values. Provide a comma separated list."
            },
            "name": "sigma_eq_any",
            "in": "query"
          },
          {
            "description": "Query for sigma being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sigma Neq Any",
              "description": "Query for sigma being not any of these values.                             Provide a comma separated list."
            },
            "name": "sigma_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of rotation_angle",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Rotation Angle Max",
              "description": "Query for maximum value of rotation_angle"
            },
            "name": "rotation_angle_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of rotation_angle",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Rotation Angle Min",
              "description": "Query for minimum value of rotation_angle"
            },
            "name": "rotation_angle_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of gb_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Gb Energy Max",
              "description": "Query for maximum value of gb_energy"
            },
            "name": "gb_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of gb_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Gb Energy Min",
              "description": "Query for minimum value of gb_energy"
            },
            "name": "gb_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of w_sep",
            "required": false,
            "schema": {
              "type": "number",
              "title": "W Sep Max",
              "description": "Query for maximum value of w_sep"
            },
            "name": "w_sep_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of w_sep",
            "required": false,
            "schema": {
              "type": "number",
              "title": "W Sep Min",
              "description": "Query for minimum value of w_sep"
            },
            "name": "w_sep_min",
            "in": "query"
          },
          {
            "description": "Grain boundary type.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/GBTypeEnum" }],
              "description": "Grain boundary type."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Dash-delimited string of elements in the material.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "Dash-delimited string of elements in the material."
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Formula of the material.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Pretty Formula",
              "description": "Formula of the material."
            },
            "name": "pretty_formula",
            "in": "query"
          },
          {
            "description": "Miller index of the grain boundary plane as comma delimitd integers.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Gb Plane",
              "description": "Miller index of the grain boundary plane as comma delimitd integers."
            },
            "name": "gb_plane",
            "in": "query"
          },
          {
            "description": "Miller index of the rotation axis as comma delimitd integers.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rotation Axis",
              "description": "Miller index of the rotation axis as comma delimitd integers."
            },
            "name": "rotation_axis",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from GrainBoundaryDoc as a list of comma separated strings.                    Fields include: `task_id` `sigma` `type` `rotation_axis` `gb_plane` `rotation_angle` `gb_energy` `initial_structure` `final_structure` `pretty_formula` `w_sep` `cif` `chemsys` `last_updated`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from GrainBoundaryDoc as a list of comma separated strings.                    Fields include: `task_id` `sigma` `type` `rotation_axis` `gb_plane` `rotation_angle` `gb_energy` `initial_structure` `final_structure` `pretty_formula` `w_sep` `cif` `chemsys` `last_updated`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a GrainBoundaryDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_GrainBoundaryDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/fermi/{task_id}/": {
      "get": {
        "tags": ["Materials Electronic Structure"],
        "summary": "Get a FermiDoc document by by task_id",
        "operationId": "get_by_key_materials_fermi__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the FermiDoc to get"
            },
            "name": "task_id",
            "in": "path"
          },
          {
            "description": "Fields to project from FermiDoc as a list of comma separated strings.                    Fields include: `fermi_surfaces` `surface_types` `task_id` `last_updated`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from FermiDoc as a list of comma separated strings.                    Fields include: `fermi_surfaces` `surface_types` `task_id` `last_updated`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a FermiDoc document by task_id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_FermiDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/fermi/": {
      "get": {
        "tags": ["Materials Electronic Structure"],
        "summary": "Get FermiDoc documents",
        "operationId": "search_materials_fermi__get",
        "parameters": [
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from FermiDoc as a list of comma separated strings.                    Fields include: `fermi_surfaces` `surface_types` `task_id` `last_updated`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from FermiDoc as a list of comma separated strings.                    Fields include: `fermi_surfaces` `surface_types` `task_id` `last_updated`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a FermiDoc",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_FermiDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/elasticity/{task_id}/": {
      "get": {
        "tags": ["Materials Elasticity"],
        "summary": "Get a ElasticityDoc document by by task_id",
        "operationId": "get_by_key_materials_elasticity__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the ElasticityDoc to get"
            },
            "name": "task_id",
            "in": "path"
          },
          {
            "description": "Fields to project from ElasticityDoc as a list of comma separated strings.                    Fields include: `pretty_formula` `chemsys` `elasticity` `task_id`",
            "required": true,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ElasticityDoc as a list of comma separated strings.                    Fields include: `pretty_formula` `chemsys` `elasticity` `task_id`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a ElasticityDoc document by task_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ElasticityDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/elasticity/": {
      "get": {
        "tags": ["Materials Elasticity"],
        "summary": "Get ElasticityDoc documents",
        "operationId": "search_materials_elasticity__get",
        "parameters": [
          {
            "description": "A comma delimited string list of chemical systems.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems."
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Maximum value for the Voigt average of the bulk modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Voigt Max",
              "description": "Maximum value for the Voigt average of the bulk modulus in GPa."
            },
            "name": "k_voigt_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the Voigt average of the bulk modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Voigt Min",
              "description": "Minimum value for the Voigt average of the bulk modulus in GPa."
            },
            "name": "k_voigt_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the Reuss average of the bulk modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Reuss Max",
              "description": "Maximum value for the Reuss average of the bulk modulus in GPa."
            },
            "name": "k_reuss_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the Reuss average of the bulk modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Reuss Min",
              "description": "Minimum value for the Reuss average of the bulk modulus in GPa."
            },
            "name": "k_reuss_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the Voigt-Reuss-Hill average of the bulk modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Vrh Max",
              "description": "Maximum value for the Voigt-Reuss-Hill average of the bulk modulus in GPa."
            },
            "name": "k_vrh_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the Voigt-Reuss-Hill average of the bulk modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Vrh Min",
              "description": "Minimum value for the Voigt-Reuss-Hill average of the bulk modulus in GPa."
            },
            "name": "k_vrh_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the Voigt average of the shear modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Voigt Max",
              "description": "Maximum value for the Voigt average of the shear modulus in GPa."
            },
            "name": "g_voigt_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the Voigt average of the shear modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Voigt Min",
              "description": "Minimum value for the Voigt average of the shear modulus in GPa."
            },
            "name": "g_voigt_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the Reuss average of the shear modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Reuss Max",
              "description": "Maximum value for the Reuss average of the shear modulus in GPa."
            },
            "name": "g_reuss_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the Reuss average of the shear modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Reuss Min",
              "description": "Minimum value for the Reuss average of the shear modulus in GPa."
            },
            "name": "g_reuss_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the Voigt-Reuss-Hill average of the shear modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Vrh Max",
              "description": "Maximum value for the Voigt-Reuss-Hill average of the shear modulus in GPa."
            },
            "name": "g_vrh_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the Voigt-Reuss-Hill average of the shear modulus in GPa.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Vrh Min",
              "description": "Minimum value for the Voigt-Reuss-Hill average of the shear modulus in GPa."
            },
            "name": "g_vrh_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the elastic anisotropy.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Elastic Anisotropy Max",
              "description": "Maximum value for the elastic anisotropy."
            },
            "name": "elastic_anisotropy_max",
            "in": "query"
          },
          {
            "description": "Maximum value for the elastic anisotropy.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Elastic Anisotropy Min",
              "description": "Maximum value for the elastic anisotropy."
            },
            "name": "elastic_anisotropy_min",
            "in": "query"
          },
          {
            "description": "Maximum value for Poisson's ratio.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Poisson Max",
              "description": "Maximum value for Poisson's ratio."
            },
            "name": "poisson_max",
            "in": "query"
          },
          {
            "description": "Minimum value for Poisson's ratio.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Poisson Min",
              "description": "Minimum value for Poisson's ratio."
            },
            "name": "poisson_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from ElasticityDoc as a list of comma separated strings.                    Fields include: `pretty_formula` `chemsys` `elasticity` `task_id`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ElasticityDoc as a list of comma separated strings.                    Fields include: `pretty_formula` `chemsys` `elasticity` `task_id`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a ElasticityDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ElasticityDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/substrates/": {
      "get": {
        "tags": ["Materials Substrates"],
        "summary": "Get SubstratesDoc documents",
        "operationId": "search_materials_substrates__get",
        "parameters": [
          {
            "description": "Comma separated integers defining the film surface orientation.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Film Orientation",
              "description": "Comma separated integers defining the film surface orientation."
            },
            "name": "film_orientation",
            "in": "query"
          },
          {
            "description": "Comma separated integers defining the substrate surface orientation.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Substrate Orientation",
              "description": "Comma separated integers defining the substrate surface orientation."
            },
            "name": "substrate_orientation",
            "in": "query"
          },
          {
            "description": "Query for maximum value of area",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Area Max",
              "description": "Query for maximum value of area"
            },
            "name": "area_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of area",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Area Min",
              "description": "Query for minimum value of area"
            },
            "name": "area_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Max",
              "description": "Query for maximum value of energy"
            },
            "name": "energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Min",
              "description": "Query for minimum value of energy"
            },
            "name": "energy_min",
            "in": "query"
          },
          {
            "description": "Query for sub_form being equal to a value",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sub Form",
              "description": "Query for sub_form being equal to a value"
            },
            "name": "sub_form",
            "in": "query"
          },
          {
            "description": "Query for sub_form being not equal to a value",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sub Form Not Eq",
              "description": "Query for sub_form being not equal to a value"
            },
            "name": "sub_form_not_eq",
            "in": "query"
          },
          {
            "description": "Query for sub_form being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sub Form Eq Any",
              "description": "Query for sub_form being any of these values. Provide a comma separated list."
            },
            "name": "sub_form_eq_any",
            "in": "query"
          },
          {
            "description": "Query for sub_form being not any of these values. Provide a comma separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sub Form Neq Any",
              "description": "Query for sub_form being not any of these values. Provide a comma separated list"
            },
            "name": "sub_form_neq_any",
            "in": "query"
          },
          {
            "description": "Query for sub_id being equal to a value",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sub Id",
              "description": "Query for sub_id being equal to a value"
            },
            "name": "sub_id",
            "in": "query"
          },
          {
            "description": "Query for sub_id being not equal to a value",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sub Id Not Eq",
              "description": "Query for sub_id being not equal to a value"
            },
            "name": "sub_id_not_eq",
            "in": "query"
          },
          {
            "description": "Query for sub_id being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sub Id Eq Any",
              "description": "Query for sub_id being any of these values. Provide a comma separated list."
            },
            "name": "sub_id_eq_any",
            "in": "query"
          },
          {
            "description": "Query for sub_id being not any of these values. Provide a comma separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Sub Id Neq Any",
              "description": "Query for sub_id being not any of these values. Provide a comma separated list"
            },
            "name": "sub_id_neq_any",
            "in": "query"
          },
          {
            "description": "Query for film_id being equal to a value",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Film Id",
              "description": "Query for film_id being equal to a value"
            },
            "name": "film_id",
            "in": "query"
          },
          {
            "description": "Query for film_id being not equal to a value",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Film Id Not Eq",
              "description": "Query for film_id being not equal to a value"
            },
            "name": "film_id_not_eq",
            "in": "query"
          },
          {
            "description": "Query for film_id being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Film Id Eq Any",
              "description": "Query for film_id being any of these values. Provide a comma separated list."
            },
            "name": "film_id_eq_any",
            "in": "query"
          },
          {
            "description": "Query for film_id being not any of these values. Provide a comma separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Film Id Neq Any",
              "description": "Query for film_id being not any of these values. Provide a comma separated list"
            },
            "name": "film_id_neq_any",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from SubstratesDoc as a list of comma separated strings.                    Fields include: `sub_form` `sub_id` `film_orient` `area` `energy` `film_id` `orient`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from SubstratesDoc as a list of comma separated strings.                    Fields include: `sub_form` `sub_id` `film_orient` `area` `energy` `film_id` `orient`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a SubstratesDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_SubstratesDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/surface_properties/{task_id}/": {
      "get": {
        "tags": ["Materials Surface Properties"],
        "summary": "Get a SurfacePropDoc document by by task_id",
        "operationId": "get_by_key_materials_surface_properties__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the SurfacePropDoc to get"
            },
            "name": "task_id",
            "in": "path"
          },
          {
            "description": "Fields to project from SurfacePropDoc as a list of comma separated strings.                    Fields include: `surfaces` `weighted_surface_energy_EV_PER_ANG2` `weighted_surface_energy` `surface_anisotropy` `pretty_formula` `shape_factor` `weighted_work_function` `has_reconstructed` `task_id` `structure`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from SurfacePropDoc as a list of comma separated strings.                    Fields include: `surfaces` `weighted_surface_energy_EV_PER_ANG2` `weighted_surface_energy` `surface_anisotropy` `pretty_formula` `shape_factor` `weighted_work_function` `has_reconstructed` `task_id` `structure`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a SurfacePropDoc document by task_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_SurfacePropDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/surface_properties/": {
      "get": {
        "tags": ["Materials Surface Properties"],
        "summary": "Get SurfacePropDoc documents",
        "operationId": "search_materials_surface_properties__get",
        "parameters": [
          {
            "description": "Query for maximum value of weighted_surface_energy_EV_PER_ANG2",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Surface Energy Ev Per Ang2 Max",
              "description": "Query for maximum value of weighted_surface_energy_EV_PER_ANG2"
            },
            "name": "weighted_surface_energy_EV_PER_ANG2_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of weighted_surface_energy_EV_PER_ANG2",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Surface Energy Ev Per Ang2 Min",
              "description": "Query for minimum value of weighted_surface_energy_EV_PER_ANG2"
            },
            "name": "weighted_surface_energy_EV_PER_ANG2_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of weighted_surface_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Surface Energy Max",
              "description": "Query for maximum value of weighted_surface_energy"
            },
            "name": "weighted_surface_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of weighted_surface_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Surface Energy Min",
              "description": "Query for minimum value of weighted_surface_energy"
            },
            "name": "weighted_surface_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of surface_anisotropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Surface Anisotropy Max",
              "description": "Query for maximum value of surface_anisotropy"
            },
            "name": "surface_anisotropy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of surface_anisotropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Surface Anisotropy Min",
              "description": "Query for minimum value of surface_anisotropy"
            },
            "name": "surface_anisotropy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of shape_factor",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Shape Factor Max",
              "description": "Query for maximum value of shape_factor"
            },
            "name": "shape_factor_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of shape_factor",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Shape Factor Min",
              "description": "Query for minimum value of shape_factor"
            },
            "name": "shape_factor_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of weighted_work_function",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Work Function Max",
              "description": "Query for maximum value of weighted_work_function"
            },
            "name": "weighted_work_function_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of weighted_work_function",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Work Function Min",
              "description": "Query for minimum value of weighted_work_function"
            },
            "name": "weighted_work_function_min",
            "in": "query"
          },
          {
            "description": "Whether the entry has a reconstructed surface.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Has Reconstructed",
              "description": "Whether the entry has a reconstructed surface."
            },
            "name": "has_reconstructed",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from SurfacePropDoc as a list of comma separated strings.                    Fields include: `surfaces` `weighted_surface_energy_EV_PER_ANG2` `weighted_surface_energy` `surface_anisotropy` `pretty_formula` `shape_factor` `weighted_work_function` `has_reconstructed` `task_id` `structure`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from SurfacePropDoc as a list of comma separated strings.                    Fields include: `surfaces` `weighted_surface_energy_EV_PER_ANG2` `weighted_surface_energy` `surface_anisotropy` `pretty_formula` `shape_factor` `weighted_work_function` `has_reconstructed` `task_id` `structure`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a SurfacePropDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_SurfacePropDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/robocrys/text_search/": {
      "get": {
        "tags": ["Robocrystallographer"],
        "summary": "Get RobocrystallogapherDoc documents",
        "operationId": "search_materials_robocrys_text_search__get",
        "parameters": [
          {
            "description": "Comma delimited string keywords to search robocrystallographer description text with",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Keywords",
              "description": "Comma delimited string keywords to search robocrystallographer description text with"
            },
            "name": "keywords",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 100",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 100",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get RobocrystallogapherDoc data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_RobocrystallogapherDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/robocrys/{material_id}/": {
      "get": {
        "tags": ["Materials Robocrystallographer"],
        "summary": "Get a RobocrystallogapherDoc document by by material_id",
        "operationId": "get_by_key_materials_robocrys__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the RobocrystallogapherDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from RobocrystallogapherDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `description` `condensed_structure` `robocrys_version`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from RobocrystallogapherDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `description` `condensed_structure` `robocrys_version`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a RobocrystallogapherDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_RobocrystallogapherDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/robocrys/": {
      "get": {
        "tags": ["Materials Robocrystallographer"],
        "summary": "Get RobocrystallogapherDoc documents",
        "operationId": "search_materials_robocrys__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from RobocrystallogapherDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `description` `condensed_structure` `robocrys_version`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from RobocrystallogapherDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `description` `condensed_structure` `robocrys_version`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a RobocrystallogapherDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_RobocrystallogapherDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/synthesis/": {
      "get": {
        "tags": ["Materials Synthesis"],
        "summary": "Get SynthesisSearchResultModel documents",
        "operationId": "search_materials_synthesis__get",
        "parameters": [
          {
            "description": "Comma delimited string keywords to search synthesis paragraph text with.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Keywords",
              "description": "Comma delimited string keywords to search synthesis paragraph text with."
            },
            "name": "keywords",
            "in": "query"
          },
          {
            "description": "Type of synthesis to include.",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/SynthesisTypeEnum" },
              "type": "array",
              "description": "Type of synthesis to include."
            },
            "name": "synthesis_type",
            "in": "query"
          },
          {
            "description": "Chemical formula of the target material.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Target Formula",
              "description": "Chemical formula of the target material."
            },
            "name": "target_formula",
            "in": "query"
          },
          {
            "description": "Chemical formula of the precursor material.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Precursor Formula",
              "description": "Chemical formula of the precursor material."
            },
            "name": "precursor_formula",
            "in": "query"
          },
          {
            "description": "List of operations that syntheses must have.",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/OperationTypeEnum" },
              "type": "array",
              "description": "List of operations that syntheses must have."
            },
            "name": "operations",
            "in": "query"
          },
          {
            "description": "Minimal heating temperature.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Condition Heating Temperature Min",
              "description": "Minimal heating temperature."
            },
            "name": "condition_heating_temperature_min",
            "in": "query"
          },
          {
            "description": "Maximal heating temperature.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Condition Heating Temperature Max",
              "description": "Maximal heating temperature."
            },
            "name": "condition_heating_temperature_max",
            "in": "query"
          },
          {
            "description": "Minimal heating time.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Condition Heating Time Min",
              "description": "Minimal heating time."
            },
            "name": "condition_heating_time_min",
            "in": "query"
          },
          {
            "description": "Maximal heating time.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Condition Heating Time Max",
              "description": "Maximal heating time."
            },
            "name": "condition_heating_time_max",
            "in": "query"
          },
          {
            "description": "Required heating atmosphere, such as \"air\", \"argon\".",
            "required": false,
            "schema": {
              "items": { "type": "string" },
              "type": "array",
              "title": "Condition Heating Atmosphere",
              "description": "Required heating atmosphere, such as \"air\", \"argon\"."
            },
            "name": "condition_heating_atmosphere",
            "in": "query"
          },
          {
            "description": "Required mixing device, such as \"zirconia\", \"Al2O3\".",
            "required": false,
            "schema": {
              "items": { "type": "string" },
              "type": "array",
              "title": "Condition Mixing Device",
              "description": "Required mixing device, such as \"zirconia\", \"Al2O3\"."
            },
            "name": "condition_mixing_device",
            "in": "query"
          },
          {
            "description": "Required mixing media, such as \"alcohol\", \"water\".",
            "required": false,
            "schema": {
              "items": { "type": "string" },
              "type": "array",
              "title": "Condition Mixing Media",
              "description": "Required mixing media, such as \"alcohol\", \"water\"."
            },
            "name": "condition_mixing_media",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 10.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 10.",
              "default": 10
            },
            "name": "_limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get SynthesisSearchResultModel data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_SynthesisSearchResultModel_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/insertion_electrodes/{battery_id}/": {
      "get": {
        "tags": ["Materials Electrodes"],
        "summary": "Get a InsertionElectrodeDoc document by by battery_id",
        "operationId": "get_by_key_materials_insertion_electrodes__battery_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The battery_id of the InsertionElectrodeDoc to get"
            },
            "name": "battery_id",
            "in": "path"
          },
          {
            "description": "Fields to project from InsertionElectrodeDoc as a list of comma separated strings.                    Fields include: `battery_type` `battery_id` `thermo_type` `battery_formula` `working_ion` `num_steps` `max_voltage_step` `last_updated` `framework` `framework_formula` `elements` `nelements` `chemsys` `formula_anonymous` `warnings` `formula_charge` `formula_discharge` `max_delta_volume` `average_voltage` `capacity_grav` `capacity_vol` `energy_grav` `energy_vol` `fracA_charge` `fracA_discharge` `stability_charge` `stability_discharge` `id_charge` `id_discharge` `host_structure` `adj_pairs` `material_ids` `entries_composition_summary` `electrode_object`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from InsertionElectrodeDoc as a list of comma separated strings.                    Fields include: `battery_type` `battery_id` `thermo_type` `battery_formula` `working_ion` `num_steps` `max_voltage_step` `last_updated` `framework` `framework_formula` `elements` `nelements` `chemsys` `formula_anonymous` `warnings` `formula_charge` `formula_discharge` `max_delta_volume` `average_voltage` `capacity_grav` `capacity_vol` `energy_grav` `energy_vol` `fracA_charge` `fracA_discharge` `stability_charge` `stability_discharge` `id_charge` `id_discharge` `host_structure` `adj_pairs` `material_ids` `entries_composition_summary` `electrode_object`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a InsertionElectrodeDoc document by battery_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_InsertionElectrodeDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/insertion_electrodes/": {
      "get": {
        "tags": ["Materials Electrodes"],
        "summary": "Get InsertionElectrodeDoc documents",
        "operationId": "search_materials_insertion_electrodes__get",
        "parameters": [
          {
            "description": "Comma-separated list of battery_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Battery Ids",
              "description": "Comma-separated list of battery_id values to query on"
            },
            "name": "battery_ids",
            "in": "query"
          },
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Element of the working ion, or comma-delimited string list of working ion elements."
            },
            "name": "working_ion",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query for maximum value of num_steps",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Steps Max",
              "description": "Query for maximum value of num_steps"
            },
            "name": "num_steps_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of num_steps",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Steps Min",
              "description": "Query for minimum value of num_steps"
            },
            "name": "num_steps_min",
            "in": "query"
          },
          {
            "description": "Query for num_steps being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Steps",
              "description": "Query for num_steps being equal to an exact value"
            },
            "name": "num_steps",
            "in": "query"
          },
          {
            "description": "Query for num_steps being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Steps Not Eq",
              "description": "Query for num_steps being not equal to an exact value"
            },
            "name": "num_steps_not_eq",
            "in": "query"
          },
          {
            "description": "Query for num_steps being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Num Steps Eq Any",
              "description": "Query for num_steps being any of these values. Provide a comma separated list."
            },
            "name": "num_steps_eq_any",
            "in": "query"
          },
          {
            "description": "Query for num_steps being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Num Steps Neq Any",
              "description": "Query for num_steps being not any of these values.                             Provide a comma separated list."
            },
            "name": "num_steps_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of max_voltage_step",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Voltage Step Max",
              "description": "Query for maximum value of max_voltage_step"
            },
            "name": "max_voltage_step_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of max_voltage_step",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Voltage Step Min",
              "description": "Query for minimum value of max_voltage_step"
            },
            "name": "max_voltage_step_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Max",
              "description": "Query for maximum value of nelements"
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Min",
              "description": "Query for minimum value of nelements"
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Query for nelements being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements",
              "description": "Query for nelements being equal to an exact value"
            },
            "name": "nelements",
            "in": "query"
          },
          {
            "description": "Query for nelements being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Not Eq",
              "description": "Query for nelements being not equal to an exact value"
            },
            "name": "nelements_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nelements being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Eq Any",
              "description": "Query for nelements being any of these values. Provide a comma separated list."
            },
            "name": "nelements_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nelements being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Neq Any",
              "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelements_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of max_delta_volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Delta Volume Max",
              "description": "Query for maximum value of max_delta_volume"
            },
            "name": "max_delta_volume_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of max_delta_volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Delta Volume Min",
              "description": "Query for minimum value of max_delta_volume"
            },
            "name": "max_delta_volume_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of average_voltage",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Average Voltage Max",
              "description": "Query for maximum value of average_voltage"
            },
            "name": "average_voltage_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of average_voltage",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Average Voltage Min",
              "description": "Query for minimum value of average_voltage"
            },
            "name": "average_voltage_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of capacity_grav",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Capacity Grav Max",
              "description": "Query for maximum value of capacity_grav"
            },
            "name": "capacity_grav_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of capacity_grav",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Capacity Grav Min",
              "description": "Query for minimum value of capacity_grav"
            },
            "name": "capacity_grav_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of capacity_vol",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Capacity Vol Max",
              "description": "Query for maximum value of capacity_vol"
            },
            "name": "capacity_vol_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of capacity_vol",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Capacity Vol Min",
              "description": "Query for minimum value of capacity_vol"
            },
            "name": "capacity_vol_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of energy_grav",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Grav Max",
              "description": "Query for maximum value of energy_grav"
            },
            "name": "energy_grav_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of energy_grav",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Grav Min",
              "description": "Query for minimum value of energy_grav"
            },
            "name": "energy_grav_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of energy_vol",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Vol Max",
              "description": "Query for maximum value of energy_vol"
            },
            "name": "energy_vol_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of energy_vol",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Vol Min",
              "description": "Query for minimum value of energy_vol"
            },
            "name": "energy_vol_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of fracA_charge",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Fraca Charge Max",
              "description": "Query for maximum value of fracA_charge"
            },
            "name": "fracA_charge_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of fracA_charge",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Fraca Charge Min",
              "description": "Query for minimum value of fracA_charge"
            },
            "name": "fracA_charge_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of fracA_discharge",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Fraca Discharge Max",
              "description": "Query for maximum value of fracA_discharge"
            },
            "name": "fracA_discharge_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of fracA_discharge",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Fraca Discharge Min",
              "description": "Query for minimum value of fracA_discharge"
            },
            "name": "fracA_discharge_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of stability_charge",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Stability Charge Max",
              "description": "Query for maximum value of stability_charge"
            },
            "name": "stability_charge_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of stability_charge",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Stability Charge Min",
              "description": "Query for minimum value of stability_charge"
            },
            "name": "stability_charge_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of stability_discharge",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Stability Discharge Max",
              "description": "Query for maximum value of stability_discharge"
            },
            "name": "stability_discharge_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of stability_discharge",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Stability Discharge Min",
              "description": "Query for minimum value of stability_discharge"
            },
            "name": "stability_discharge_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from InsertionElectrodeDoc as a list of comma separated strings.                    Fields include: `battery_type` `battery_id` `thermo_type` `battery_formula` `working_ion` `num_steps` `max_voltage_step` `last_updated` `framework` `framework_formula` `elements` `nelements` `chemsys` `formula_anonymous` `warnings` `formula_charge` `formula_discharge` `max_delta_volume` `average_voltage` `capacity_grav` `capacity_vol` `energy_grav` `energy_vol` `fracA_charge` `fracA_discharge` `stability_charge` `stability_discharge` `id_charge` `id_discharge` `host_structure` `adj_pairs` `material_ids` `entries_composition_summary` `electrode_object`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from InsertionElectrodeDoc as a list of comma separated strings.                    Fields include: `battery_type` `battery_id` `thermo_type` `battery_formula` `working_ion` `num_steps` `max_voltage_step` `last_updated` `framework` `framework_formula` `elements` `nelements` `chemsys` `formula_anonymous` `warnings` `formula_charge` `formula_discharge` `max_delta_volume` `average_voltage` `capacity_grav` `capacity_vol` `energy_grav` `energy_vol` `fracA_charge` `fracA_discharge` `stability_charge` `stability_discharge` `id_charge` `id_discharge` `host_structure` `adj_pairs` `material_ids` `entries_composition_summary` `electrode_object`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a InsertionElectrodeDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_InsertionElectrodeDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/oxidation_states/{material_id}/": {
      "get": {
        "tags": ["Materials Oxidation States"],
        "summary": "Get a OxidationStateDoc document by by material_id",
        "operationId": "get_by_key_materials_oxidation_states__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the OxidationStateDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from OxidationStateDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `possible_species` `possible_valences` `average_oxidation_states` `method`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from OxidationStateDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `possible_species` `possible_valences` `average_oxidation_states` `method`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a OxidationStateDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_OxidationStateDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/oxidation_states/": {
      "get": {
        "tags": ["Materials Oxidation States"],
        "summary": "Get OxidationStateDoc documents",
        "operationId": "search_materials_oxidation_states__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Comma delimited list of element symbols appended with oxidation states.                 (e.g. Cr2+,O2-)",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Possible Species",
              "description": "Comma delimited list of element symbols appended with oxidation states.                 (e.g. Cr2+,O2-)"
            },
            "name": "possible_species",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from OxidationStateDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `possible_species` `possible_valences` `average_oxidation_states` `method`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from OxidationStateDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `possible_species` `possible_valences` `average_oxidation_states` `method`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a OxidationStateDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_OxidationStateDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/alloys/{pair_id}/": {
      "get": {
        "tags": ["Materials Alloys"],
        "summary": "Get a AlloyPairDoc document by by pair_id",
        "operationId": "get_by_key_materials_alloys__pair_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The pair_id of the AlloyPairDoc to get"
            },
            "name": "pair_id",
            "in": "path"
          },
          {
            "description": "Fields to project from AlloyPairDoc as a list of comma separated strings.                    Fields include: `builder_meta` `alloy_pair` `pair_id`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from AlloyPairDoc as a list of comma separated strings.                    Fields include: `builder_meta` `alloy_pair` `pair_id`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a AlloyPairDoc document by pair_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_AlloyPairDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/alloys/": {
      "get": {
        "tags": ["Materials Alloys"],
        "summary": "Get AlloyPairDoc documents",
        "operationId": "search_materials_alloys__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_ids to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Comma-separated list of end-point formulas to query.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formulae",
              "description": "Comma-separated list of end-point formulas to query."
            },
            "name": "formulae",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from AlloyPairDoc as a list of comma separated strings.                    Fields include: `builder_meta` `alloy_pair` `pair_id`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from AlloyPairDoc as a list of comma separated strings.                    Fields include: `builder_meta` `alloy_pair` `pair_id`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a AlloyPairDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_AlloyPairDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/provenance/{material_id}/": {
      "get": {
        "tags": ["Materials Provenance"],
        "summary": "Get a ProvenanceDoc document by by material_id",
        "operationId": "get_by_key_materials_provenance__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the ProvenanceDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from ProvenanceDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `created_at` `references` `authors` `remarks` `tags` `theoretical` `database_IDs` `history`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ProvenanceDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `created_at` `references` `authors` `remarks` `tags` `theoretical` `database_IDs` `history`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a ProvenanceDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ProvenanceDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/provenance/": {
      "get": {
        "tags": ["Materials Provenance"],
        "summary": "Get ProvenanceDoc documents",
        "operationId": "search_materials_provenance__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Whether the material is marked as deprecated",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Deprecated",
              "description": "Whether the material is marked as deprecated",
              "default": false
            },
            "name": "deprecated",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from ProvenanceDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `created_at` `references` `authors` `remarks` `tags` `theoretical` `database_IDs` `history`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ProvenanceDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `created_at` `references` `authors` `remarks` `tags` `theoretical` `database_IDs` `history`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a ProvenanceDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ProvenanceDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/charge_density/": {
      "get": {
        "tags": ["Materials Charge Density"],
        "summary": "Get ChgcarDataDoc documents",
        "operationId": "search_materials_charge_density__get",
        "parameters": [
          {
            "description": "Comma-separated list of calculation (task) IDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of calculation (task) IDs to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from ChgcarDataDoc as a list of comma separated strings.                    Fields include: `fs_id` `last_updated` `task_id`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ChgcarDataDoc as a list of comma separated strings.                    Fields include: `fs_id` `last_updated` `task_id`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a ChgcarDataDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ChgcarDataDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/charge_density/{fs_id}/": {
      "get": {
        "tags": ["Materials Charge Density"],
        "summary": "Get a ChgcarDataDoc document by by fs_id",
        "operationId": "get_by_key_materials_charge_density__fs_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The fs_id of the ChgcarDataDoc to get"
            },
            "name": "fs_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a ChgcarDataDoc document by fs_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ChgcarDataDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/summary/stats/": {
      "get": {
        "tags": ["Materials Summary"],
        "summary": "Get SummaryStats documents",
        "operationId": "search_materials_summary_stats__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "band_gap",
                "density",
                "density_atomic",
                "dos_energy_down",
                "dos_energy_up",
                "e_electronic",
                "e_ij_max",
                "e_ionic",
                "e_total",
                "efermi",
                "energy_above_hull",
                "energy_per_atom",
                "equilibrium_reaction_energy_per_atom",
                "formation_energy_per_atom",
                "g_reuss",
                "g_voigt",
                "g_vrh",
                "homogeneous_poisson",
                "k_reuss",
                "k_voigt",
                "k_vrh",
                "n",
                "shape_factor",
                "surface_anisotropy",
                "total_magnetization",
                "total_magnetization_normalized_formula_units",
                "total_magnetization_normalized_vol",
                "uncorrected_energy_per_atom",
                "universal_anisotropy",
                "volume",
                "weighted_surface_energy",
                "weighted_surface_energy_EV_PER_ANG2",
                "weighted_work_function"
              ],
              "title": "SearchDoc field to query on, must be a numerical field, choose from: band_gap, density, density_atomic, dos_energy_down, dos_energy_up, e_electronic, e_ij_max, e_ionic, e_total, efermi, energy_above_hull, energy_per_atom, equilibrium_reaction_energy_per_atom, formation_energy_per_atom, g_reuss, g_voigt, g_vrh, homogeneous_poisson, k_reuss, k_voigt, k_vrh, n, shape_factor, surface_anisotropy, total_magnetization, total_magnetization_normalized_formula_units, total_magnetization_normalized_vol, uncorrected_energy_per_atom, universal_anisotropy, volume, weighted_surface_energy, weighted_surface_energy_EV_PER_ANG2, weighted_work_function",
              "default": "band_gap"
            },
            "name": "field",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "If specified, will only sample this number of documents."
            },
            "name": "num_samples",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "number",
              "title": "If specified, will only consider documents with field values greater than or equal to this minimum value."
            },
            "name": "min_val",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "number",
              "title": "If specified, will only consider documents with field values less than or equal to this minimum value."
            },
            "name": "max_val",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "The number of values in the returned distribution.",
              "default": 100
            },
            "name": "num_points",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get SummaryStats data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_SummaryStats_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/summary/{material_id}/": {
      "get": {
        "tags": ["Materials Summary"],
        "summary": "Get a SummaryDoc document by by material_id",
        "operationId": "get_by_key_materials_summary__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the SummaryDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from SummaryDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `task_ids` `uncorrected_energy_per_atom` `energy_per_atom` `formation_energy_per_atom` `energy_above_hull` `is_stable` `equilibrium_reaction_energy_per_atom` `decomposes_to` `xas` `grain_boundaries` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `es_source_calc_id` `bandstructure` `dos` `dos_energy_up` `dos_energy_down` `is_magnetic` `ordering` `total_magnetization` `total_magnetization_normalized_vol` `total_magnetization_normalized_formula_units` `num_magnetic_sites` `num_unique_magnetic_sites` `types_of_magnetic_species` `k_voigt` `k_reuss` `k_vrh` `g_voigt` `g_reuss` `g_vrh` `universal_anisotropy` `homogeneous_poisson` `e_total` `e_ionic` `e_electronic` `n` `e_ij_max` `weighted_surface_energy_EV_PER_ANG2` `weighted_surface_energy` `weighted_work_function` `surface_anisotropy` `shape_factor` `has_reconstructed` `possible_species` `has_props` `theoretical` `database_IDs`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from SummaryDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `task_ids` `uncorrected_energy_per_atom` `energy_per_atom` `formation_energy_per_atom` `energy_above_hull` `is_stable` `equilibrium_reaction_energy_per_atom` `decomposes_to` `xas` `grain_boundaries` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `es_source_calc_id` `bandstructure` `dos` `dos_energy_up` `dos_energy_down` `is_magnetic` `ordering` `total_magnetization` `total_magnetization_normalized_vol` `total_magnetization_normalized_formula_units` `num_magnetic_sites` `num_unique_magnetic_sites` `types_of_magnetic_species` `k_voigt` `k_reuss` `k_vrh` `g_voigt` `g_reuss` `g_vrh` `universal_anisotropy` `homogeneous_poisson` `e_total` `e_ionic` `e_electronic` `n` `e_ij_max` `weighted_surface_energy_EV_PER_ANG2` `weighted_surface_energy` `weighted_work_function` `surface_anisotropy` `shape_factor` `has_reconstructed` `possible_species` `has_props` `theoretical` `database_IDs`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a SummaryDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_SummaryDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/summary/": {
      "get": {
        "tags": ["Materials Summary"],
        "summary": "Get SummaryDoc documents",
        "operationId": "search_materials_summary__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_ids to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Comma delimited list of element symbols appended with oxidation states.                 (e.g. Cr2+,O2-)",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Possible Species",
              "description": "Comma delimited list of element symbols appended with oxidation states.                 (e.g. Cr2+,O2-)"
            },
            "name": "possible_species",
            "in": "query"
          },
          {
            "description": "Crystal system of the material",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/CrystalSystem" }],
              "description": "Crystal system of the material"
            },
            "name": "crystal_system",
            "in": "query"
          },
          {
            "description": "Space group number of the material",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spacegroup Number",
              "description": "Space group number of the material"
            },
            "name": "spacegroup_number",
            "in": "query"
          },
          {
            "description": "Space group symbol of the material",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Spacegroup Symbol",
              "description": "Space group symbol of the material"
            },
            "name": "spacegroup_symbol",
            "in": "query"
          },
          {
            "description": "Whether the material is stable.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Is Stable",
              "description": "Whether the material is stable."
            },
            "name": "is_stable",
            "in": "query"
          },
          {
            "description": "Whether the material is theoretical.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Theoretical",
              "description": "Whether the material is theoretical."
            },
            "name": "theoretical",
            "in": "query"
          },
          {
            "description": "Magnetic ordering of the material.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Ordering" }],
              "description": "Magnetic ordering of the material."
            },
            "name": "ordering",
            "in": "query"
          },
          {
            "description": "Whether a band gap is direct or not.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Is Gap Direct",
              "description": "Whether a band gap is direct or not."
            },
            "name": "is_gap_direct",
            "in": "query"
          },
          {
            "description": "Whether the material is considered a metal.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Is Metal",
              "description": "Whether the material is considered a metal."
            },
            "name": "is_metal",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Max",
              "description": "Query for maximum value of nsites"
            },
            "name": "nsites_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Min",
              "description": "Query for minimum value of nsites"
            },
            "name": "nsites_min",
            "in": "query"
          },
          {
            "description": "Query for nsites being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites",
              "description": "Query for nsites being equal to an exact value"
            },
            "name": "nsites",
            "in": "query"
          },
          {
            "description": "Query for nsites being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Not Eq",
              "description": "Query for nsites being not equal to an exact value"
            },
            "name": "nsites_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nsites being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Eq Any",
              "description": "Query for nsites being any of these values. Provide a comma separated list."
            },
            "name": "nsites_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nsites being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Neq Any",
              "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
            },
            "name": "nsites_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Max",
              "description": "Query for maximum value of nelements"
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Min",
              "description": "Query for minimum value of nelements"
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Query for nelements being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements",
              "description": "Query for nelements being equal to an exact value"
            },
            "name": "nelements",
            "in": "query"
          },
          {
            "description": "Query for nelements being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Not Eq",
              "description": "Query for nelements being not equal to an exact value"
            },
            "name": "nelements_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nelements being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Eq Any",
              "description": "Query for nelements being any of these values. Provide a comma separated list."
            },
            "name": "nelements_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nelements being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Neq Any",
              "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelements_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Max",
              "description": "Query for maximum value of Volume"
            },
            "name": "volume_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Min",
              "description": "Query for minimum value of Volume"
            },
            "name": "volume_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Max",
              "description": "Query for maximum value of Density"
            },
            "name": "density_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Min",
              "description": "Query for minimum value of Density"
            },
            "name": "density_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Max",
              "description": "Query for maximum value of Packing Density"
            },
            "name": "density_atomic_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Min",
              "description": "Query for minimum value of Packing Density"
            },
            "name": "density_atomic_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of uncorrected_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Uncorrected Energy Per Atom Max",
              "description": "Query for maximum value of uncorrected_energy_per_atom"
            },
            "name": "uncorrected_energy_per_atom_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of uncorrected_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Uncorrected Energy Per Atom Min",
              "description": "Query for minimum value of uncorrected_energy_per_atom"
            },
            "name": "uncorrected_energy_per_atom_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Per Atom Max",
              "description": "Query for maximum value of energy_per_atom"
            },
            "name": "energy_per_atom_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Per Atom Min",
              "description": "Query for minimum value of energy_per_atom"
            },
            "name": "energy_per_atom_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of formation_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Formation Energy Per Atom Max",
              "description": "Query for maximum value of formation_energy_per_atom"
            },
            "name": "formation_energy_per_atom_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of formation_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Formation Energy Per Atom Min",
              "description": "Query for minimum value of formation_energy_per_atom"
            },
            "name": "formation_energy_per_atom_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of energy_above_hull",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Above Hull Max",
              "description": "Query for maximum value of energy_above_hull"
            },
            "name": "energy_above_hull_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of energy_above_hull",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Energy Above Hull Min",
              "description": "Query for minimum value of energy_above_hull"
            },
            "name": "energy_above_hull_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of equilibrium_reaction_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Equilibrium Reaction Energy Per Atom Max",
              "description": "Query for maximum value of equilibrium_reaction_energy_per_atom"
            },
            "name": "equilibrium_reaction_energy_per_atom_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of equilibrium_reaction_energy_per_atom",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Equilibrium Reaction Energy Per Atom Min",
              "description": "Query for minimum value of equilibrium_reaction_energy_per_atom"
            },
            "name": "equilibrium_reaction_energy_per_atom_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of band_gap",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Band Gap Max",
              "description": "Query for maximum value of band_gap"
            },
            "name": "band_gap_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of band_gap",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Band Gap Min",
              "description": "Query for minimum value of band_gap"
            },
            "name": "band_gap_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of efermi",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Efermi Max",
              "description": "Query for maximum value of efermi"
            },
            "name": "efermi_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of efermi",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Efermi Min",
              "description": "Query for minimum value of efermi"
            },
            "name": "efermi_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of dos_energy_up",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Dos Energy Up Max",
              "description": "Query for maximum value of dos_energy_up"
            },
            "name": "dos_energy_up_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of dos_energy_up",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Dos Energy Up Min",
              "description": "Query for minimum value of dos_energy_up"
            },
            "name": "dos_energy_up_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of dos_energy_down",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Dos Energy Down Max",
              "description": "Query for maximum value of dos_energy_down"
            },
            "name": "dos_energy_down_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of dos_energy_down",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Dos Energy Down Min",
              "description": "Query for minimum value of dos_energy_down"
            },
            "name": "dos_energy_down_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of total_magnetization",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Max",
              "description": "Query for maximum value of total_magnetization"
            },
            "name": "total_magnetization_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of total_magnetization",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Min",
              "description": "Query for minimum value of total_magnetization"
            },
            "name": "total_magnetization_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of total_magnetization_normalized_vol",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Normalized Vol Max",
              "description": "Query for maximum value of total_magnetization_normalized_vol"
            },
            "name": "total_magnetization_normalized_vol_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of total_magnetization_normalized_vol",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Normalized Vol Min",
              "description": "Query for minimum value of total_magnetization_normalized_vol"
            },
            "name": "total_magnetization_normalized_vol_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of total_magnetization_normalized_formula_units",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Normalized Formula Units Max",
              "description": "Query for maximum value of total_magnetization_normalized_formula_units"
            },
            "name": "total_magnetization_normalized_formula_units_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of total_magnetization_normalized_formula_units",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Magnetization Normalized Formula Units Min",
              "description": "Query for minimum value of total_magnetization_normalized_formula_units"
            },
            "name": "total_magnetization_normalized_formula_units_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of num_magnetic_sites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Magnetic Sites Max",
              "description": "Query for maximum value of num_magnetic_sites"
            },
            "name": "num_magnetic_sites_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of num_magnetic_sites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Magnetic Sites Min",
              "description": "Query for minimum value of num_magnetic_sites"
            },
            "name": "num_magnetic_sites_min",
            "in": "query"
          },
          {
            "description": "Query for num_magnetic_sites being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Magnetic Sites",
              "description": "Query for num_magnetic_sites being equal to an exact value"
            },
            "name": "num_magnetic_sites",
            "in": "query"
          },
          {
            "description": "Query for num_magnetic_sites being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Magnetic Sites Not Eq",
              "description": "Query for num_magnetic_sites being not equal to an exact value"
            },
            "name": "num_magnetic_sites_not_eq",
            "in": "query"
          },
          {
            "description": "Query for num_magnetic_sites being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Num Magnetic Sites Eq Any",
              "description": "Query for num_magnetic_sites being any of these values. Provide a comma separated list."
            },
            "name": "num_magnetic_sites_eq_any",
            "in": "query"
          },
          {
            "description": "Query for num_magnetic_sites being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Num Magnetic Sites Neq Any",
              "description": "Query for num_magnetic_sites being not any of these values.                             Provide a comma separated list."
            },
            "name": "num_magnetic_sites_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of num_unique_magnetic_sites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Unique Magnetic Sites Max",
              "description": "Query for maximum value of num_unique_magnetic_sites"
            },
            "name": "num_unique_magnetic_sites_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of num_unique_magnetic_sites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Unique Magnetic Sites Min",
              "description": "Query for minimum value of num_unique_magnetic_sites"
            },
            "name": "num_unique_magnetic_sites_min",
            "in": "query"
          },
          {
            "description": "Query for num_unique_magnetic_sites being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Unique Magnetic Sites",
              "description": "Query for num_unique_magnetic_sites being equal to an exact value"
            },
            "name": "num_unique_magnetic_sites",
            "in": "query"
          },
          {
            "description": "Query for num_unique_magnetic_sites being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Num Unique Magnetic Sites Not Eq",
              "description": "Query for num_unique_magnetic_sites being not equal to an exact value"
            },
            "name": "num_unique_magnetic_sites_not_eq",
            "in": "query"
          },
          {
            "description": "Query for num_unique_magnetic_sites being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Num Unique Magnetic Sites Eq Any",
              "description": "Query for num_unique_magnetic_sites being any of these values. Provide a comma separated list."
            },
            "name": "num_unique_magnetic_sites_eq_any",
            "in": "query"
          },
          {
            "description": "Query for num_unique_magnetic_sites being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Num Unique Magnetic Sites Neq Any",
              "description": "Query for num_unique_magnetic_sites being not any of these values.                             Provide a comma separated list."
            },
            "name": "num_unique_magnetic_sites_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of k_voigt",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Voigt Max",
              "description": "Query for maximum value of k_voigt"
            },
            "name": "k_voigt_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of k_voigt",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Voigt Min",
              "description": "Query for minimum value of k_voigt"
            },
            "name": "k_voigt_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of k_reuss",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Reuss Max",
              "description": "Query for maximum value of k_reuss"
            },
            "name": "k_reuss_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of k_reuss",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Reuss Min",
              "description": "Query for minimum value of k_reuss"
            },
            "name": "k_reuss_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of k_vrh",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Vrh Max",
              "description": "Query for maximum value of k_vrh"
            },
            "name": "k_vrh_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of k_vrh",
            "required": false,
            "schema": {
              "type": "number",
              "title": "K Vrh Min",
              "description": "Query for minimum value of k_vrh"
            },
            "name": "k_vrh_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of g_voigt",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Voigt Max",
              "description": "Query for maximum value of g_voigt"
            },
            "name": "g_voigt_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of g_voigt",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Voigt Min",
              "description": "Query for minimum value of g_voigt"
            },
            "name": "g_voigt_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of g_reuss",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Reuss Max",
              "description": "Query for maximum value of g_reuss"
            },
            "name": "g_reuss_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of g_reuss",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Reuss Min",
              "description": "Query for minimum value of g_reuss"
            },
            "name": "g_reuss_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of g_vrh",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Vrh Max",
              "description": "Query for maximum value of g_vrh"
            },
            "name": "g_vrh_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of g_vrh",
            "required": false,
            "schema": {
              "type": "number",
              "title": "G Vrh Min",
              "description": "Query for minimum value of g_vrh"
            },
            "name": "g_vrh_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of universal_anisotropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Universal Anisotropy Max",
              "description": "Query for maximum value of universal_anisotropy"
            },
            "name": "universal_anisotropy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of universal_anisotropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Universal Anisotropy Min",
              "description": "Query for minimum value of universal_anisotropy"
            },
            "name": "universal_anisotropy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of homogeneous_poisson",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Homogeneous Poisson Max",
              "description": "Query for maximum value of homogeneous_poisson"
            },
            "name": "homogeneous_poisson_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of homogeneous_poisson",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Homogeneous Poisson Min",
              "description": "Query for minimum value of homogeneous_poisson"
            },
            "name": "homogeneous_poisson_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of e_total",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Total Max",
              "description": "Query for maximum value of e_total"
            },
            "name": "e_total_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of e_total",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Total Min",
              "description": "Query for minimum value of e_total"
            },
            "name": "e_total_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of e_ionic",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Ionic Max",
              "description": "Query for maximum value of e_ionic"
            },
            "name": "e_ionic_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of e_ionic",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Ionic Min",
              "description": "Query for minimum value of e_ionic"
            },
            "name": "e_ionic_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of e_electronic",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Electronic Max",
              "description": "Query for maximum value of e_electronic"
            },
            "name": "e_electronic_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of e_electronic",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Electronic Min",
              "description": "Query for minimum value of e_electronic"
            },
            "name": "e_electronic_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of n",
            "required": false,
            "schema": {
              "type": "number",
              "title": "N Max",
              "description": "Query for maximum value of n"
            },
            "name": "n_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of n",
            "required": false,
            "schema": {
              "type": "number",
              "title": "N Min",
              "description": "Query for minimum value of n"
            },
            "name": "n_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of e_ij_max",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Ij Max Max",
              "description": "Query for maximum value of e_ij_max"
            },
            "name": "e_ij_max_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of e_ij_max",
            "required": false,
            "schema": {
              "type": "number",
              "title": "E Ij Max Min",
              "description": "Query for minimum value of e_ij_max"
            },
            "name": "e_ij_max_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of weighted_surface_energy_EV_PER_ANG2",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Surface Energy Ev Per Ang2 Max",
              "description": "Query for maximum value of weighted_surface_energy_EV_PER_ANG2"
            },
            "name": "weighted_surface_energy_EV_PER_ANG2_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of weighted_surface_energy_EV_PER_ANG2",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Surface Energy Ev Per Ang2 Min",
              "description": "Query for minimum value of weighted_surface_energy_EV_PER_ANG2"
            },
            "name": "weighted_surface_energy_EV_PER_ANG2_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of weighted_surface_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Surface Energy Max",
              "description": "Query for maximum value of weighted_surface_energy"
            },
            "name": "weighted_surface_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of weighted_surface_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Surface Energy Min",
              "description": "Query for minimum value of weighted_surface_energy"
            },
            "name": "weighted_surface_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of weighted_work_function",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Work Function Max",
              "description": "Query for maximum value of weighted_work_function"
            },
            "name": "weighted_work_function_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of weighted_work_function",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Weighted Work Function Min",
              "description": "Query for minimum value of weighted_work_function"
            },
            "name": "weighted_work_function_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of surface_anisotropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Surface Anisotropy Max",
              "description": "Query for maximum value of surface_anisotropy"
            },
            "name": "surface_anisotropy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of surface_anisotropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Surface Anisotropy Min",
              "description": "Query for minimum value of surface_anisotropy"
            },
            "name": "surface_anisotropy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of shape_factor",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Shape Factor Max",
              "description": "Query for maximum value of shape_factor"
            },
            "name": "shape_factor_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of shape_factor",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Shape Factor Min",
              "description": "Query for minimum value of shape_factor"
            },
            "name": "shape_factor_min",
            "in": "query"
          },
          {
            "description": "Whether the material has reconstructed surfaces.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Has Reconstructed",
              "description": "Whether the material has reconstructed surfaces."
            },
            "name": "has_reconstructed",
            "in": "query"
          },
          {
            "description": "Comma-delimited list of possible properties given by HasPropsEnum to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Has Props",
              "description": "Comma-delimited list of possible properties given by HasPropsEnum to search for."
            },
            "name": "has_props",
            "in": "query"
          },
          {
            "description": "Whether the material is marked as deprecated",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Deprecated",
              "description": "Whether the material is marked as deprecated",
              "default": false
            },
            "name": "deprecated",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from SummaryDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `task_ids` `uncorrected_energy_per_atom` `energy_per_atom` `formation_energy_per_atom` `energy_above_hull` `is_stable` `equilibrium_reaction_energy_per_atom` `decomposes_to` `xas` `grain_boundaries` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `es_source_calc_id` `bandstructure` `dos` `dos_energy_up` `dos_energy_down` `is_magnetic` `ordering` `total_magnetization` `total_magnetization_normalized_vol` `total_magnetization_normalized_formula_units` `num_magnetic_sites` `num_unique_magnetic_sites` `types_of_magnetic_species` `k_voigt` `k_reuss` `k_vrh` `g_voigt` `g_reuss` `g_vrh` `universal_anisotropy` `homogeneous_poisson` `e_total` `e_ionic` `e_electronic` `n` `e_ij_max` `weighted_surface_energy_EV_PER_ANG2` `weighted_surface_energy` `weighted_work_function` `surface_anisotropy` `shape_factor` `has_reconstructed` `possible_species` `has_props` `theoretical` `database_IDs`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from SummaryDoc as a list of comma separated strings.                    Fields include: `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `structure` `task_ids` `uncorrected_energy_per_atom` `energy_per_atom` `formation_energy_per_atom` `energy_above_hull` `is_stable` `equilibrium_reaction_energy_per_atom` `decomposes_to` `xas` `grain_boundaries` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `es_source_calc_id` `bandstructure` `dos` `dos_energy_up` `dos_energy_down` `is_magnetic` `ordering` `total_magnetization` `total_magnetization_normalized_vol` `total_magnetization_normalized_formula_units` `num_magnetic_sites` `num_unique_magnetic_sites` `types_of_magnetic_species` `k_voigt` `k_reuss` `k_vrh` `g_voigt` `g_reuss` `g_vrh` `universal_anisotropy` `homogeneous_poisson` `e_total` `e_ionic` `e_electronic` `n` `e_ij_max` `weighted_surface_energy_EV_PER_ANG2` `weighted_surface_energy` `weighted_work_function` `surface_anisotropy` `shape_factor` `has_reconstructed` `possible_species` `has_props` `theoretical` `database_IDs`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a SummaryDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_SummaryDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/electronic_structure/bandstructure/": {
      "get": {
        "tags": ["Materials Electronic Structure"],
        "summary": "Get ElectronicStructureDoc documents",
        "operationId": "search_materials_electronic_structure_bandstructure__get",
        "parameters": [
          {
            "description": "k-path selection convention for the band structure.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/BSPathType" }],
              "description": "k-path selection convention for the band structure."
            },
            "name": "path_type",
            "in": "query"
          },
          {
            "description": "Maximum value for the band gap energy in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Band Gap Max",
              "description": "Maximum value for the band gap energy in eV."
            },
            "name": "band_gap_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the band gap energy in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Band Gap Min",
              "description": "Minimum value for the band gap energy in eV."
            },
            "name": "band_gap_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the fermi energy in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Efermi Max",
              "description": "Maximum value for the fermi energy in eV."
            },
            "name": "efermi_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the fermi energy in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Efermi Min",
              "description": "Minimum value for the fermi energy in eV."
            },
            "name": "efermi_min",
            "in": "query"
          },
          {
            "description": "Magnetic ordering associated with the data.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Ordering" }],
              "description": "Magnetic ordering associated with the data."
            },
            "name": "magnetic_ordering",
            "in": "query"
          },
          {
            "description": "Whether a band gap is direct or not.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Is Gap Direct",
              "description": "Whether a band gap is direct or not."
            },
            "name": "is_gap_direct",
            "in": "query"
          },
          {
            "description": "Whether the material is considered a metal.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Is Metal",
              "description": "Whether the material is considered a metal."
            },
            "name": "is_metal",
            "in": "query"
          },
          {
            "description": "Whether the material is marked as deprecated",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Deprecated",
              "description": "Whether the material is marked as deprecated",
              "default": false
            },
            "name": "deprecated",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a ElectronicStructureDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ElectronicStructureDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/electronic_structure/dos/": {
      "get": {
        "tags": ["Materials Electronic Structure"],
        "summary": "Get ElectronicStructureDoc documents",
        "operationId": "search_materials_electronic_structure_dos__get",
        "parameters": [
          {
            "description": "Projection type for the density of states data.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/DOSProjectionType" }],
              "description": "Projection type for the density of states data."
            },
            "name": "projection_type",
            "in": "query"
          },
          {
            "description": "Spin channel for density of states data. '1' corresponds to spin up.",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["1", "-1"] },
                { "$ref": "#/components/schemas/Spin" }
              ],
              "title": "Spin",
              "description": "Spin channel for density of states data. '1' corresponds to spin up."
            },
            "name": "spin",
            "in": "query"
          },
          {
            "description": "Element type for projected density of states data.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Element" }],
              "description": "Element type for projected density of states data."
            },
            "name": "element",
            "in": "query"
          },
          {
            "description": "Orbital type for projected density of states data.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrbitalType" }],
              "description": "Orbital type for projected density of states data."
            },
            "name": "orbital",
            "in": "query"
          },
          {
            "description": "Maximum value for the band gap energy in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Band Gap Max",
              "description": "Maximum value for the band gap energy in eV."
            },
            "name": "band_gap_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the band gap energy in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Band Gap Min",
              "description": "Minimum value for the band gap energy in eV."
            },
            "name": "band_gap_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the fermi energy in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Efermi Max",
              "description": "Maximum value for the fermi energy in eV."
            },
            "name": "efermi_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the fermi energy in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Efermi Min",
              "description": "Minimum value for the fermi energy in eV."
            },
            "name": "efermi_min",
            "in": "query"
          },
          {
            "description": "Magnetic ordering associated with the data.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Ordering" }],
              "description": "Magnetic ordering associated with the data."
            },
            "name": "magnetic_ordering",
            "in": "query"
          },
          {
            "description": "Whether the material is marked as deprecated",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Deprecated",
              "description": "Whether the material is marked as deprecated",
              "default": false
            },
            "name": "deprecated",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a ElectronicStructureDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ElectronicStructureDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/electronic_structure/{material_id}/": {
      "get": {
        "tags": ["Materials Electronic Structure"],
        "summary": "Get a ElectronicStructureDoc document by by material_id",
        "operationId": "get_by_key_materials_electronic_structure__material_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The material_id of the ElectronicStructureDoc to get"
            },
            "name": "material_id",
            "in": "path"
          },
          {
            "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a ElectronicStructureDoc document by material_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ElectronicStructureDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/electronic_structure/": {
      "get": {
        "tags": ["Materials Electronic Structure"],
        "summary": "Get ElectronicStructureDoc documents",
        "operationId": "search_materials_electronic_structure__get",
        "parameters": [
          {
            "description": "Comma-separated list of material_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Material Ids",
              "description": "Comma-separated list of material_id values to query on"
            },
            "name": "material_ids",
            "in": "query"
          },
          {
            "description": "Magnetic ordering associated with the data.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Ordering" }],
              "description": "Magnetic ordering associated with the data."
            },
            "name": "magnetic_ordering",
            "in": "query"
          },
          {
            "description": "Whether a band gap is direct or not.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Is Gap Direct",
              "description": "Whether a band gap is direct or not."
            },
            "name": "is_gap_direct",
            "in": "query"
          },
          {
            "description": "Whether the material is considered a metal.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Is Metal",
              "description": "Whether the material is considered a metal."
            },
            "name": "is_metal",
            "in": "query"
          },
          {
            "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by formula including anonymized formula or by including wild cards. A comma delimited string list of anonymous formulas or regular formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query for maximum value of band_gap",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Band Gap Max",
              "description": "Query for maximum value of band_gap"
            },
            "name": "band_gap_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of band_gap",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Band Gap Min",
              "description": "Query for minimum value of band_gap"
            },
            "name": "band_gap_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of efermi",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Efermi Max",
              "description": "Query for maximum value of efermi"
            },
            "name": "efermi_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of efermi",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Efermi Min",
              "description": "Query for minimum value of efermi"
            },
            "name": "efermi_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Max",
              "description": "Query for maximum value of nsites"
            },
            "name": "nsites_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nsites",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Min",
              "description": "Query for minimum value of nsites"
            },
            "name": "nsites_min",
            "in": "query"
          },
          {
            "description": "Query for nsites being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites",
              "description": "Query for nsites being equal to an exact value"
            },
            "name": "nsites",
            "in": "query"
          },
          {
            "description": "Query for nsites being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nsites Not Eq",
              "description": "Query for nsites being not equal to an exact value"
            },
            "name": "nsites_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nsites being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Eq Any",
              "description": "Query for nsites being any of these values. Provide a comma separated list."
            },
            "name": "nsites_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nsites being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nsites Neq Any",
              "description": "Query for nsites being not any of these values.                             Provide a comma separated list."
            },
            "name": "nsites_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Max",
              "description": "Query for maximum value of nelements"
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of nelements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Min",
              "description": "Query for minimum value of nelements"
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Query for nelements being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements",
              "description": "Query for nelements being equal to an exact value"
            },
            "name": "nelements",
            "in": "query"
          },
          {
            "description": "Query for nelements being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Not Eq",
              "description": "Query for nelements being not equal to an exact value"
            },
            "name": "nelements_not_eq",
            "in": "query"
          },
          {
            "description": "Query for nelements being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Eq Any",
              "description": "Query for nelements being any of these values. Provide a comma separated list."
            },
            "name": "nelements_eq_any",
            "in": "query"
          },
          {
            "description": "Query for nelements being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Neq Any",
              "description": "Query for nelements being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelements_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Max",
              "description": "Query for maximum value of Volume"
            },
            "name": "volume_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Volume",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Volume Min",
              "description": "Query for minimum value of Volume"
            },
            "name": "volume_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Max",
              "description": "Query for maximum value of Density"
            },
            "name": "density_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Min",
              "description": "Query for minimum value of Density"
            },
            "name": "density_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Max",
              "description": "Query for maximum value of Packing Density"
            },
            "name": "density_atomic_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Packing Density",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Density Atomic Min",
              "description": "Query for minimum value of Packing Density"
            },
            "name": "density_atomic_min",
            "in": "query"
          },
          {
            "description": "Whether the material is marked as deprecated",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Deprecated",
              "description": "Whether the material is marked as deprecated",
              "default": false
            },
            "name": "deprecated",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from ElectronicStructureDoc as a list of comma separated strings.                    Fields include: `task_id` `band_gap` `cbm` `vbm` `efermi` `is_gap_direct` `is_metal` `magnetic_ordering` `builder_meta` `nsites` `elements` `nelements` `composition` `composition_reduced` `formula_pretty` `formula_anonymous` `chemsys` `volume` `density` `density_atomic` `symmetry` `property_name` `material_id` `deprecated` `deprecation_reasons` `last_updated` `origins` `warnings` `bandstructure` `dos`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a ElectronicStructureDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_ElectronicStructureDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/electronic_structure/bandstructure/object/": {
      "get": {
        "tags": ["Materials Electronic Structure"],
        "summary": "Get BSObjectDoc documents",
        "operationId": "search_materials_electronic_structure_bandstructure_object__get",
        "parameters": [
          {
            "description": "The calculation (task) ID associated with the data object",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
              "title": "Task Id",
              "description": "The calculation (task) ID associated with the data object",
              "examples": ["mp-3534", "3453", "mp-834-Ag"]
            },
            "name": "task_id",
            "in": "query"
          },
          {
            "description": "Fields to project from BSObjectDoc as a list of comma separated strings.                    Fields include: `task_id` `last_updated` `data`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from BSObjectDoc as a list of comma separated strings.                    Fields include: `task_id` `last_updated` `data`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a BSObjectDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_BSObjectDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/materials/electronic_structure/dos/object/": {
      "get": {
        "tags": ["Materials Electronic Structure"],
        "summary": "Get DOSObjectDoc documents",
        "operationId": "search_materials_electronic_structure_dos_object__get",
        "parameters": [
          {
            "description": "The calculation (task) ID associated with the data object",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
              "title": "Task Id",
              "description": "The calculation (task) ID associated with the data object",
              "examples": ["mp-3534", "3453", "mp-834-Ag"]
            },
            "name": "task_id",
            "in": "query"
          },
          {
            "description": "Fields to project from DOSObjectDoc as a list of comma separated strings.                    Fields include: `task_id` `last_updated` `data`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from DOSObjectDoc as a list of comma separated strings.                    Fields include: `task_id` `last_updated` `data`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a DOSObjectDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_DOSObjectDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/tasks/{task_id}/": {
      "get": {
        "tags": ["Molecules Tasks"],
        "summary": "Get a TaskDocument document by by task_id",
        "operationId": "get_by_key_molecules_tasks__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the TaskDocument to get"
            },
            "name": "task_id",
            "in": "path"
          },
          {
            "description": "Fields to project from TaskDocument as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `calc_code` `version` `dir_name` `task_id` `completed` `completed_at` `last_updated` `is_valid` `state` `cputime` `walltime` `calcs_reversed` `orig` `critic2` `custom_smd` `special_run_type` `smiles` `species_hash` `coord_hash` `tags` `warnings` `output`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from TaskDocument as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `calc_code` `version` `dir_name` `task_id` `completed` `completed_at` `last_updated` `is_valid` `state` `cputime` `walltime` `calcs_reversed` `orig` `critic2` `custom_smd` `special_run_type` `smiles` `species_hash` `coord_hash` `tags` `warnings` `output`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a TaskDocument document by task_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_TaskDocument_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/tasks/": {
      "get": {
        "tags": ["Molecules Tasks"],
        "summary": "Get TaskDocument documents",
        "operationId": "search_molecules_tasks__get",
        "parameters": [
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Comma-separated list of task_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of task_ids to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from TaskDocument as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `calc_code` `version` `dir_name` `task_id` `completed` `completed_at` `last_updated` `is_valid` `state` `cputime` `walltime` `calcs_reversed` `orig` `critic2` `custom_smd` `special_run_type` `smiles` `species_hash` `coord_hash` `tags` `warnings` `output`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from TaskDocument as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `calc_code` `version` `dir_name` `task_id` `completed` `completed_at` `last_updated` `is_valid` `state` `cputime` `walltime` `calcs_reversed` `orig` `critic2` `custom_smd` `special_run_type` `smiles` `species_hash` `coord_hash` `tags` `warnings` `output`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a TaskDocument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_TaskDocument_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/tasks/deprecation/": {
      "get": {
        "tags": ["Molecules Tasks"],
        "summary": "Get DeprecationDoc documents",
        "operationId": "search_molecules_tasks_deprecation__get",
        "parameters": [
          {
            "description": "Comma-separated list of task_ids to query on",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of task_ids to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a DeprecationDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_DeprecationDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/tasks/trajectory/{task_id}/": {
      "get": {
        "tags": ["Molecules Tasks"],
        "summary": "Get a TrajectoryDoc document by by task_id",
        "operationId": "get_by_key_molecules_tasks_trajectory__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the TrajectoryDoc to get"
            },
            "name": "task_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a TrajectoryDoc document by task_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_TrajectoryDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/tasks/trajectory/": {
      "get": {
        "tags": ["Molecules Tasks"],
        "summary": "Get TrajectoryDoc documents",
        "operationId": "search_molecules_tasks_trajectory__get",
        "parameters": [
          {
            "description": "Comma-separated list of task_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of task_ids to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a TrajectoryDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_TrajectoryDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/assoc/{molecule_id}/": {
      "get": {
        "tags": ["Associated Molecules"],
        "summary": "Get a MoleculeDoc document by by molecule_id",
        "operationId": "get_by_key_molecules_assoc__molecule_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The molecule_id of the MoleculeDoc to get"
            },
            "name": "molecule_id",
            "in": "path"
          },
          {
            "description": "Fields to project from MoleculeDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `molecule_id` `molecule` `deprecated` `deprecation_reasons` `initial_molecules` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `species` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_types` `levels_of_theory` `solvents` `lot_solvents` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `entries` `best_entries` `constituent_molecules` `similar_molecules`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculeDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `molecule_id` `molecule` `deprecated` `deprecation_reasons` `initial_molecules` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `species` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_types` `levels_of_theory` `solvents` `lot_solvents` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `entries` `best_entries` `constituent_molecules` `similar_molecules`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a MoleculeDoc document by molecule_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculeDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/assoc/": {
      "get": {
        "tags": ["Associated Molecules"],
        "summary": "Get MoleculeDoc documents",
        "operationId": "search_molecules_assoc__get",
        "parameters": [
          {
            "description": "Comma-separated list of MPculeIDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of MPculeIDs to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query for charge being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query for charge being equal to an exact value"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query for spin_multiplicity being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query for spin_multiplicity being equal to an exact value"
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Comma-separated list of task_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of task_ids to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Level Of Theory",
              "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried."
            },
            "name": "level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Solvent",
              "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried."
            },
            "name": "solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lot Solvent",
              "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried."
            },
            "name": "lot_solvent",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Graph hash augmented with node species",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Species Hash",
              "description": "Graph hash augmented with node species"
            },
            "name": "species_hash",
            "in": "query"
          },
          {
            "description": "Graph hash augmented with node XYZ coordinates",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Coord Hash",
              "description": "Graph hash augmented with node XYZ coordinates"
            },
            "name": "coord_hash",
            "in": "query"
          },
          {
            "description": "Whether the material is marked as deprecated",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Deprecated",
              "description": "Whether the material is marked as deprecated",
              "default": false
            },
            "name": "deprecated",
            "in": "query"
          },
          {
            "description": "Query for maximum value of charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge Max",
              "description": "Query for maximum value of charge"
            },
            "name": "charge_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge Min",
              "description": "Query for minimum value of charge"
            },
            "name": "charge_min",
            "in": "query"
          },
          {
            "description": "Query for charge being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge Not Eq",
              "description": "Query for charge being not equal to an exact value"
            },
            "name": "charge_not_eq",
            "in": "query"
          },
          {
            "description": "Query for charge being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Charge Eq Any",
              "description": "Query for charge being any of these values. Provide a comma separated list."
            },
            "name": "charge_eq_any",
            "in": "query"
          },
          {
            "description": "Query for charge being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Charge Neq Any",
              "description": "Query for charge being not any of these values.                             Provide a comma separated list."
            },
            "name": "charge_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of spin_multiplicity",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity Max",
              "description": "Query for maximum value of spin_multiplicity"
            },
            "name": "spin_multiplicity_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of spin_multiplicity",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity Min",
              "description": "Query for minimum value of spin_multiplicity"
            },
            "name": "spin_multiplicity_min",
            "in": "query"
          },
          {
            "description": "Query for spin_multiplicity being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity Not Eq",
              "description": "Query for spin_multiplicity being not equal to an exact value"
            },
            "name": "spin_multiplicity_not_eq",
            "in": "query"
          },
          {
            "description": "Query for spin_multiplicity being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Spin Multiplicity Eq Any",
              "description": "Query for spin_multiplicity being any of these values. Provide a comma separated list."
            },
            "name": "spin_multiplicity_eq_any",
            "in": "query"
          },
          {
            "description": "Query for spin_multiplicity being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Spin Multiplicity Neq Any",
              "description": "Query for spin_multiplicity being not any of these values.                             Provide a comma separated list."
            },
            "name": "spin_multiplicity_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of natoms",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Natoms Max",
              "description": "Query for maximum value of natoms"
            },
            "name": "natoms_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of natoms",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Natoms Min",
              "description": "Query for minimum value of natoms"
            },
            "name": "natoms_min",
            "in": "query"
          },
          {
            "description": "Query for natoms being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Natoms",
              "description": "Query for natoms being equal to an exact value"
            },
            "name": "natoms",
            "in": "query"
          },
          {
            "description": "Query for natoms being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Natoms Not Eq",
              "description": "Query for natoms being not equal to an exact value"
            },
            "name": "natoms_not_eq",
            "in": "query"
          },
          {
            "description": "Query for natoms being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Natoms Eq Any",
              "description": "Query for natoms being any of these values. Provide a comma separated list."
            },
            "name": "natoms_eq_any",
            "in": "query"
          },
          {
            "description": "Query for natoms being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Natoms Neq Any",
              "description": "Query for natoms being not any of these values.                             Provide a comma separated list."
            },
            "name": "natoms_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Number of Elements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Max",
              "description": "Query for maximum value of Number of Elements"
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Number of Elements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Min",
              "description": "Query for minimum value of Number of Elements"
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements",
              "description": "Query for Number of Elements being equal to an exact value"
            },
            "name": "nelements",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Not Eq",
              "description": "Query for Number of Elements being not equal to an exact value"
            },
            "name": "nelements_not_eq",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Eq Any",
              "description": "Query for Number of Elements being any of these values. Provide a comma separated list."
            },
            "name": "nelements_eq_any",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Neq Any",
              "description": "Query for Number of Elements being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelements_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Number of electrons",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelectrons Max",
              "description": "Query for maximum value of Number of electrons"
            },
            "name": "nelectrons_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Number of electrons",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelectrons Min",
              "description": "Query for minimum value of Number of electrons"
            },
            "name": "nelectrons_min",
            "in": "query"
          },
          {
            "description": "Query for Number of electrons being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelectrons",
              "description": "Query for Number of electrons being equal to an exact value"
            },
            "name": "nelectrons",
            "in": "query"
          },
          {
            "description": "Query for Number of electrons being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelectrons Not Eq",
              "description": "Query for Number of electrons being not equal to an exact value"
            },
            "name": "nelectrons_not_eq",
            "in": "query"
          },
          {
            "description": "Query for Number of electrons being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelectrons Eq Any",
              "description": "Query for Number of electrons being any of these values. Provide a comma separated list."
            },
            "name": "nelectrons_eq_any",
            "in": "query"
          },
          {
            "description": "Query for Number of electrons being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelectrons Neq Any",
              "description": "Query for Number of electrons being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelectrons_neq_any",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Fields to project from MoleculeDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `molecule_id` `molecule` `deprecated` `deprecation_reasons` `initial_molecules` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `species` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_types` `levels_of_theory` `solvents` `lot_solvents` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `entries` `best_entries` `constituent_molecules` `similar_molecules`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculeDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `molecule_id` `molecule` `deprecated` `deprecation_reasons` `initial_molecules` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `species` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_types` `levels_of_theory` `solvents` `lot_solvents` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `entries` `best_entries` `constituent_molecules` `similar_molecules`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a MoleculeDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculeDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/assoc/find_molecule/": {
      "post": {
        "tags": ["Associated Molecules"],
        "summary": "Post FindMolecule documents",
        "operationId": "search_molecules_assoc_find_molecule__post",
        "parameters": [
          {
            "description": "RMSD difference threshold. Default is 0.01.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Tolerance",
              "description": "RMSD difference threshold. Default is 0.01.",
              "default": 0.01
            },
            "name": "tolerance",
            "in": "query"
          },
          {
            "description": "Molecule charge. If None (default), don't limit by charge.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Molecule charge. If None (default), don't limit by charge."
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Molecule spin_multiplicity. If None (default), don't limit by spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Molecule spin_multiplicity. If None (default), don't limit by spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Maximum number of matches to show. Defaults to 1, only showing the best match.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Maximum number of matches to show. Defaults to 1, only showing the best match.",
              "default": 1
            },
            "name": "_limit",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "@class": { "type": "string", "enum": ["Molecule"] },
                  "@module": {
                    "type": "string",
                    "enum": ["pymatgen.core.structure"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"],
                "title": "Molecule",
                "description": "Pymatgen Molecule object to query with"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Post FindMolecule data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_FindMolecule_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/core/{molecule_id}/": {
      "get": {
        "tags": ["Core Molecules"],
        "summary": "Get a MoleculeDoc document by by molecule_id",
        "operationId": "get_by_key_molecules_core__molecule_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The molecule_id of the MoleculeDoc to get"
            },
            "name": "molecule_id",
            "in": "path"
          },
          {
            "description": "Fields to project from MoleculeDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `molecule_id` `molecule` `deprecated` `deprecation_reasons` `initial_molecules` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `species` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_types` `levels_of_theory` `solvents` `lot_solvents` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `entries` `best_entries` `constituent_molecules` `similar_molecules`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculeDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `molecule_id` `molecule` `deprecated` `deprecation_reasons` `initial_molecules` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `species` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_types` `levels_of_theory` `solvents` `lot_solvents` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `entries` `best_entries` `constituent_molecules` `similar_molecules`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a MoleculeDoc document by molecule_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculeDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/core/": {
      "get": {
        "tags": ["Core Molecules"],
        "summary": "Get MoleculeDoc documents",
        "operationId": "search_molecules_core__get",
        "parameters": [
          {
            "description": "Comma-separated list of MPculeIDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of MPculeIDs to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query for charge being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query for charge being equal to an exact value"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query for spin_multiplicity being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query for spin_multiplicity being equal to an exact value"
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Comma-separated list of task_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of task_ids to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Level Of Theory",
              "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried."
            },
            "name": "level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Solvent",
              "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried."
            },
            "name": "solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lot Solvent",
              "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried."
            },
            "name": "lot_solvent",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Graph hash augmented with node species",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Species Hash",
              "description": "Graph hash augmented with node species"
            },
            "name": "species_hash",
            "in": "query"
          },
          {
            "description": "Graph hash augmented with node XYZ coordinates",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Coord Hash",
              "description": "Graph hash augmented with node XYZ coordinates"
            },
            "name": "coord_hash",
            "in": "query"
          },
          {
            "description": "Whether the material is marked as deprecated",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Deprecated",
              "description": "Whether the material is marked as deprecated",
              "default": false
            },
            "name": "deprecated",
            "in": "query"
          },
          {
            "description": "Query for maximum value of charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge Max",
              "description": "Query for maximum value of charge"
            },
            "name": "charge_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge Min",
              "description": "Query for minimum value of charge"
            },
            "name": "charge_min",
            "in": "query"
          },
          {
            "description": "Query for charge being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge Not Eq",
              "description": "Query for charge being not equal to an exact value"
            },
            "name": "charge_not_eq",
            "in": "query"
          },
          {
            "description": "Query for charge being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Charge Eq Any",
              "description": "Query for charge being any of these values. Provide a comma separated list."
            },
            "name": "charge_eq_any",
            "in": "query"
          },
          {
            "description": "Query for charge being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Charge Neq Any",
              "description": "Query for charge being not any of these values.                             Provide a comma separated list."
            },
            "name": "charge_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of spin_multiplicity",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity Max",
              "description": "Query for maximum value of spin_multiplicity"
            },
            "name": "spin_multiplicity_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of spin_multiplicity",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity Min",
              "description": "Query for minimum value of spin_multiplicity"
            },
            "name": "spin_multiplicity_min",
            "in": "query"
          },
          {
            "description": "Query for spin_multiplicity being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity Not Eq",
              "description": "Query for spin_multiplicity being not equal to an exact value"
            },
            "name": "spin_multiplicity_not_eq",
            "in": "query"
          },
          {
            "description": "Query for spin_multiplicity being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Spin Multiplicity Eq Any",
              "description": "Query for spin_multiplicity being any of these values. Provide a comma separated list."
            },
            "name": "spin_multiplicity_eq_any",
            "in": "query"
          },
          {
            "description": "Query for spin_multiplicity being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Spin Multiplicity Neq Any",
              "description": "Query for spin_multiplicity being not any of these values.                             Provide a comma separated list."
            },
            "name": "spin_multiplicity_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of natoms",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Natoms Max",
              "description": "Query for maximum value of natoms"
            },
            "name": "natoms_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of natoms",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Natoms Min",
              "description": "Query for minimum value of natoms"
            },
            "name": "natoms_min",
            "in": "query"
          },
          {
            "description": "Query for natoms being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Natoms",
              "description": "Query for natoms being equal to an exact value"
            },
            "name": "natoms",
            "in": "query"
          },
          {
            "description": "Query for natoms being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Natoms Not Eq",
              "description": "Query for natoms being not equal to an exact value"
            },
            "name": "natoms_not_eq",
            "in": "query"
          },
          {
            "description": "Query for natoms being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Natoms Eq Any",
              "description": "Query for natoms being any of these values. Provide a comma separated list."
            },
            "name": "natoms_eq_any",
            "in": "query"
          },
          {
            "description": "Query for natoms being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Natoms Neq Any",
              "description": "Query for natoms being not any of these values.                             Provide a comma separated list."
            },
            "name": "natoms_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Number of Elements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Max",
              "description": "Query for maximum value of Number of Elements"
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Number of Elements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Min",
              "description": "Query for minimum value of Number of Elements"
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements",
              "description": "Query for Number of Elements being equal to an exact value"
            },
            "name": "nelements",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Not Eq",
              "description": "Query for Number of Elements being not equal to an exact value"
            },
            "name": "nelements_not_eq",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Eq Any",
              "description": "Query for Number of Elements being any of these values. Provide a comma separated list."
            },
            "name": "nelements_eq_any",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Neq Any",
              "description": "Query for Number of Elements being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelements_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Number of electrons",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelectrons Max",
              "description": "Query for maximum value of Number of electrons"
            },
            "name": "nelectrons_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Number of electrons",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelectrons Min",
              "description": "Query for minimum value of Number of electrons"
            },
            "name": "nelectrons_min",
            "in": "query"
          },
          {
            "description": "Query for Number of electrons being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelectrons",
              "description": "Query for Number of electrons being equal to an exact value"
            },
            "name": "nelectrons",
            "in": "query"
          },
          {
            "description": "Query for Number of electrons being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelectrons Not Eq",
              "description": "Query for Number of electrons being not equal to an exact value"
            },
            "name": "nelectrons_not_eq",
            "in": "query"
          },
          {
            "description": "Query for Number of electrons being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelectrons Eq Any",
              "description": "Query for Number of electrons being any of these values. Provide a comma separated list."
            },
            "name": "nelectrons_eq_any",
            "in": "query"
          },
          {
            "description": "Query for Number of electrons being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelectrons Neq Any",
              "description": "Query for Number of electrons being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelectrons_neq_any",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Fields to project from MoleculeDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `molecule_id` `molecule` `deprecated` `deprecation_reasons` `initial_molecules` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `species` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_types` `levels_of_theory` `solvents` `lot_solvents` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `entries` `best_entries` `constituent_molecules` `similar_molecules`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculeDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `molecule_id` `molecule` `deprecated` `deprecation_reasons` `initial_molecules` `task_ids` `deprecated_tasks` `calc_types` `last_updated` `created_at` `origins` `warnings` `species` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_types` `levels_of_theory` `solvents` `lot_solvents` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `entries` `best_entries` `constituent_molecules` `similar_molecules`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a MoleculeDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculeDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/core/find_molecule/": {
      "post": {
        "tags": ["Core Molecules"],
        "summary": "Post FindMolecule documents",
        "operationId": "search_molecules_core_find_molecule__post",
        "parameters": [
          {
            "description": "RMSD difference threshold. Default is 0.01.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Tolerance",
              "description": "RMSD difference threshold. Default is 0.01.",
              "default": 0.01
            },
            "name": "tolerance",
            "in": "query"
          },
          {
            "description": "Molecule charge. If None (default), don't limit by charge.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Molecule charge. If None (default), don't limit by charge."
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Molecule spin_multiplicity. If None (default), don't limit by spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Molecule spin_multiplicity. If None (default), don't limit by spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Maximum number of matches to show. Defaults to 1, only showing the best match.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Maximum number of matches to show. Defaults to 1, only showing the best match.",
              "default": 1
            },
            "name": "_limit",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "@class": { "type": "string", "enum": ["Molecule"] },
                  "@module": {
                    "type": "string",
                    "enum": ["pymatgen.core.structure"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"],
                "title": "Molecule",
                "description": "Pymatgen Molecule object to query with"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Post FindMolecule data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_FindMolecule_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/partial_charges/{property_id}/": {
      "get": {
        "tags": ["Molecules Partial Charges"],
        "summary": "Get a PartialChargesDoc document by by property_id",
        "operationId": "get_by_key_molecules_partial_charges__property_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The property_id of the PartialChargesDoc to get"
            },
            "name": "property_id",
            "in": "path"
          },
          {
            "description": "Fields to project from PartialChargesDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `partial_charges`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from PartialChargesDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `partial_charges`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a PartialChargesDoc document by property_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_PartialChargesDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/partial_charges/": {
      "get": {
        "tags": ["Molecules Partial Charges"],
        "summary": "Get PartialChargesDoc documents",
        "operationId": "search_molecules_partial_charges__get",
        "parameters": [
          {
            "description": "Comma-separated list of MPculeIDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of MPculeIDs to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Level Of Theory",
              "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried."
            },
            "name": "level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Solvent",
              "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried."
            },
            "name": "solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lot Solvent",
              "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried."
            },
            "name": "lot_solvent",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query by molecular charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query by molecular charge"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query by molecular spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query by molecular spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Query by calculation method (e.g. mulliken, nbo).",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Method",
              "description": "Query by calculation method (e.g. mulliken, nbo)."
            },
            "name": "method",
            "in": "query"
          },
          {
            "description": "Comma-separated list of property_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Property Ids",
              "description": "Comma-separated list of property_id values to query on"
            },
            "name": "property_ids",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Fields to project from PartialChargesDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `partial_charges`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from PartialChargesDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `partial_charges`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a PartialChargesDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_PartialChargesDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/partial_spins/{property_id}/": {
      "get": {
        "tags": ["Molecules Partial Spins"],
        "summary": "Get a PartialSpinsDoc document by by property_id",
        "operationId": "get_by_key_molecules_partial_spins__property_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The property_id of the PartialSpinsDoc to get"
            },
            "name": "property_id",
            "in": "path"
          },
          {
            "description": "Fields to project from PartialSpinsDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `partial_spins`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from PartialSpinsDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `partial_spins`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a PartialSpinsDoc document by property_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_PartialSpinsDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/partial_spins/": {
      "get": {
        "tags": ["Molecules Partial Spins"],
        "summary": "Get PartialSpinsDoc documents",
        "operationId": "search_molecules_partial_spins__get",
        "parameters": [
          {
            "description": "Comma-separated list of MPculeIDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of MPculeIDs to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Level Of Theory",
              "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried."
            },
            "name": "level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Solvent",
              "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried."
            },
            "name": "solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lot Solvent",
              "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried."
            },
            "name": "lot_solvent",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query by molecular charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query by molecular charge"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query by molecular spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query by molecular spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Query by calculation method (e.g. mulliken, nbo).",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Method",
              "description": "Query by calculation method (e.g. mulliken, nbo)."
            },
            "name": "method",
            "in": "query"
          },
          {
            "description": "Comma-separated list of property_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Property Ids",
              "description": "Comma-separated list of property_id values to query on"
            },
            "name": "property_ids",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Fields to project from PartialSpinsDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `partial_spins`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from PartialSpinsDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `partial_spins`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a PartialSpinsDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_PartialSpinsDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/bonding/{property_id}/": {
      "get": {
        "tags": ["Molecules Bonds"],
        "summary": "Get a MoleculeBondingDoc document by by property_id",
        "operationId": "get_by_key_molecules_bonding__property_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The property_id of the MoleculeBondingDoc to get"
            },
            "name": "property_id",
            "in": "path"
          },
          {
            "description": "Fields to project from MoleculeBondingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecule_graph` `method` `bond_types` `bonds` `bonds_nometal`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculeBondingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecule_graph` `method` `bond_types` `bonds` `bonds_nometal`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a MoleculeBondingDoc document by property_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculeBondingDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/bonding/": {
      "get": {
        "tags": ["Molecules Bonds"],
        "summary": "Get MoleculeBondingDoc documents",
        "operationId": "search_molecules_bonding__get",
        "parameters": [
          {
            "description": "Comma-separated list of MPculeIDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of MPculeIDs to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Level Of Theory",
              "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried."
            },
            "name": "level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Solvent",
              "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried."
            },
            "name": "solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lot Solvent",
              "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried."
            },
            "name": "lot_solvent",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query by molecular charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query by molecular charge"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query by molecular spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query by molecular spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Query by calculation method (e.g. mulliken, nbo).",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Method",
              "description": "Query by calculation method (e.g. mulliken, nbo)."
            },
            "name": "method",
            "in": "query"
          },
          {
            "description": "Comma-separated list of property_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Property Ids",
              "description": "Comma-separated list of property_id values to query on"
            },
            "name": "property_ids",
            "in": "query"
          },
          {
            "description": "Bond type of interest; e.g. C-O for carbon-oxygen bonds.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Bond Type",
              "description": "Bond type of interest; e.g. C-O for carbon-oxygen bonds."
            },
            "name": "bond_type",
            "in": "query"
          },
          {
            "description": "Maximum value for the bond lengths in the molecule.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Bond Length",
              "description": "Maximum value for the bond lengths in the molecule."
            },
            "name": "max_bond_length",
            "in": "query"
          },
          {
            "description": "Minimum value for the bond lengths in the molecule.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Bond Length",
              "description": "Minimum value for the bond lengths in the molecule."
            },
            "name": "min_bond_length",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Fields to project from MoleculeBondingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecule_graph` `method` `bond_types` `bonds` `bonds_nometal`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculeBondingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecule_graph` `method` `bond_types` `bonds` `bonds_nometal`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a MoleculeBondingDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculeBondingDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/metal_binding/{property_id}/": {
      "get": {
        "tags": ["Molecules Metal Binding"],
        "summary": "Get a MetalBindingDoc document by by property_id",
        "operationId": "get_by_key_molecules_metal_binding__property_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The property_id of the MetalBindingDoc to get"
            },
            "name": "property_id",
            "in": "path"
          },
          {
            "description": "Fields to project from MetalBindingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `binding_partial_charges_property_id` `binding_partial_spins_property_id` `binding_partial_charges_lot_solvent` `binding_partial_spins_lot_solvent` `binding_charge_spin_method` `binding_bonding_property_id` `binding_bonding_lot_solvent` `binding_bonding_method` `binding_thermo_property_id` `binding_thermo_lot_solvent` `binding_thermo_correction_lot_solvent` `binding_thermo_combined_lot_solvent` `binding_data`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MetalBindingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `binding_partial_charges_property_id` `binding_partial_spins_property_id` `binding_partial_charges_lot_solvent` `binding_partial_spins_lot_solvent` `binding_charge_spin_method` `binding_bonding_property_id` `binding_bonding_lot_solvent` `binding_bonding_method` `binding_thermo_property_id` `binding_thermo_lot_solvent` `binding_thermo_correction_lot_solvent` `binding_thermo_combined_lot_solvent` `binding_data`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a MetalBindingDoc document by property_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MetalBindingDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/metal_binding/": {
      "get": {
        "tags": ["Molecules Metal Binding"],
        "summary": "Get MetalBindingDoc documents",
        "operationId": "search_molecules_metal_binding__get",
        "parameters": [
          {
            "description": "Comma-separated list of MPculeIDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of MPculeIDs to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Level Of Theory",
              "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried."
            },
            "name": "level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Solvent",
              "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried."
            },
            "name": "solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lot Solvent",
              "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried."
            },
            "name": "lot_solvent",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query by molecular charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query by molecular charge"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query by molecular spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query by molecular spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Query by calculation method (e.g. mulliken, nbo).",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Method",
              "description": "Query by calculation method (e.g. mulliken, nbo)."
            },
            "name": "method",
            "in": "query"
          },
          {
            "description": "Element symbol for coordinated metal, e.g. 'Li' for lithium or 'Mg' for magnesium",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Metal Element",
              "description": "Element symbol for coordinated metal, e.g. 'Li' for lithium or 'Mg' for magnesium"
            },
            "name": "metal_element",
            "in": "query"
          },
          {
            "description": "Minimum metal partial charge.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Metal Partial Charge",
              "description": "Minimum metal partial charge."
            },
            "name": "min_metal_partial_charge",
            "in": "query"
          },
          {
            "description": "Maximum metal partial charge.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Metal Partial Charge",
              "description": "Maximum metal partial charge."
            },
            "name": "max_metal_partial_charge",
            "in": "query"
          },
          {
            "description": "Minimum metal partial spin (only meaningful for open-shell systems).",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Metal Partial Spin",
              "description": "Minimum metal partial spin (only meaningful for open-shell systems)."
            },
            "name": "min_metal_partial_spin",
            "in": "query"
          },
          {
            "description": "Maximum metal partial spin (only meaningful for open-shell systems).",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Metal Partial Spin",
              "description": "Maximum metal partial spin (only meaningful for open-shell systems)."
            },
            "name": "max_metal_partial_spin",
            "in": "query"
          },
          {
            "description": "Minimum charge of the metal, determined by analyzing partial charges/spins.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Metal Assigned Charge",
              "description": "Minimum charge of the metal, determined by analyzing partial charges/spins."
            },
            "name": "min_metal_assigned_charge",
            "in": "query"
          },
          {
            "description": "Maximum charge of the metal, determined by analyzing partial charges/spins.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Metal Assigned Charge",
              "description": "Maximum charge of the metal, determined by analyzing partial charges/spins."
            },
            "name": "max_metal_assigned_charge",
            "in": "query"
          },
          {
            "description": "Minimum spin multiplicity of the metal, determined by analyzing partial spins.",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "number" }],
              "title": "Min Metal Assigned Spin",
              "description": "Minimum spin multiplicity of the metal, determined by analyzing partial spins."
            },
            "name": "min_metal_assigned_spin",
            "in": "query"
          },
          {
            "description": "Maximum spin multiplicity of the metal, determined by analyzing partial spins.",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "number" }],
              "title": "Max Metal Assigned Spin",
              "description": "Maximum spin multiplicity of the metal, determined by analyzing partial spins."
            },
            "name": "max_metal_assigned_spin",
            "in": "query"
          },
          {
            "description": "Minimum number of atoms coordinated to the metal.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Min Number Coordinate Bonds",
              "description": "Minimum number of atoms coordinated to the metal."
            },
            "name": "min_number_coordinate_bonds",
            "in": "query"
          },
          {
            "description": "Maximum number of atoms coordinated to the metal.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Max Number Coordinate Bonds",
              "description": "Maximum number of atoms coordinated to the metal."
            },
            "name": "max_number_coordinate_bonds",
            "in": "query"
          },
          {
            "description": "Minimum binding electronic energy (units: eV)",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Binding Energy",
              "description": "Minimum binding electronic energy (units: eV)"
            },
            "name": "min_binding_energy",
            "in": "query"
          },
          {
            "description": "Maximum binding electronic energy (units: eV)",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Binding Energy",
              "description": "Maximum binding electronic energy (units: eV)"
            },
            "name": "max_binding_energy",
            "in": "query"
          },
          {
            "description": "Minimum binding enthalpy (units: eV)",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Binding Enthalpy",
              "description": "Minimum binding enthalpy (units: eV)"
            },
            "name": "min_binding_enthalpy",
            "in": "query"
          },
          {
            "description": "Maximum binding enthalpy (units: eV)",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Binding Enthalpy",
              "description": "Maximum binding enthalpy (units: eV)"
            },
            "name": "max_binding_enthalpy",
            "in": "query"
          },
          {
            "description": "Minimum binding entropy (units: eV/K)",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Binding Entropy",
              "description": "Minimum binding entropy (units: eV/K)"
            },
            "name": "min_binding_entropy",
            "in": "query"
          },
          {
            "description": "Maximum binding entropy (units: eV/K)",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Binding Entropy",
              "description": "Maximum binding entropy (units: eV/K)"
            },
            "name": "max_binding_entropy",
            "in": "query"
          },
          {
            "description": "Minimum binding free energy (units: eV)",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Binding Free Energy",
              "description": "Minimum binding free energy (units: eV)"
            },
            "name": "min_binding_free_energy",
            "in": "query"
          },
          {
            "description": "Maximum binding free energy (units: eV)",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Binding Free Energy",
              "description": "Maximum binding free energy (units: eV)"
            },
            "name": "max_binding_free_energy",
            "in": "query"
          },
          {
            "description": "Comma-separated list of property_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Property Ids",
              "description": "Comma-separated list of property_id values to query on"
            },
            "name": "property_ids",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Fields to project from MetalBindingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `binding_partial_charges_property_id` `binding_partial_spins_property_id` `binding_partial_charges_lot_solvent` `binding_partial_spins_lot_solvent` `binding_charge_spin_method` `binding_bonding_property_id` `binding_bonding_lot_solvent` `binding_bonding_method` `binding_thermo_property_id` `binding_thermo_lot_solvent` `binding_thermo_correction_lot_solvent` `binding_thermo_combined_lot_solvent` `binding_data`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MetalBindingDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `method` `binding_partial_charges_property_id` `binding_partial_spins_property_id` `binding_partial_charges_lot_solvent` `binding_partial_spins_lot_solvent` `binding_charge_spin_method` `binding_bonding_property_id` `binding_bonding_lot_solvent` `binding_bonding_method` `binding_thermo_property_id` `binding_thermo_lot_solvent` `binding_thermo_correction_lot_solvent` `binding_thermo_combined_lot_solvent` `binding_data`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a MetalBindingDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MetalBindingDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/orbitals/{property_id}/": {
      "get": {
        "tags": ["Molecules Orbitals"],
        "summary": "Get a OrbitalDoc document by by property_id",
        "operationId": "get_by_key_molecules_orbitals__property_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The property_id of the OrbitalDoc to get"
            },
            "name": "property_id",
            "in": "path"
          },
          {
            "description": "Fields to project from OrbitalDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `open_shell` `nbo_population` `nbo_lone_pairs` `nbo_bonds` `nbo_interactions` `alpha_population` `beta_population` `alpha_lone_pairs` `beta_lone_pairs` `alpha_bonds` `beta_bonds` `alpha_interactions` `beta_interactions`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from OrbitalDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `open_shell` `nbo_population` `nbo_lone_pairs` `nbo_bonds` `nbo_interactions` `alpha_population` `beta_population` `alpha_lone_pairs` `beta_lone_pairs` `alpha_bonds` `beta_bonds` `alpha_interactions` `beta_interactions`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a OrbitalDoc document by property_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_OrbitalDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/orbitals/": {
      "get": {
        "tags": ["Molecules Orbitals"],
        "summary": "Get OrbitalDoc documents",
        "operationId": "search_molecules_orbitals__get",
        "parameters": [
          {
            "description": "Comma-separated list of MPculeIDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of MPculeIDs to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Level Of Theory",
              "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried."
            },
            "name": "level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Solvent",
              "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried."
            },
            "name": "solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lot Solvent",
              "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried."
            },
            "name": "lot_solvent",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query by molecular charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query by molecular charge"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query by molecular spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query by molecular spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Comma-separated list of property_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Property Ids",
              "description": "Comma-separated list of property_id values to query on"
            },
            "name": "property_ids",
            "in": "query"
          },
          {
            "description": "Should alpha ('alpha'), beta ('beta'), or all electrons be considered (None; default)?",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Electron Type Population",
              "description": "Should alpha ('alpha'), beta ('beta'), or all electrons be considered (None; default)?"
            },
            "name": "electron_type_population",
            "in": "query"
          },
          {
            "description": "Minimum number of core electrons in an atom in this molecule.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Core Electrons",
              "description": "Minimum number of core electrons in an atom in this molecule."
            },
            "name": "min_core_electrons",
            "in": "query"
          },
          {
            "description": "Maximum number of core electrons in an atom in this molecule.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Core Electrons",
              "description": "Maximum number of core electrons in an atom in this molecule."
            },
            "name": "max_core_electrons",
            "in": "query"
          },
          {
            "description": "Minimum number of valence electrons in an atom in this molecule.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Valence Electrons",
              "description": "Minimum number of valence electrons in an atom in this molecule."
            },
            "name": "min_valence_electrons",
            "in": "query"
          },
          {
            "description": "Maximum number of valence electrons in an atom in this molecule.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Valence Electrons",
              "description": "Maximum number of valence electrons in an atom in this molecule."
            },
            "name": "max_valence_electrons",
            "in": "query"
          },
          {
            "description": "Minimum number of Rydberg electrons in an atom in this molecule.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Rydberg Electrons",
              "description": "Minimum number of Rydberg electrons in an atom in this molecule."
            },
            "name": "min_rydberg_electrons",
            "in": "query"
          },
          {
            "description": "Maximum number of Rydberg electrons in an atom in this molecule.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Rydberg Electrons",
              "description": "Maximum number of Rydberg electrons in an atom in this molecule."
            },
            "name": "max_rydberg_electrons",
            "in": "query"
          },
          {
            "description": "Minimum number of electrons in an atom in this molecule.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Total Electrons",
              "description": "Minimum number of electrons in an atom in this molecule."
            },
            "name": "min_total_electrons",
            "in": "query"
          },
          {
            "description": "Maximum number of electrons in an atom in this molecule.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Total Electrons",
              "description": "Maximum number of electrons in an atom in this molecule."
            },
            "name": "max_total_electrons",
            "in": "query"
          },
          {
            "description": "Should alpha ('alpha'), beta ('beta'), or all electrons be considered (None; default)?",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Electron Type Lp",
              "description": "Should alpha ('alpha'), beta ('beta'), or all electrons be considered (None; default)?"
            },
            "name": "electron_type_lp",
            "in": "query"
          },
          {
            "description": "Type of orbital - 'LP' for 'lone pair' or 'LV' for 'lone vacant'",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lp Type",
              "description": "Type of orbital - 'LP' for 'lone pair' or 'LV' for 'lone vacant'"
            },
            "name": "lp_type",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the lone pair constituted by s atomic orbitals.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min S Character",
              "description": "Minimum percentage of the lone pair constituted by s atomic orbitals."
            },
            "name": "min_s_character",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the lone pair constituted by s atomic orbitals.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max S Character",
              "description": "Maximum percentage of the lone pair constituted by s atomic orbitals."
            },
            "name": "max_s_character",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the lone pair constituted by p atomic orbitals.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min P Character",
              "description": "Minimum percentage of the lone pair constituted by p atomic orbitals."
            },
            "name": "min_p_character",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the lone pair constituted by p atomic orbitals.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max P Character",
              "description": "Maximum percentage of the lone pair constituted by p atomic orbitals."
            },
            "name": "max_p_character",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the lone pair constituted by d atomic orbitals.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min D Character",
              "description": "Minimum percentage of the lone pair constituted by d atomic orbitals."
            },
            "name": "min_d_character",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the lone pair constituted by d atomic orbitals.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max D Character",
              "description": "Maximum percentage of the lone pair constituted by d atomic orbitals."
            },
            "name": "max_d_character",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the lone pair constituted by f atomic orbitals.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min F Character",
              "description": "Minimum percentage of the lone pair constituted by f atomic orbitals."
            },
            "name": "min_f_character",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the lone pair constituted by f atomic orbitals.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max F Character",
              "description": "Maximum percentage of the lone pair constituted by f atomic orbitals."
            },
            "name": "max_f_character",
            "in": "query"
          },
          {
            "description": "Minimum number of electrons in the lone pair.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Lp Occupancy",
              "description": "Minimum number of electrons in the lone pair."
            },
            "name": "min_lp_occupancy",
            "in": "query"
          },
          {
            "description": "Maximum number of electrons in the lone pair.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Lp Occupancy",
              "description": "Maximum number of electrons in the lone pair."
            },
            "name": "max_lp_occupancy",
            "in": "query"
          },
          {
            "description": "Should alpha ('alpha'), beta ('beta'), or all electrons be considered (None; default)?",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Electron Type Bond",
              "description": "Should alpha ('alpha'), beta ('beta'), or all electrons be considered (None; default)?"
            },
            "name": "electron_type_bond",
            "in": "query"
          },
          {
            "description": "Type of orbital, e.g. 'BD' for bonding or 'BD*' for antibonding",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Bond Type",
              "description": "Type of orbital, e.g. 'BD' for bonding or 'BD*' for antibonding"
            },
            "name": "bond_type",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the bond constituted by s atomic orbitals on the first atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min S Character Atom1",
              "description": "Minimum percentage of the bond constituted by s atomic orbitals on the first atom."
            },
            "name": "min_s_character_atom1",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the bond constituted by s atomic orbitals on the first atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max S Character Atom1",
              "description": "Maximum percentage of the bond constituted by s atomic orbitals on the first atom."
            },
            "name": "max_s_character_atom1",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the bond constituted by s atomic orbitals on the second atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min S Character Atom2",
              "description": "Minimum percentage of the bond constituted by s atomic orbitals on the second atom."
            },
            "name": "min_s_character_atom2",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the bond constituted by s atomic orbitals on the second atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max S Character Atom2",
              "description": "Maximum percentage of the bond constituted by s atomic orbitals on the second atom."
            },
            "name": "max_s_character_atom2",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the bond constituted by p atomic orbitals on the first atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min P Character Atom1",
              "description": "Minimum percentage of the bond constituted by p atomic orbitals on the first atom."
            },
            "name": "min_p_character_atom1",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the bond constituted by p atomic orbitals on the first atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max P Character Atom1",
              "description": "Maximum percentage of the bond constituted by p atomic orbitals on the first atom."
            },
            "name": "max_p_character_atom1",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the bond constituted by p atomic orbitals on the second atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min P Character Atom2",
              "description": "Minimum percentage of the bond constituted by p atomic orbitals on the second atom."
            },
            "name": "min_p_character_atom2",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the bond constituted by p atomic orbitals on the second atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max P Character Atom2",
              "description": "Maximum percentage of the bond constituted by p atomic orbitals on the second atom."
            },
            "name": "max_p_character_atom2",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the bond constituted by d atomic orbitals on the first atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min D Character Atom1",
              "description": "Minimum percentage of the bond constituted by d atomic orbitals on the first atom."
            },
            "name": "min_d_character_atom1",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the bond constituted by d atomic orbitals on the first atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max D Character Atom1",
              "description": "Maximum percentage of the bond constituted by d atomic orbitals on the first atom."
            },
            "name": "max_d_character_atom1",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the bond constituted by d atomic orbitals on the second atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min D Character Atom2",
              "description": "Minimum percentage of the bond constituted by d atomic orbitals on the second atom."
            },
            "name": "min_d_character_atom2",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the bond constituted by d atomic orbitals on the second atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max D Character Atom2",
              "description": "Maximum percentage of the bond constituted by d atomic orbitals on the second atom."
            },
            "name": "max_d_character_atom2",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the bond constituted by f atomic orbitals on the first atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min F Character Atom1",
              "description": "Minimum percentage of the bond constituted by f atomic orbitals on the first atom."
            },
            "name": "min_f_character_atom1",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the bond constituted by f atomic orbitals on the first atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max F Character Atom1",
              "description": "Maximum percentage of the bond constituted by f atomic orbitals on the first atom."
            },
            "name": "max_f_character_atom1",
            "in": "query"
          },
          {
            "description": "Minimum percentage of the bond constituted by f atomic orbitals on the second atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min F Character Atom2",
              "description": "Minimum percentage of the bond constituted by f atomic orbitals on the second atom."
            },
            "name": "min_f_character_atom2",
            "in": "query"
          },
          {
            "description": "Maximum percentage of the bond constituted by f atomic orbitals on the second atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max F Character Atom2",
              "description": "Maximum percentage of the bond constituted by f atomic orbitals on the second atom."
            },
            "name": "max_f_character_atom2",
            "in": "query"
          },
          {
            "description": "Minimum fraction of electrons in the bond donated by the first atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Polarization Atom1",
              "description": "Minimum fraction of electrons in the bond donated by the first atom."
            },
            "name": "min_polarization_atom1",
            "in": "query"
          },
          {
            "description": "Maximum fraction of electrons in the bond donated by the first atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Polarization Atom1",
              "description": "Maximum fraction of electrons in the bond donated by the first atom."
            },
            "name": "max_polarization_atom1",
            "in": "query"
          },
          {
            "description": "Minimum fraction of electrons in the bond donated by the second atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Polarization Atom2",
              "description": "Minimum fraction of electrons in the bond donated by the second atom."
            },
            "name": "min_polarization_atom2",
            "in": "query"
          },
          {
            "description": "Maximum fraction of electrons in the bond donated by the second atom.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Polarization Atom2",
              "description": "Maximum fraction of electrons in the bond donated by the second atom."
            },
            "name": "max_polarization_atom2",
            "in": "query"
          },
          {
            "description": "Minimum number of electrons in the bond.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Bond Occupancy",
              "description": "Minimum number of electrons in the bond."
            },
            "name": "min_bond_occupancy",
            "in": "query"
          },
          {
            "description": "Maximum number of electrons in the bond.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Bond Occupancy",
              "description": "Maximum number of electrons in the bond."
            },
            "name": "max_bond_occupancy",
            "in": "query"
          },
          {
            "description": "Should alpha ('alpha'), beta ('beta'), or all electrons be considered (None; default)?",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Electron Type Interaction",
              "description": "Should alpha ('alpha'), beta ('beta'), or all electrons be considered (None; default)?"
            },
            "name": "electron_type_interaction",
            "in": "query"
          },
          {
            "description": "Type of donor orbital, e.g. 'BD' for bonding or 'RY*' for anti-Rydberg",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Donor Type",
              "description": "Type of donor orbital, e.g. 'BD' for bonding or 'RY*' for anti-Rydberg"
            },
            "name": "donor_type",
            "in": "query"
          },
          {
            "description": "Type of acceptor orbital, e.g. 'BD' for bonding or 'RY*' for anti-Rydberg",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Acceptor Type",
              "description": "Type of acceptor orbital, e.g. 'BD' for bonding or 'RY*' for anti-Rydberg"
            },
            "name": "acceptor_type",
            "in": "query"
          },
          {
            "description": "Minimum perturbation energy of the interaction",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Perturbation Energy",
              "description": "Minimum perturbation energy of the interaction"
            },
            "name": "min_perturbation_energy",
            "in": "query"
          },
          {
            "description": "Maximum perturbation energy of the interaction",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Perturbation Energy",
              "description": "Maximum perturbation energy of the interaction"
            },
            "name": "max_perturbation_energy",
            "in": "query"
          },
          {
            "description": "Minimum energy difference between interacting orbitals",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Energy Difference",
              "description": "Minimum energy difference between interacting orbitals"
            },
            "name": "min_energy_difference",
            "in": "query"
          },
          {
            "description": "Minimum energy difference between interacting orbitals",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Energy Difference",
              "description": "Minimum energy difference between interacting orbitals"
            },
            "name": "max_energy_difference",
            "in": "query"
          },
          {
            "description": "Minimum interaction Fock matrix element",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Fock Element",
              "description": "Minimum interaction Fock matrix element"
            },
            "name": "min_fock_element",
            "in": "query"
          },
          {
            "description": "Maximum interaction Fock matrix element",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Fock Element",
              "description": "Maximum interaction Fock matrix element"
            },
            "name": "max_fock_element",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Fields to project from OrbitalDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `open_shell` `nbo_population` `nbo_lone_pairs` `nbo_bonds` `nbo_interactions` `alpha_population` `beta_population` `alpha_lone_pairs` `beta_lone_pairs` `alpha_bonds` `beta_bonds` `alpha_interactions` `beta_interactions`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from OrbitalDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `open_shell` `nbo_population` `nbo_lone_pairs` `nbo_bonds` `nbo_interactions` `alpha_population` `beta_population` `alpha_lone_pairs` `beta_lone_pairs` `alpha_bonds` `beta_bonds` `alpha_interactions` `beta_interactions`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a OrbitalDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_OrbitalDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/redox/{property_id}/": {
      "get": {
        "tags": ["Molecules Redox"],
        "summary": "Get a RedoxDoc document by by property_id",
        "operationId": "get_by_key_molecules_redox__property_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The property_id of the RedoxDoc to get"
            },
            "name": "property_id",
            "in": "path"
          },
          {
            "description": "Fields to project from RedoxDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `base_property_id` `electron_affinity` `ea_task_id` `ionization_energy` `ie_task_id` `reduction_energy` `reduction_free_energy` `red_molecule_id` `red_property_id` `oxidation_energy` `oxidation_free_energy` `ox_molecule_id` `ox_property_id` `reduction_potential` `oxidation_potential`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from RedoxDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `base_property_id` `electron_affinity` `ea_task_id` `ionization_energy` `ie_task_id` `reduction_energy` `reduction_free_energy` `red_molecule_id` `red_property_id` `oxidation_energy` `oxidation_free_energy` `ox_molecule_id` `ox_property_id` `reduction_potential` `oxidation_potential`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a RedoxDoc document by property_id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_RedoxDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/redox/": {
      "get": {
        "tags": ["Molecules Redox"],
        "summary": "Get RedoxDoc documents",
        "operationId": "search_molecules_redox__get",
        "parameters": [
          {
            "description": "Comma-separated list of MPculeIDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of MPculeIDs to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Level Of Theory",
              "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried."
            },
            "name": "level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Solvent",
              "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried."
            },
            "name": "solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lot Solvent",
              "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried."
            },
            "name": "lot_solvent",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query by molecular charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query by molecular charge"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query by molecular spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query by molecular spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Comma-separated list of property_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Property Ids",
              "description": "Comma-separated list of property_id values to query on"
            },
            "name": "property_ids",
            "in": "query"
          },
          {
            "description": "Minimum reduction potential.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Reduction Potential",
              "description": "Minimum reduction potential."
            },
            "name": "min_reduction_potential",
            "in": "query"
          },
          {
            "description": "Maximum reduction potential.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Reduction Potential",
              "description": "Maximum reduction potential."
            },
            "name": "max_reduction_potential",
            "in": "query"
          },
          {
            "description": "Minimum oxidation potential.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Min Oxidation Potential",
              "description": "Minimum oxidation potential."
            },
            "name": "min_oxidation_potential",
            "in": "query"
          },
          {
            "description": "Maximum oxidation potential.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Max Oxidation Potential",
              "description": "Maximum oxidation potential."
            },
            "name": "max_oxidation_potential",
            "in": "query"
          },
          {
            "description": "Query for maximum value of electron_affinity",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Electron Affinity Max",
              "description": "Query for maximum value of electron_affinity"
            },
            "name": "electron_affinity_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of electron_affinity",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Electron Affinity Min",
              "description": "Query for minimum value of electron_affinity"
            },
            "name": "electron_affinity_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of ionization_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Ionization Energy Max",
              "description": "Query for maximum value of ionization_energy"
            },
            "name": "ionization_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of ionization_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Ionization Energy Min",
              "description": "Query for minimum value of ionization_energy"
            },
            "name": "ionization_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of reduction_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Reduction Energy Max",
              "description": "Query for maximum value of reduction_energy"
            },
            "name": "reduction_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of reduction_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Reduction Energy Min",
              "description": "Query for minimum value of reduction_energy"
            },
            "name": "reduction_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of reduction_free_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Reduction Free Energy Max",
              "description": "Query for maximum value of reduction_free_energy"
            },
            "name": "reduction_free_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of reduction_free_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Reduction Free Energy Min",
              "description": "Query for minimum value of reduction_free_energy"
            },
            "name": "reduction_free_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of oxidation_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Oxidation Energy Max",
              "description": "Query for maximum value of oxidation_energy"
            },
            "name": "oxidation_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of oxidation_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Oxidation Energy Min",
              "description": "Query for minimum value of oxidation_energy"
            },
            "name": "oxidation_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of oxidation_free_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Oxidation Free Energy Max",
              "description": "Query for maximum value of oxidation_free_energy"
            },
            "name": "oxidation_free_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of oxidation_free_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Oxidation Free Energy Min",
              "description": "Query for minimum value of oxidation_free_energy"
            },
            "name": "oxidation_free_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of reduction_potential",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Reduction Potential Max",
              "description": "Query for maximum value of reduction_potential"
            },
            "name": "reduction_potential_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of reduction_potential",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Reduction Potential Min",
              "description": "Query for minimum value of reduction_potential"
            },
            "name": "reduction_potential_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of oxidation_potential",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Oxidation Potential Max",
              "description": "Query for maximum value of oxidation_potential"
            },
            "name": "oxidation_potential_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of oxidation_potential",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Oxidation Potential Min",
              "description": "Query for minimum value of oxidation_potential"
            },
            "name": "oxidation_potential_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Fields to project from RedoxDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `base_property_id` `electron_affinity` `ea_task_id` `ionization_energy` `ie_task_id` `reduction_energy` `reduction_free_energy` `red_molecule_id` `red_property_id` `oxidation_energy` `oxidation_free_energy` `ox_molecule_id` `ox_property_id` `reduction_potential` `oxidation_potential`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from RedoxDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `base_property_id` `electron_affinity` `ea_task_id` `ionization_energy` `ie_task_id` `reduction_energy` `reduction_free_energy` `red_molecule_id` `red_property_id` `oxidation_energy` `oxidation_free_energy` `ox_molecule_id` `ox_property_id` `reduction_potential` `oxidation_potential`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a RedoxDoc",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Response_RedoxDoc_" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/thermo/{property_id}/": {
      "get": {
        "tags": ["Molecules Thermo"],
        "summary": "Get a MoleculeThermoDoc document by by property_id",
        "operationId": "get_by_key_molecules_thermo__property_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The property_id of the MoleculeThermoDoc to get"
            },
            "name": "property_id",
            "in": "path"
          },
          {
            "description": "Fields to project from MoleculeThermoDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `electronic_energy` `correction` `base_level_of_theory` `base_solvent` `base_lot_solvent` `correction_level_of_theory` `correction_solvent` `correction_lot_solvent` `combined_lot_solvent` `zero_point_energy` `rt` `total_enthalpy` `total_entropy` `translational_enthalpy` `translational_entropy` `rotational_enthalpy` `rotational_entropy` `vibrational_enthalpy` `vibrational_entropy` `free_energy`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculeThermoDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `electronic_energy` `correction` `base_level_of_theory` `base_solvent` `base_lot_solvent` `correction_level_of_theory` `correction_solvent` `correction_lot_solvent` `combined_lot_solvent` `zero_point_energy` `rt` `total_enthalpy` `total_entropy` `translational_enthalpy` `translational_entropy` `rotational_enthalpy` `rotational_entropy` `vibrational_enthalpy` `vibrational_entropy` `free_energy`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a MoleculeThermoDoc document by property_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculeThermoDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/thermo/": {
      "get": {
        "tags": ["Molecules Thermo"],
        "summary": "Get MoleculeThermoDoc documents",
        "operationId": "search_molecules_thermo__get",
        "parameters": [
          {
            "description": "Comma-separated list of MPculeIDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of MPculeIDs to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Level Of Theory",
              "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried."
            },
            "name": "level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Solvent",
              "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried."
            },
            "name": "solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lot Solvent",
              "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried."
            },
            "name": "lot_solvent",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query by molecular charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query by molecular charge"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query by molecular spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query by molecular spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Comma-separated list of property_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Property Ids",
              "description": "Comma-separated list of property_id values to query on"
            },
            "name": "property_ids",
            "in": "query"
          },
          {
            "description": "Whether the thermodynamics involve a single-point energy correction.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Has Correction",
              "description": "Whether the thermodynamics involve a single-point energy correction.",
              "default": false
            },
            "name": "has_correction",
            "in": "query"
          },
          {
            "description": "Level of theory used for the single-point energy correction. Default is None, meaning that level of theory will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Correction Level Of Theory",
              "description": "Level of theory used for the single-point energy correction. Default is None, meaning that level of theory will not be queried."
            },
            "name": "correction_level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for the single-point energy correction. Default is None, meaning that solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Correction Solvent",
              "description": "Solvent data used for the single-point energy correction. Default is None, meaning that solvent will not be queried."
            },
            "name": "correction_solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent for the single-point energy correction. Default is None, meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Correction Lot Solvent",
              "description": "String representing the combination of level of theory and solvent for the single-point energy correction. Default is None, meaning lot_solvent will not be queried."
            },
            "name": "correction_lot_solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent for the complete thermodynamic calculation, including the frequency analysis and single-point energy correction.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Combined Lot Solvent",
              "description": "String representing the combination of level of theory and solvent for the complete thermodynamic calculation, including the frequency analysis and single-point energy correction."
            },
            "name": "combined_lot_solvent",
            "in": "query"
          },
          {
            "description": "Query for maximum value of electronic_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Electronic Energy Max",
              "description": "Query for maximum value of electronic_energy"
            },
            "name": "electronic_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of electronic_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Electronic Energy Min",
              "description": "Query for minimum value of electronic_energy"
            },
            "name": "electronic_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of zero_point_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Zero Point Energy Max",
              "description": "Query for maximum value of zero_point_energy"
            },
            "name": "zero_point_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of zero_point_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Zero Point Energy Min",
              "description": "Query for minimum value of zero_point_energy"
            },
            "name": "zero_point_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of total_enthalpy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Enthalpy Max",
              "description": "Query for maximum value of total_enthalpy"
            },
            "name": "total_enthalpy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of total_enthalpy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Enthalpy Min",
              "description": "Query for minimum value of total_enthalpy"
            },
            "name": "total_enthalpy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of total_entropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Entropy Max",
              "description": "Query for maximum value of total_entropy"
            },
            "name": "total_entropy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of total_entropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Total Entropy Min",
              "description": "Query for minimum value of total_entropy"
            },
            "name": "total_entropy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of translational_enthalpy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Translational Enthalpy Max",
              "description": "Query for maximum value of translational_enthalpy"
            },
            "name": "translational_enthalpy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of translational_enthalpy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Translational Enthalpy Min",
              "description": "Query for minimum value of translational_enthalpy"
            },
            "name": "translational_enthalpy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of translational_entropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Translational Entropy Max",
              "description": "Query for maximum value of translational_entropy"
            },
            "name": "translational_entropy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of translational_entropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Translational Entropy Min",
              "description": "Query for minimum value of translational_entropy"
            },
            "name": "translational_entropy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of rotational_enthalpy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Rotational Enthalpy Max",
              "description": "Query for maximum value of rotational_enthalpy"
            },
            "name": "rotational_enthalpy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of rotational_enthalpy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Rotational Enthalpy Min",
              "description": "Query for minimum value of rotational_enthalpy"
            },
            "name": "rotational_enthalpy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of rotational_entropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Rotational Entropy Max",
              "description": "Query for maximum value of rotational_entropy"
            },
            "name": "rotational_entropy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of rotational_entropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Rotational Entropy Min",
              "description": "Query for minimum value of rotational_entropy"
            },
            "name": "rotational_entropy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of vibrational_enthalpy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Vibrational Enthalpy Max",
              "description": "Query for maximum value of vibrational_enthalpy"
            },
            "name": "vibrational_enthalpy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of vibrational_enthalpy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Vibrational Enthalpy Min",
              "description": "Query for minimum value of vibrational_enthalpy"
            },
            "name": "vibrational_enthalpy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of vibrational_entropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Vibrational Entropy Max",
              "description": "Query for maximum value of vibrational_entropy"
            },
            "name": "vibrational_entropy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of vibrational_entropy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Vibrational Entropy Min",
              "description": "Query for minimum value of vibrational_entropy"
            },
            "name": "vibrational_entropy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of free_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Free Energy Max",
              "description": "Query for maximum value of free_energy"
            },
            "name": "free_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of free_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Free Energy Min",
              "description": "Query for minimum value of free_energy"
            },
            "name": "free_energy_min",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Fields to project from MoleculeThermoDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `electronic_energy` `correction` `base_level_of_theory` `base_solvent` `base_lot_solvent` `correction_level_of_theory` `correction_solvent` `correction_lot_solvent` `combined_lot_solvent` `zero_point_energy` `rt` `total_enthalpy` `total_entropy` `translational_enthalpy` `translational_entropy` `rotational_enthalpy` `rotational_entropy` `vibrational_enthalpy` `vibrational_entropy` `free_energy`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculeThermoDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `electronic_energy` `correction` `base_level_of_theory` `base_solvent` `base_lot_solvent` `correction_level_of_theory` `correction_solvent` `correction_lot_solvent` `combined_lot_solvent` `zero_point_energy` `rt` `total_enthalpy` `total_entropy` `translational_enthalpy` `translational_entropy` `rotational_enthalpy` `rotational_entropy` `vibrational_enthalpy` `vibrational_entropy` `free_energy`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a MoleculeThermoDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculeThermoDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/vibrations/{property_id}/": {
      "get": {
        "tags": ["Molecules Vibrations"],
        "summary": "Get a VibrationDoc document by by property_id",
        "operationId": "get_by_key_molecules_vibrations__property_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The property_id of the VibrationDoc to get"
            },
            "name": "property_id",
            "in": "path"
          },
          {
            "description": "Fields to project from VibrationDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecule` `frequencies` `frequency_modes` `ir_intensities` `ir_activities`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from VibrationDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecule` `frequencies` `frequency_modes` `ir_intensities` `ir_activities`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a VibrationDoc document by property_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_VibrationDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/vibrations/": {
      "get": {
        "tags": ["Molecules Vibrations"],
        "summary": "Get VibrationDoc documents",
        "operationId": "search_molecules_vibrations__get",
        "parameters": [
          {
            "description": "Comma-separated list of MPculeIDs to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of MPculeIDs to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Level Of Theory",
              "description": "Level of theory used for calculation. Default is None, meaning that level of theorywill not be queried."
            },
            "name": "level_of_theory",
            "in": "query"
          },
          {
            "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Solvent",
              "description": "Solvent data used for calculation. Default is None, meaning that solvent will not bequeried."
            },
            "name": "solvent",
            "in": "query"
          },
          {
            "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Lot Solvent",
              "description": "String representing the combination of level of theory and solvent. Default is None,meaning lot_solvent will not be queried."
            },
            "name": "lot_solvent",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Query by molecular charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query by molecular charge"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query by molecular spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query by molecular spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Comma-separated list of property_id values to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Property Ids",
              "description": "Comma-separated list of property_id values to query on"
            },
            "name": "property_ids",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Fields to project from VibrationDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecule` `frequencies` `frequency_modes` `ir_intensities` `ir_activities`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from VibrationDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecule` `frequencies` `frequency_modes` `ir_intensities` `ir_activities`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a VibrationDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_VibrationDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/summary/{molecule_id}/": {
      "get": {
        "tags": ["Molecules Summary"],
        "summary": "Get a MoleculeSummaryDoc document by by molecule_id",
        "operationId": "get_by_key_molecules_summary__molecule_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The molecule_id of the MoleculeSummaryDoc to get"
            },
            "name": "molecule_id",
            "in": "path"
          },
          {
            "description": "Fields to project from MoleculeSummaryDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_ids` `similar_molecules` `constituent_molecules` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `thermo_property_ids` `thermo_levels_of_theory` `electronic_energy` `zero_point_energy` `rt` `total_enthalpy` `total_entropy` `translational_enthalpy` `translational_entropy` `rotational_enthalpy` `rotational_entropy` `vibrational_enthalpy` `vibrational_entropy` `free_energy` `vibration_property_ids` `vibration_levels_of_theory` `frequencies` `frequency_modes` `ir_intensities` `ir_activities` `orbitals_property_ids` `orbitals_levels_of_theory` `open_shell` `nbo_population` `nbo_lone_pairs` `nbo_bonds` `nbo_interactions` `alpha_population` `beta_population` `alpha_lone_pairs` `beta_lone_pairs` `alpha_bonds` `beta_bonds` `alpha_interactions` `beta_interactions` `partial_charges_property_ids` `partial_charges_levels_of_theory` `partial_charges` `partial_spins_property_ids` `partial_spins_levels_of_theory` `partial_spins` `bonding_property_ids` `bonding_levels_of_theory` `molecule_graph` `bond_types` `bonds` `bonds_nometal` `redox_property_ids` `redox_levels_of_theory` `electron_affinity` `ea_task_id` `ionization_energy` `ie_task_id` `reduction_free_energy` `red_molecule_id` `oxidation_free_energy` `ox_molecule_id` `reduction_potential` `oxidation_potential` `binding_partial_charges_property_id` `binding_partial_spins_property_id` `binding_partial_charges_lot_solvent` `binding_partial_spins_lot_solvent` `binding_charge_spin_method` `binding_bonding_property_id` `binding_bonding_lot_solvent` `binding_bonding_method` `binding_thermo_property_id` `binding_thermo_lot_solvent` `binding_thermo_correction_lot_solvent` `binding_thermo_combined_lot_solvent` `binding_data` `has_props`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculeSummaryDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_ids` `similar_molecules` `constituent_molecules` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `thermo_property_ids` `thermo_levels_of_theory` `electronic_energy` `zero_point_energy` `rt` `total_enthalpy` `total_entropy` `translational_enthalpy` `translational_entropy` `rotational_enthalpy` `rotational_entropy` `vibrational_enthalpy` `vibrational_entropy` `free_energy` `vibration_property_ids` `vibration_levels_of_theory` `frequencies` `frequency_modes` `ir_intensities` `ir_activities` `orbitals_property_ids` `orbitals_levels_of_theory` `open_shell` `nbo_population` `nbo_lone_pairs` `nbo_bonds` `nbo_interactions` `alpha_population` `beta_population` `alpha_lone_pairs` `beta_lone_pairs` `alpha_bonds` `beta_bonds` `alpha_interactions` `beta_interactions` `partial_charges_property_ids` `partial_charges_levels_of_theory` `partial_charges` `partial_spins_property_ids` `partial_spins_levels_of_theory` `partial_spins` `bonding_property_ids` `bonding_levels_of_theory` `molecule_graph` `bond_types` `bonds` `bonds_nometal` `redox_property_ids` `redox_levels_of_theory` `electron_affinity` `ea_task_id` `ionization_energy` `ie_task_id` `reduction_free_energy` `red_molecule_id` `oxidation_free_energy` `ox_molecule_id` `reduction_potential` `oxidation_potential` `binding_partial_charges_property_id` `binding_partial_spins_property_id` `binding_partial_charges_lot_solvent` `binding_partial_spins_lot_solvent` `binding_charge_spin_method` `binding_bonding_property_id` `binding_bonding_lot_solvent` `binding_bonding_method` `binding_thermo_property_id` `binding_thermo_lot_solvent` `binding_thermo_correction_lot_solvent` `binding_thermo_combined_lot_solvent` `binding_data` `has_props`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a MoleculeSummaryDoc document by molecule_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculeSummaryDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/summary/": {
      "get": {
        "tags": ["Molecules Summary"],
        "summary": "Get MoleculeSummaryDoc documents",
        "operationId": "search_molecules_summary__get",
        "parameters": [
          {
            "description": "Comma-separated list of molecule_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Molecule Ids",
              "description": "Comma-separated list of molecule_ids to query on"
            },
            "name": "molecule_ids",
            "in": "query"
          },
          {
            "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Query by alphabetical formula. A comma delimited string list of alphabetical formulas can also be provided."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Chemsys",
              "description": "A comma delimited string list of chemical systems. Wildcards for unknown elements only supported for single chemsys queries"
            },
            "name": "chemsys",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Query by excluded elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exclude Elements",
              "description": "Query by excluded elements in the material composition as a comma-separated list"
            },
            "name": "exclude_elements",
            "in": "query"
          },
          {
            "description": "Comma-delimited list of possible properties given by HasPropsEnum to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Has Props",
              "description": "Comma-delimited list of possible properties given by HasPropsEnum to search for."
            },
            "name": "has_props",
            "in": "query"
          },
          {
            "description": "Query by molecular charge",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge",
              "description": "Query by molecular charge"
            },
            "name": "charge",
            "in": "query"
          },
          {
            "description": "Query by molecular spin multiplicity.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Spin Multiplicity",
              "description": "Query by molecular spin multiplicity."
            },
            "name": "spin_multiplicity",
            "in": "query"
          },
          {
            "description": "Whether the material is marked as deprecated",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Deprecated",
              "description": "Whether the material is marked as deprecated",
              "default": false
            },
            "name": "deprecated",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Query for maximum value of Number of Elements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Max",
              "description": "Query for maximum value of Number of Elements"
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of Number of Elements",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Min",
              "description": "Query for minimum value of Number of Elements"
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements",
              "description": "Query for Number of Elements being equal to an exact value"
            },
            "name": "nelements",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being not equal to an exact value",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Nelements Not Eq",
              "description": "Query for Number of Elements being not equal to an exact value"
            },
            "name": "nelements_not_eq",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being any of these values. Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Eq Any",
              "description": "Query for Number of Elements being any of these values. Provide a comma separated list."
            },
            "name": "nelements_eq_any",
            "in": "query"
          },
          {
            "description": "Query for Number of Elements being not any of these values.                             Provide a comma separated list.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Nelements Neq Any",
              "description": "Query for Number of Elements being not any of these values.                             Provide a comma separated list."
            },
            "name": "nelements_neq_any",
            "in": "query"
          },
          {
            "description": "Query for maximum value of electron_affinity",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Electron Affinity Max",
              "description": "Query for maximum value of electron_affinity"
            },
            "name": "electron_affinity_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of electron_affinity",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Electron Affinity Min",
              "description": "Query for minimum value of electron_affinity"
            },
            "name": "electron_affinity_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of ionization_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Ionization Energy Max",
              "description": "Query for maximum value of ionization_energy"
            },
            "name": "ionization_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of ionization_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Ionization Energy Min",
              "description": "Query for minimum value of ionization_energy"
            },
            "name": "ionization_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of reduction_free_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Reduction Free Energy Max",
              "description": "Query for maximum value of reduction_free_energy"
            },
            "name": "reduction_free_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of reduction_free_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Reduction Free Energy Min",
              "description": "Query for minimum value of reduction_free_energy"
            },
            "name": "reduction_free_energy_min",
            "in": "query"
          },
          {
            "description": "Query for maximum value of oxidation_free_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Oxidation Free Energy Max",
              "description": "Query for maximum value of oxidation_free_energy"
            },
            "name": "oxidation_free_energy_max",
            "in": "query"
          },
          {
            "description": "Query for minimum value of oxidation_free_energy",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Oxidation Free Energy Min",
              "description": "Query for minimum value of oxidation_free_energy"
            },
            "name": "oxidation_free_energy_min",
            "in": "query"
          },
          {
            "description": "Fields to project from MoleculeSummaryDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_ids` `similar_molecules` `constituent_molecules` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `thermo_property_ids` `thermo_levels_of_theory` `electronic_energy` `zero_point_energy` `rt` `total_enthalpy` `total_entropy` `translational_enthalpy` `translational_entropy` `rotational_enthalpy` `rotational_entropy` `vibrational_enthalpy` `vibrational_entropy` `free_energy` `vibration_property_ids` `vibration_levels_of_theory` `frequencies` `frequency_modes` `ir_intensities` `ir_activities` `orbitals_property_ids` `orbitals_levels_of_theory` `open_shell` `nbo_population` `nbo_lone_pairs` `nbo_bonds` `nbo_interactions` `alpha_population` `beta_population` `alpha_lone_pairs` `beta_lone_pairs` `alpha_bonds` `beta_bonds` `alpha_interactions` `beta_interactions` `partial_charges_property_ids` `partial_charges_levels_of_theory` `partial_charges` `partial_spins_property_ids` `partial_spins_levels_of_theory` `partial_spins` `bonding_property_ids` `bonding_levels_of_theory` `molecule_graph` `bond_types` `bonds` `bonds_nometal` `redox_property_ids` `redox_levels_of_theory` `electron_affinity` `ea_task_id` `ionization_energy` `ie_task_id` `reduction_free_energy` `red_molecule_id` `oxidation_free_energy` `ox_molecule_id` `reduction_potential` `oxidation_potential` `binding_partial_charges_property_id` `binding_partial_spins_property_id` `binding_partial_charges_lot_solvent` `binding_partial_spins_lot_solvent` `binding_charge_spin_method` `binding_bonding_property_id` `binding_bonding_lot_solvent` `binding_bonding_method` `binding_thermo_property_id` `binding_thermo_lot_solvent` `binding_thermo_correction_lot_solvent` `binding_thermo_combined_lot_solvent` `binding_data` `has_props`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculeSummaryDoc as a list of comma separated strings.                    Fields include: `builder_meta` `charge` `spin_multiplicity` `natoms` `elements` `nelements` `nelectrons` `composition` `composition_reduced` `formula_alphabetical` `formula_pretty` `formula_anonymous` `chemsys` `symmetry` `property_name` `property_id` `molecule_id` `deprecated` `deprecation_reasons` `level_of_theory` `solvent` `lot_solvent` `last_updated` `origins` `warnings` `molecules` `molecule_levels_of_theory` `species_hash` `coord_hash` `inchi` `inchi_key` `task_ids` `similar_molecules` `constituent_molecules` `unique_calc_types` `unique_task_types` `unique_levels_of_theory` `unique_solvents` `unique_lot_solvents` `thermo_property_ids` `thermo_levels_of_theory` `electronic_energy` `zero_point_energy` `rt` `total_enthalpy` `total_entropy` `translational_enthalpy` `translational_entropy` `rotational_enthalpy` `rotational_entropy` `vibrational_enthalpy` `vibrational_entropy` `free_energy` `vibration_property_ids` `vibration_levels_of_theory` `frequencies` `frequency_modes` `ir_intensities` `ir_activities` `orbitals_property_ids` `orbitals_levels_of_theory` `open_shell` `nbo_population` `nbo_lone_pairs` `nbo_bonds` `nbo_interactions` `alpha_population` `beta_population` `alpha_lone_pairs` `beta_lone_pairs` `alpha_bonds` `beta_bonds` `alpha_interactions` `beta_interactions` `partial_charges_property_ids` `partial_charges_levels_of_theory` `partial_charges` `partial_spins_property_ids` `partial_spins_levels_of_theory` `partial_spins` `bonding_property_ids` `bonding_levels_of_theory` `molecule_graph` `bond_types` `bonds` `bonds_nometal` `redox_property_ids` `redox_levels_of_theory` `electron_affinity` `ea_task_id` `ionization_energy` `ie_task_id` `reduction_free_energy` `red_molecule_id` `oxidation_free_energy` `ox_molecule_id` `reduction_potential` `oxidation_potential` `binding_partial_charges_property_id` `binding_partial_spins_property_id` `binding_partial_charges_lot_solvent` `binding_partial_spins_lot_solvent` `binding_charge_spin_method` `binding_bonding_property_id` `binding_bonding_lot_solvent` `binding_bonding_method` `binding_thermo_property_id` `binding_thermo_lot_solvent` `binding_thermo_correction_lot_solvent` `binding_thermo_combined_lot_solvent` `binding_data` `has_props`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a MoleculeSummaryDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculeSummaryDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/jcesr/{task_id}/": {
      "get": {
        "tags": ["JCESR Electrolyte Genome"],
        "summary": "Get a MoleculesDoc document by by task_id",
        "operationId": "get_by_key_molecules_jcesr__task_id___get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "The task_id of the MoleculesDoc to get"
            },
            "name": "task_id",
            "in": "path"
          },
          {
            "description": "Fields to project from MoleculesDoc as a list of comma separated strings.                    Fields include: `elements` `nelements` `EA` `IE` `charge` `pointgroup` `smiles` `task_id` `molecule` `formula_pretty` `svg`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculesDoc as a list of comma separated strings.                    Fields include: `elements` `nelements` `EA` `IE` `charge` `pointgroup` `smiles` `task_id` `molecule` `formula_pretty` `svg`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a MoleculesDoc document by task_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculesDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/molecules/jcesr/": {
      "get": {
        "tags": ["JCESR Electrolyte Genome"],
        "summary": "Get MoleculesDoc documents",
        "operationId": "search_molecules_jcesr__get",
        "parameters": [
          {
            "description": "Maximum value for the number of elements.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Nelements Max",
              "description": "Maximum value for the number of elements."
            },
            "name": "nelements_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the number of elements.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Nelements Min",
              "description": "Minimum value for the number of elements."
            },
            "name": "nelements_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the electron affinity in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Ea Max",
              "description": "Maximum value for the electron affinity in eV."
            },
            "name": "EA_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the electron affinity in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Ea Min",
              "description": "Minimum value for the electron affinity in eV."
            },
            "name": "EA_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the ionization energy in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Ie Max",
              "description": "Maximum value for the ionization energy in eV."
            },
            "name": "IE_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the ionization energy in eV.",
            "required": false,
            "schema": {
              "type": "number",
              "title": "Ie Min",
              "description": "Minimum value for the ionization energy in eV."
            },
            "name": "IE_min",
            "in": "query"
          },
          {
            "description": "Maximum value for the charge in +e.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge Max",
              "description": "Maximum value for the charge in +e."
            },
            "name": "charge_max",
            "in": "query"
          },
          {
            "description": "Minimum value for the charge in +e.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Charge Min",
              "description": "Minimum value for the charge in +e."
            },
            "name": "charge_min",
            "in": "query"
          },
          {
            "description": "Point of the molecule in Schoenflies notation.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Pointgroup",
              "description": "Point of the molecule in Schoenflies notation."
            },
            "name": "pointgroup",
            "in": "query"
          },
          {
            "description": "The simplified molecular input line-entry system (SMILES)             representation of the molecule.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Smiles",
              "description": "The simplified molecular input line-entry system (SMILES)             representation of the molecule."
            },
            "name": "smiles",
            "in": "query"
          },
          {
            "description": "Query by elements in the material composition as a comma-separated list",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Elements",
              "description": "Query by elements in the material composition as a comma-separated list"
            },
            "name": "elements",
            "in": "query"
          },
          {
            "description": "Chemical formula of the molecule. A comma-separated list of formulas is also accepted.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Formula",
              "description": "Chemical formula of the molecule. A comma-separated list of formulas is also accepted."
            },
            "name": "formula",
            "in": "query"
          },
          {
            "description": "Comma-separated list of task_ids to query on",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Task Ids",
              "description": "Comma-separated list of task_ids to query on"
            },
            "name": "task_ids",
            "in": "query"
          },
          {
            "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort Fields",
              "description": "Comma delimited fields to sort with. Prefixing '-' to a field will force a sort in descending order."
            },
            "name": "_sort_fields",
            "in": "query"
          },
          {
            "description": "Page number to request (takes precedent over _limit and _skip).",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Page",
              "description": "Page number to request (takes precedent over _limit and _skip)."
            },
            "name": "_page",
            "in": "query"
          },
          {
            "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Per Page",
              "description": "Number of entries to show per page (takes precedent over _limit and _skip). Limited to 1000.",
              "default": 100
            },
            "name": "_per_page",
            "in": "query"
          },
          {
            "description": "Number of entries to skip in the search.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Skip",
              "description": "Number of entries to skip in the search.",
              "default": 0
            },
            "name": "_skip",
            "in": "query"
          },
          {
            "description": "Max number of entries to return in a single query. Limited to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "description": "Max number of entries to return in a single query. Limited to 1000.",
              "default": 100
            },
            "name": "_limit",
            "in": "query"
          },
          {
            "description": "Fields to project from MoleculesDoc as a list of comma separated strings.                    Fields include: `elements` `nelements` `EA` `IE` `charge` `pointgroup` `smiles` `task_id` `molecule` `formula_pretty` `svg`",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Fields",
              "description": "Fields to project from MoleculesDoc as a list of comma separated strings.                    Fields include: `elements` `nelements` `EA` `IE` `charge` `pointgroup` `smiles` `task_id` `molecule` `formula_pretty` `svg`"
            },
            "name": "_fields",
            "in": "query"
          },
          {
            "description": "Include all fields.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": " All Fields",
              "description": "Include all fields.",
              "default": false
            },
            "name": "_all_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search for a MoleculesDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response_MoleculesDoc_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AbsorptionDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "Calculation id"
          },
          "energies": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Energies",
            "description": "Absorption energy in eV starting from 0"
          },
          "energy_max": {
            "type": "number",
            "title": "Energy Max",
            "description": "Maximum energy"
          },
          "absorption_coefficient": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Absorption Coefficient",
            "description": "Absorption coefficient in cm^-1"
          },
          "average_imaginary_dielectric": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Average Imaginary Dielectric",
            "description": "Imaginary part of the dielectric function corresponding to the energies"
          },
          "average_real_dielectric": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Average Real Dielectric",
            "description": "Real part of the dielectric function corresponding to the energies"
          },
          "bandgap": {
            "type": "number",
            "title": "Bandgap",
            "description": "The electronic band gap"
          },
          "nkpoints": {
            "type": "number",
            "title": "Nkpoints",
            "description": "The number of kpoints used in the calculation"
          }
        },
        "type": "object",
        "title": "AbsorptionDoc",
        "description": "Absorption spectrum based on frequency dependent dielectric function calculations."
      },
      "AlloyPairDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "alloy_pair": {
            "properties": {
              "@class": { "type": "string", "enum": ["AlloyPair"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.analysis.alloys.core"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Alloy Pair"
          },
          "pair_id": { "type": "string", "title": "Pair Id" }
        },
        "type": "object",
        "title": "AlloyPairDoc",
        "description": "Base Model for default emmet data"
      },
      "AnalysisDoc": {
        "properties": {
          "delta_volume": {
            "type": "number",
            "title": "Volume Change",
            "description": "Volume change for the calculation."
          },
          "delta_volume_percent": {
            "type": "number",
            "title": "Volume Change Percent",
            "description": "Percent volume change for the calculation."
          },
          "max_force": {
            "type": "number",
            "title": "Max Force",
            "description": "Maximum force on any atom at the end of the calculation."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Calculation Warnings",
            "description": "Warnings issued after analysis."
          },
          "errors": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Calculation Errors",
            "description": "Errors issued after analysis."
          }
        },
        "type": "object",
        "title": "AnalysisDoc"
      },
      "Author": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "email": { "type": "string", "title": "Email" }
        },
        "type": "object",
        "title": "Author",
        "description": "Author information"
      },
      "BSObjectDoc": {
        "properties": {
          "task_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Task Id",
            "description": "The source calculation (task) ID that this band structure comes from. This has the same form as a Materials Project ID.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "The timestamp when this calculation was last updated"
          },
          "data": {
            "anyOf": [
              { "type": "object" },
              {
                "properties": {
                  "@class": {
                    "type": "string",
                    "enum": ["BandStructureSymmLine"]
                  },
                  "@module": {
                    "type": "string",
                    "enum": ["pymatgen.electronic_structure.bandstructure"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              }
            ],
            "title": "Data",
            "description": "The band structure object for the given calculation ID"
          }
        },
        "type": "object",
        "title": "BSObjectDoc",
        "description": "Band object document."
      },
      "BSPathType": {
        "enum": ["setyawan_curtarolo", "hinuma", "latimer_munro"],
        "title": "BSPathType",
        "description": "An enumeration."
      },
      "BandStructureSummaryData": {
        "properties": {
          "task_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Task Id",
            "description": "The source calculation (task) ID for the electronic structure data. This has the same form as a Materials Project ID.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "band_gap": {
            "type": "number",
            "title": "Band Gap",
            "description": "Band gap energy in eV."
          },
          "cbm": {
            "anyOf": [{ "type": "number" }, { "type": "object" }],
            "title": "Cbm",
            "description": "Conduction band minimum data."
          },
          "vbm": {
            "anyOf": [{ "type": "number" }, { "type": "object" }],
            "title": "Vbm",
            "description": "Valence band maximum data."
          },
          "efermi": {
            "type": "number",
            "title": "Efermi",
            "description": "Fermi energy in eV."
          },
          "is_gap_direct": {
            "type": "boolean",
            "title": "Is Gap Direct",
            "description": "Whether the band gap is direct."
          },
          "is_metal": {
            "type": "boolean",
            "title": "Is Metal",
            "description": "Whether the material is a metal."
          },
          "magnetic_ordering": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/Ordering" }
            ],
            "title": "Magnetic Ordering",
            "description": "Magnetic ordering of the calculation."
          },
          "nbands": {
            "type": "number",
            "title": "Nbands",
            "description": "Number of bands."
          },
          "equivalent_labels": {
            "type": "object",
            "title": "Equivalent Labels",
            "description": "Equivalent k-point labels in other k-path conventions."
          },
          "direct_gap": {
            "type": "number",
            "title": "Direct Gap",
            "description": "Direct gap energy in eV."
          }
        },
        "type": "object",
        "title": "BandStructureSummaryData"
      },
      "BandstructureData": {
        "properties": {
          "setyawan_curtarolo": {
            "allOf": [
              { "$ref": "#/components/schemas/BandStructureSummaryData" }
            ],
            "title": "Setyawan Curtarolo",
            "description": "Band structure summary data using the Setyawan-Curtarolo path convention."
          },
          "hinuma": {
            "allOf": [
              { "$ref": "#/components/schemas/BandStructureSummaryData" }
            ],
            "title": "Hinuma",
            "description": "Band structure summary data using the Hinuma et al. path convention."
          },
          "latimer_munro": {
            "allOf": [
              { "$ref": "#/components/schemas/BandStructureSummaryData" }
            ],
            "title": "Latimer Munro",
            "description": "Band structure summary data using the Latimer-Munro path convention."
          }
        },
        "type": "object",
        "title": "BandstructureData"
      },
      "BatteryType": {
        "type": "string",
        "enum": ["insertion", "conversion"],
        "title": "BatteryType",
        "description": "Enum for battery type"
      },
      "BondingDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "structure_graph": {
            "properties": {
              "@class": { "type": "string", "enum": ["StructureGraph"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.analysis.graphs"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure Graph",
            "description": "Structure graph"
          },
          "method": {
            "type": "string",
            "title": "Method",
            "description": "Method used to compute structure graph."
          },
          "bond_types": {
            "additionalProperties": {
              "items": { "type": "number" },
              "type": "array"
            },
            "type": "object",
            "title": "Bond Types",
            "description": "Dictionary of bond types to their length, e.g. a Fe-O to a list of the lengths of Fe-O bonds in Angstrom."
          },
          "bond_length_stats": {
            "type": "object",
            "title": "Bond Length Stats",
            "description": "Dictionary of statistics of bonds in structure with keys all_weights, min, max, mean and variance."
          },
          "coordination_envs": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Coordination Envs",
            "description": "List of co-ordination environments, e.g. ['Mo-S(6)', 'S-Mo(3)']."
          },
          "coordination_envs_anonymous": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Coordination Envs Anonymous",
            "description": "List of co-ordination environments without elements present, e.g. ['A-B(6)', 'A-B(3)']."
          }
        },
        "type": "object",
        "title": "BondingDoc",
        "description": "Structure graphs representing chemical bonds calculated from structure\nusing near neighbor strategies as defined in pymatgen."
      },
      "Calculation": {
        "properties": {
          "dir_name": {
            "type": "string",
            "title": "Dir Name",
            "description": "The directory for this VASP calculation"
          },
          "vasp_version": {
            "type": "string",
            "title": "Vasp Version",
            "description": "VASP version used to perform the calculation"
          },
          "has_vasp_completed": {
            "anyOf": [
              { "$ref": "#/components/schemas/TaskState" },
              { "type": "boolean" }
            ],
            "title": "Has Vasp Completed",
            "description": "Whether VASP completed the calculation successfully"
          },
          "input": {
            "allOf": [{ "$ref": "#/components/schemas/CalculationInput" }],
            "title": "Input",
            "description": "VASP input settings for the calculation"
          },
          "output": {
            "allOf": [{ "$ref": "#/components/schemas/CalculationOutput" }],
            "title": "Output",
            "description": "The VASP calculation output"
          },
          "completed_at": {
            "type": "string",
            "title": "Completed At",
            "description": "Timestamp for when the calculation was completed"
          },
          "task_name": {
            "type": "string",
            "title": "Task Name",
            "description": "Name of task given by custodian (e.g., relax1, relax2)"
          },
          "output_file_paths": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Output File Paths",
            "description": "Paths (relative to dir_name) of the VASP output files associated with this calculation"
          },
          "bader": {
            "type": "object",
            "title": "Bader",
            "description": "Output from the bader software"
          },
          "run_type": {
            "allOf": [{ "$ref": "#/components/schemas/RunType" }],
            "description": "Calculation run type (e.g., HF, HSE06, PBE)"
          },
          "task_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/emmet__core__vasp__calc_types__enums__TaskType"
              }
            ],
            "description": "Calculation task type (e.g., Structure Optimization)."
          },
          "calc_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/emmet__core__vasp__calc_types__enums__CalcType"
              }
            ],
            "description": "Return calculation type (run type + task_type)."
          }
        },
        "type": "object",
        "title": "Calculation",
        "description": "Full VASP calculation inputs and outputs."
      },
      "CalculationInput": {
        "properties": {
          "incar": {
            "type": "object",
            "title": "Incar",
            "description": "INCAR parameters for the calculation"
          },
          "kpoints": {
            "anyOf": [
              { "type": "object" },
              {
                "properties": {
                  "@class": { "type": "string", "enum": ["Kpoints"] },
                  "@module": {
                    "type": "string",
                    "enum": ["pymatgen.io.vasp.inputs"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              }
            ],
            "title": "Kpoints",
            "description": "KPOINTS for the calculation"
          },
          "nkpoints": {
            "type": "integer",
            "title": "Nkpoints",
            "description": "Total number of k-points"
          },
          "potcar": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Potcar",
            "description": "POTCAR symbols in the calculation"
          },
          "potcar_spec": {
            "items": { "$ref": "#/components/schemas/PotcarSpec" },
            "type": "array",
            "title": "Potcar Spec",
            "description": "Title and hash of POTCAR files used in the calculation"
          },
          "potcar_type": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Potcar Type",
            "description": "List of POTCAR functional types."
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "description": "Parameters from vasprun"
          },
          "lattice_rec": {
            "properties": {
              "@class": { "type": "string", "enum": ["Lattice"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.lattice"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Lattice Rec",
            "description": "Reciprocal lattice of the structure"
          },
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure",
            "description": "Input structure for the calculation"
          },
          "is_hubbard": {
            "type": "boolean",
            "title": "Is Hubbard",
            "description": "Is this a Hubbard +U calculation"
          },
          "hubbards": {
            "type": "object",
            "title": "Hubbards",
            "description": "The hubbard parameters used"
          }
        },
        "type": "object",
        "title": "CalculationInput",
        "description": "Document defining VASP calculation inputs."
      },
      "CalculationOutput": {
        "properties": {
          "energy": {
            "type": "number",
            "title": "Energy",
            "description": "The final total DFT energy for the calculation"
          },
          "energy_per_atom": {
            "type": "number",
            "title": "Energy Per Atom",
            "description": "The final DFT energy per atom for the calculation"
          },
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure",
            "description": "The final structure from the calculation"
          },
          "efermi": {
            "type": "number",
            "title": "Efermi",
            "description": "The Fermi level from the calculation in eV"
          },
          "is_metal": {
            "type": "boolean",
            "title": "Is Metal",
            "description": "Whether the system is metallic"
          },
          "bandgap": {
            "type": "number",
            "title": "Bandgap",
            "description": "The band gap from the calculation in eV"
          },
          "cbm": {
            "type": "number",
            "title": "Cbm",
            "description": "The conduction band minimum in eV (if system is not metallic)"
          },
          "vbm": {
            "type": "number",
            "title": "Vbm",
            "description": "The valence band maximum in eV (if system is not metallic)"
          },
          "is_gap_direct": {
            "type": "boolean",
            "title": "Is Gap Direct",
            "description": "Whether the band gap is direct"
          },
          "direct_gap": {
            "type": "number",
            "title": "Direct Gap",
            "description": "Direct band gap in eV (if system is not metallic)"
          },
          "transition": {
            "type": "string",
            "title": "Transition",
            "description": "Band gap transition given by CBM and VBM k-points"
          },
          "mag_density": {
            "type": "number",
            "title": "Mag Density",
            "description": "The magnetization density, defined as total_mag/volume (units of A^-3)"
          },
          "epsilon_static": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Epsilon Static",
            "description": "The high-frequency dielectric constant"
          },
          "epsilon_static_wolfe": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Epsilon Static Wolfe",
            "description": "The high-frequency dielectric constant w/o local field effects"
          },
          "epsilon_ionic": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Epsilon Ionic",
            "description": "The ionic part of the dielectric constant"
          },
          "frequency_dependent_dielectric": {
            "allOf": [
              { "$ref": "#/components/schemas/FrequencyDependentDielectric" }
            ],
            "title": "Frequency Dependent Dielectric",
            "description": "Frequency-dependent dielectric information from an LOPTICS calculation"
          },
          "ionic_steps": {
            "items": { "$ref": "#/components/schemas/IonicStep" },
            "type": "array",
            "title": "Ionic Steps",
            "description": "Energy, forces, structure, etc. for each ionic step"
          },
          "locpot": {
            "additionalProperties": {
              "items": { "type": "number" },
              "type": "array"
            },
            "type": "object",
            "title": "Locpot",
            "description": "Average of the local potential along the crystal axes"
          },
          "outcar": {
            "type": "object",
            "title": "Outcar",
            "description": "Information extracted from the OUTCAR file"
          },
          "force_constants": {
            "items": {
              "items": {
                "items": [
                  {
                    "items": [
                      { "type": "number" },
                      { "type": "number" },
                      { "type": "number" }
                    ],
                    "type": "array",
                    "maxItems": 3,
                    "minItems": 3
                  },
                  {
                    "items": [
                      { "type": "number" },
                      { "type": "number" },
                      { "type": "number" }
                    ],
                    "type": "array",
                    "maxItems": 3,
                    "minItems": 3
                  },
                  {
                    "items": [
                      { "type": "number" },
                      { "type": "number" },
                      { "type": "number" }
                    ],
                    "type": "array",
                    "maxItems": 3,
                    "minItems": 3
                  }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              },
              "type": "array"
            },
            "type": "array",
            "title": "Force Constants",
            "description": "Force constants between every pair of atoms in the structure"
          },
          "normalmode_frequencies": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Normalmode Frequencies",
            "description": "Frequencies in THz of the normal modes at Gamma"
          },
          "normalmode_eigenvals": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Normalmode Eigenvals",
            "description": "Normal mode eigenvalues of phonon modes at Gamma. Note the unit changed between VASP 5 and 6."
          },
          "normalmode_eigenvecs": {
            "items": {
              "items": {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              },
              "type": "array"
            },
            "type": "array",
            "title": "Normalmode Eigenvecs",
            "description": "Normal mode eigenvectors of phonon modes at Gamma"
          },
          "elph_displaced_structures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ElectronPhononDisplacedStructures"
              }
            ],
            "title": "Elph Displaced Structures",
            "description": "Electron-phonon displaced structures, generated by setting PHON_LMC = True."
          },
          "dos_properties": {
            "additionalProperties": {
              "additionalProperties": {
                "additionalProperties": { "type": "number" },
                "type": "object"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Dos Properties",
            "description": "Element- and orbital-projected band properties (in eV) for the DOS. All properties are with respect to the Fermi level."
          },
          "run_stats": {
            "allOf": [{ "$ref": "#/components/schemas/RunStatistics" }],
            "title": "Run Stats",
            "description": "Summary of runtime statistics for this calculation"
          }
        },
        "type": "object",
        "title": "CalculationOutput",
        "description": "Document defining VASP calculation outputs."
      },
      "ChemEnvDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "type": "string",
            "title": "Warnings",
            "description": "Warning"
          },
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure",
            "description": "The structure used in the generation of the chemical environment data"
          },
          "valences": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Valences",
            "description": "List of valences for each site in this material to determine cations"
          },
          "species": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Species",
            "description": "List of unique (cationic) species in structure."
          },
          "chemenv_symbol": {
            "items": {
              "type": "string",
              "enum": [
                "S:1",
                "L:2",
                "A:2",
                "TL:3",
                "TY:3",
                "TS:3",
                "T:4",
                "S:4",
                "SY:4",
                "SS:4",
                "PP:5",
                "S:5",
                "T:5",
                "O:6",
                "T:6",
                "PP:6",
                "PB:7",
                "ST:7",
                "ET:7",
                "FO:7",
                "C:8",
                "SA:8",
                "SBT:8",
                "TBT:8",
                "DD:8",
                "DDPN:8",
                "HB:8",
                "BO_1:8",
                "BO_2:8",
                "BO_3:8",
                "TC:9",
                "TT_1:9",
                "TT_2:9",
                "TT_3:9",
                "HD:9",
                "TI:9",
                "SMA:9",
                "SS:9",
                "TO_1:9",
                "TO_2:9",
                "TO_3:9",
                "PP:10",
                "PA:10",
                "SBSA:10",
                "MI:10",
                "BS_1:10",
                "BS_2:10",
                "TBSA:10",
                "PCPA:11",
                "H:11",
                "DI:11",
                "I:12",
                "PBP:12",
                "TT:12",
                "C:12",
                "AC:12",
                "SC:12",
                "HP:12",
                "HA:12",
                "SH:13",
                "DD:20",
                "None"
              ]
            },
            "type": "array",
            "title": "Chemenv Symbol",
            "description": "List of ChemEnv symbols for unique (cationic) species in structure"
          },
          "chemenv_iupac": {
            "items": {
              "type": "string",
              "enum": [
                "TOCT-9",
                "CUS-10",
                "PPR-10",
                "PPRP-11",
                "OCF-7",
                "SAPRT-10",
                "T-4",
                "PAPR-10",
                "DD-20",
                "TPR-6",
                "OCT-8",
                "PP-5",
                "SPY-4",
                "HBPY-9",
                "A-2",
                "TPRT-8",
                "TS-3",
                "SS-4",
                "None",
                "SAPR-8",
                "SPY-5",
                "SAPRS-10",
                "HPR-12",
                "L-2",
                "PPY-6",
                "SP-4",
                "IC-12",
                "HBPY-8",
                "TPY-3",
                "CUS-9",
                "TPRS-8",
                "DD-8",
                "TBPY-5",
                "TP-3",
                "TCA-9",
                "PPRP-12",
                "SAPRS-9",
                "OC-6",
                "PBPY-7",
                "TPRS-7",
                "TPRS-9",
                "CU-8",
                "HAPR-12",
                "TPRT-7"
              ]
            },
            "type": "array",
            "title": "Chemenv Iupac",
            "description": "List of symbols for unique (cationic) species in structure in IUPAC format"
          },
          "chemenv_iucr": {
            "items": {
              "type": "string",
              "enum": [
                "[8do]",
                "[3n]",
                "[6p]",
                "[8cb]",
                "[5by]",
                "[12p]",
                "[6p2c]",
                "[8acb]",
                "[7by]",
                "[3l]",
                "[6p1c]",
                "[12aco]",
                "[2l]",
                "None",
                "[12i]",
                "[6o]",
                "[6p3c]",
                "[4n]",
                "[12co]",
                "[1l]",
                "[5y]",
                "[5l]",
                "[4l]",
                "[2n]",
                "[8by]",
                "[4t]",
                "[12tt]"
              ]
            },
            "type": "array",
            "title": "Chemenv Iucr",
            "description": "List of symbols for unique (cationic) species in structure in IUCR format"
          },
          "chemenv_name": {
            "items": {
              "type": "string",
              "enum": [
                "Pentagonal pyramid",
                "Metabidiminished icosahedron",
                "Square-face bicapped trigonal prism",
                "Pentagonal plane",
                "Cube",
                "Triangular cupola",
                "Heptagonal dipyramid",
                "Pentagonal prism",
                "T-shaped",
                "Square-face capped trigonal prism",
                "Single neighbor",
                "Triangular-face bicapped trigonal prism",
                "Pentagonal-face capped pentagonal antiprism",
                "Trigonal prism",
                "Square cupola",
                "See-saw",
                "Square non-coplanar",
                "Hexagonal bipyramid",
                "Triangular non-coplanar",
                "Tetrahedron",
                "Tricapped triangular prism (one square-face cap and two triangular-face caps)",
                "Square-face monocapped antiprism",
                "Hexagonal antiprism",
                "Linear",
                "Octahedron",
                "Truncated tetrahedron",
                "Square-face capped hexagonal prism",
                "Tricapped octahedron (all 3 cap faces share one atom)",
                "Bicapped square prism (opposite faces)",
                "Bicapped octahedron (cap faces with one edge in common)",
                "Tridiminished icosahedron",
                "Cuboctahedron",
                "Dodecahedron",
                "Dodecahedron with triangular faces - p2345 plane normalized",
                "Square-face capped square prism",
                "Icosahedron",
                "Dodecahedron with triangular faces",
                "Pentagonal bipyramid",
                "Tricapped octahedron (cap faces are aligned)",
                "Square pyramid",
                "Tricapped triangular prism (three square-face caps)",
                "Trigonal bipyramid",
                "Tricapped triangular prism (two square-face caps and one triangular-face cap)",
                "Pentagonal antiprism",
                "Diminished icosahedron",
                "Anticuboctahedron",
                "Trigonal-face bicapped square antiprism",
                "Bicapped octahedron (cap faces with one atom in common)",
                "Hexagonal prism",
                "Angular",
                "Trigonal plane",
                "Square plane",
                "Bicapped octahedron (opposed cap faces)",
                "Bicapped square prism (adjacent faces)",
                "Square antiprism",
                "Pentagonal-face bicapped pentagonal prism",
                "Square-face bicapped square antiprism",
                "Hendecahedron",
                "End-trigonal-face capped trigonal prism",
                "Face-capped octahedron",
                "Tricapped octahedron (all 3 cap faces are sharingone edge of a face)"
              ]
            },
            "type": "array",
            "title": "Chemenv Name",
            "description": "List of text description of coordination environment for unique (cationic) species in structure."
          },
          "chemenv_name_with_alternatives": {
            "items": {
              "type": "string",
              "enum": [
                "Anticuboctahedron (also known as Triangular bicupola)",
                "Trigonal bipyramid (also known as Trigonal dipyramid, Triangular dipyramid)",
                "Octahedron (also known as Square dipyramid, Square bipyramid, Triangular antiprism, Trigonal antiprism)",
                "Diminished icosahedron",
                "Square antiprism (also known as Tetragonal antiprism, Anticube)",
                "Square cupola",
                "Hexagonal bipyramid (also known as Hexagonal dipyramid)",
                "Square-face capped hexagonal prism",
                "Bicapped square prism (opposite faces) (also known as Bicapped cube)",
                "Square-face bicapped trigonal prism",
                "Square non-coplanar",
                "Triangular-face bicapped trigonal prism",
                "Square plane",
                "Trigonal prism (also known as Triangular prism)",
                "Bicapped octahedron (opposed cap faces)",
                "Tricapped octahedron (all 3 cap faces share one atom)",
                "Pentagonal prism",
                "Triangular cupola",
                "Bicapped square prism (adjacent faces) (also known as Bicapped cube)",
                "Cuboctahedron",
                "Tricapped triangular prism (two square-face caps and one triangular-face cap) (also known as Triaugmented trigonal prism)",
                "Square-face capped trigonal prism (also known as Augmented triangular prism)",
                "Tetrahedron (also known as Triangular pyramid, Trigonal pyramid)",
                "Cube (also known as Square prism, Tetragonal prism)",
                "Bicapped octahedron (cap faces with one edge in common)",
                "Bicapped octahedron (cap faces with one atom in common)",
                "Pentagonal pyramid",
                "Dodecahedron with triangular faces (also known as Snub disphenoid, Siamese dodecahedron)",
                "Pentagonal antiprism (also known as Paradiminished icosahedron)",
                "Tricapped octahedron (cap faces are aligned)",
                "Icosahedron",
                "Dodecahedron",
                "Face-capped octahedron (also known as Monocapped octahedron)",
                "Angular",
                "Hendecahedron (also known as Bisymmetric hendecahedron)",
                "Trigonal-face bicapped square antiprism",
                "Pentagonal-face capped pentagonal antiprism (also known as Gyroelongated pentagonal pyramid, Diminished icosahedron, Truncated icosahedron)",
                "Linear",
                "Pentagonal plane (also known as Pentagon)",
                "Tricapped triangular prism (three square-face caps) (also known as Triaugmented trigonal prism)",
                "Tricapped octahedron (all 3 cap faces are sharingone edge of a face)",
                "Heptagonal dipyramid (also known as Heptagonal bipyramid)",
                "T-shaped",
                "Single neighbor",
                "Trigonal plane (also known as Triangular planar)",
                "Dodecahedron with triangular faces - p2345 plane normalized (also known as Snub disphenoid - p2345 plane normalized, Siamese dodecahedron - p2345 plane normalized)",
                "Tricapped triangular prism (one square-face cap and two triangular-face caps) (also known as Triaugmented trigonal prism)",
                "Truncated tetrahedron",
                "Hexagonal prism",
                "Tridiminished icosahedron",
                "Metabidiminished icosahedron",
                "See-saw",
                "Square-face capped square prism (also known as Monocapped cube)",
                "Square pyramid",
                "Pentagonal-face bicapped pentagonal prism",
                "Hexagonal antiprism",
                "Triangular non-coplanar",
                "End-trigonal-face capped trigonal prism (also known as Augmented triangular prism)",
                "Pentagonal bipyramid (also known as Pentagonal dipyramid)",
                "Square-face monocapped antiprism (also known as Gyroelongated square pyramid)",
                "Square-face bicapped square antiprism (also known as Square-face bicapped square anticube, Bicapped anticube, Gyroelongated square dipyramid)"
              ]
            },
            "type": "array",
            "title": "Chemenv Name With Alternatives",
            "description": "List of text description of coordination environment including alternative descriptions for unique (cationic) species in structure."
          },
          "csm": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Csm",
            "description": "Saves the continous symmetry measures for unique (cationic) species in structure"
          },
          "method": {
            "type": "string",
            "title": "Method",
            "description": "Method used to compute chemical environments"
          },
          "mol_from_site_environments": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Molecule"] },
                "@module": {
                  "type": "string",
                  "enum": ["pymatgen.core.structure"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Mol From Site Environments",
            "description": "List of Molecule Objects describing the detected environment."
          },
          "wyckoff_positions": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Wyckoff Positions",
            "description": "List of Wyckoff positions for unique (cationic) species in structure."
          }
        },
        "type": "object",
        "title": "ChemEnvDoc",
        "description": "Coordination environments based on cation-anion bonds computed for all unique cations in this structure.\nIf no oxidation states are available, all bonds will be considered as a fall-back."
      },
      "ChgcarDataDoc": {
        "properties": {
          "fs_id": {
            "type": "string",
            "title": "Fs Id",
            "description": "Unique object ID for the charge density data."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent update to the charge density data."
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The Materials Project ID of the calculation producing the charge density data. This comes in the form: mp-******."
          }
        },
        "type": "object",
        "title": "ChgcarDataDoc",
        "description": "Electron charge density metadata for selected materials."
      },
      "Component": {
        "properties": {
          "formula": {
            "type": "string",
            "title": "Formula",
            "description": "Formula of this component."
          },
          "amount": {
            "type": "string",
            "title": "Amount",
            "description": "Amount of this component."
          },
          "elements": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Elements",
            "description": "Amount of each chemical elements in this component."
          }
        },
        "type": "object",
        "title": "Component"
      },
      "CondensedStructureData": {
        "properties": {
          "mineral": {
            "allOf": [{ "$ref": "#/components/schemas/MineralData" }],
            "title": "Mineral",
            "description": "Matched mineral data for the material."
          },
          "dimensionality": {
            "type": "integer",
            "title": "Dimensionality",
            "description": "Dimensionality of the material."
          },
          "formula": {
            "type": "string",
            "title": "Formula",
            "description": "Formula for the material."
          },
          "spg_symbol": {
            "type": "string",
            "title": "Spg Symbol",
            "description": "Space group symbol of the material."
          },
          "crystal_system": {
            "type": "string",
            "title": "Crystal System",
            "description": "Crystal system of the material."
          }
        },
        "type": "object",
        "title": "CondensedStructureData",
        "description": "Model for data in the condensed structure robocrystallographer field\nMore details: https://hackingmaterials.lbl.gov/robocrystallographer/format.html"
      },
      "Conditions": {
        "properties": {
          "heating_temperature": {
            "items": { "$ref": "#/components/schemas/Value" },
            "type": "array",
            "title": "Heating Temperature",
            "description": "Heating temperatures."
          },
          "heating_time": {
            "items": { "$ref": "#/components/schemas/Value" },
            "type": "array",
            "title": "Heating Time",
            "description": "Heating times."
          },
          "heating_atmosphere": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Heating Atmosphere",
            "description": "List of heating atmospheres."
          },
          "mixing_device": {
            "type": "string",
            "title": "Mixing Device",
            "description": "Mixing device, if this operation is MIXING."
          },
          "mixing_media": {
            "type": "string",
            "title": "Mixing Media",
            "description": "Mixing media, if this operation is MIXING."
          }
        },
        "type": "object",
        "title": "Conditions"
      },
      "CrystalSystem": {
        "enum": [
          "Triclinic",
          "Monoclinic",
          "Orthorhombic",
          "Tetragonal",
          "Trigonal",
          "Hexagonal",
          "Cubic"
        ],
        "title": "CrystalSystem",
        "description": "The crystal system of the lattice"
      },
      "CustodianDoc": {
        "properties": {
          "corrections": {
            "items": {},
            "type": "array",
            "title": "Custodian Corrections",
            "description": "List of custodian correction data for calculation."
          },
          "job": {
            "type": "object",
            "title": "Cusotodian Job Data",
            "description": "Job data logged by custodian."
          }
        },
        "type": "object",
        "title": "CustodianDoc"
      },
      "DOIDoc": {
        "properties": {
          "doi": {
            "type": "string",
            "title": "Doi",
            "description": "DOI of the material."
          },
          "bibtex": {
            "type": "string",
            "title": "Bibtex",
            "description": "Bibtex reference of the material."
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The Materials Project ID of the material. This comes in the form: mp-******."
          }
        },
        "type": "object",
        "title": "DOIDoc",
        "description": "DOIs to reference specific materials on Materials Project."
      },
      "DOSObjectDoc": {
        "properties": {
          "task_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Task Id",
            "description": "The source calculation (task) ID that this density of states comes from. This has the same form as a Materials Project ID.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "The timestamp when this calculation was last updated."
          },
          "data": {
            "properties": {
              "@class": { "type": "string", "enum": ["CompleteDos"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.electronic_structure.dos"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Data",
            "description": "The density of states object for the given calculation ID."
          }
        },
        "type": "object",
        "title": "DOSObjectDoc",
        "description": "DOS object document."
      },
      "DOSProjectionType": {
        "enum": ["total", "elemental", "orbital"],
        "title": "DOSProjectionType",
        "description": "An enumeration."
      },
      "DecompositionProduct": {
        "properties": {
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID for the material this decomposition points to.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "formula": {
            "type": "string",
            "title": "Formula",
            "description": "The formula of the decomposed material this material decomposes to."
          },
          "amount": {
            "type": "number",
            "title": "Amount",
            "description": "The amount of the decomposed material by formula units this this material decomposes to."
          }
        },
        "type": "object",
        "title": "DecompositionProduct",
        "description": "Entry metadata for a decomposition process"
      },
      "DeprecationDoc": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The (task) ID of this calculation, used as a universal reference across property documents.This comes in the form: mp-******."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether the ID corresponds to a deprecated calculation."
          },
          "deprecation_reason": {
            "type": "string",
            "title": "Deprecation Reason",
            "description": "Reason for deprecation."
          }
        },
        "type": "object",
        "title": "DeprecationDoc",
        "description": "Model for task deprecation data"
      },
      "DeprecationMessage": {
        "enum": [
          "M",
          "C001",
          "C002",
          "C003",
          "C004",
          "C005",
          "E001",
          "E002",
          "I001",
          "I002",
          "U001"
        ],
        "title": "DeprecationMessage",
        "description": "An enumeration."
      },
      "DielectricDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "total": {
            "items": [
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              },
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              },
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              }
            ],
            "type": "array",
            "maxItems": 3,
            "minItems": 3,
            "title": "Total",
            "description": "Total dielectric tensor."
          },
          "ionic": {
            "items": [
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              },
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              },
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              }
            ],
            "type": "array",
            "maxItems": 3,
            "minItems": 3,
            "title": "Ionic",
            "description": "Ionic contribution to dielectric tensor."
          },
          "electronic": {
            "items": [
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              },
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              },
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              }
            ],
            "type": "array",
            "maxItems": 3,
            "minItems": 3,
            "title": "Electronic",
            "description": "Electronic contribution to dielectric tensor."
          },
          "e_total": {
            "type": "number",
            "title": "E Total",
            "description": "Total electric permittivity."
          },
          "e_ionic": {
            "type": "number",
            "title": "E Ionic",
            "description": "Electric permittivity from atomic rearrangement."
          },
          "e_electronic": {
            "type": "number",
            "title": "E Electronic",
            "description": "Electric permittivity due to electrons rearrangement."
          },
          "n": {
            "type": "number",
            "title": "N",
            "description": "Refractive index."
          }
        },
        "type": "object",
        "title": "DielectricDoc",
        "description": "A dielectric property block"
      },
      "DosData": {
        "properties": {
          "total": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DosSummaryData"
            },
            "type": "object",
            "title": "Total",
            "description": "Total DOS summary data."
          },
          "elemental": {
            "additionalProperties": {
              "additionalProperties": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/DosSummaryData"
                },
                "type": "object"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Elemental",
            "description": "Band structure summary data using the Hinuma et al. path convention."
          },
          "orbital": {
            "additionalProperties": {
              "additionalProperties": {
                "$ref": "#/components/schemas/DosSummaryData"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Orbital",
            "description": "Band structure summary data using the Latimer-Munro path convention."
          },
          "magnetic_ordering": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/Ordering" }
            ],
            "title": "Magnetic Ordering",
            "description": "Magnetic ordering of the calculation."
          }
        },
        "type": "object",
        "title": "DosData"
      },
      "DosSummaryData": {
        "properties": {
          "task_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Task Id",
            "description": "The source calculation (task) ID for the electronic structure data. This has the same form as a Materials Project ID.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "band_gap": {
            "type": "number",
            "title": "Band Gap",
            "description": "Band gap energy in eV."
          },
          "cbm": {
            "anyOf": [{ "type": "number" }, { "type": "object" }],
            "title": "Cbm",
            "description": "Conduction band minimum data."
          },
          "vbm": {
            "anyOf": [{ "type": "number" }, { "type": "object" }],
            "title": "Vbm",
            "description": "Valence band maximum data."
          },
          "efermi": {
            "type": "number",
            "title": "Efermi",
            "description": "Fermi energy in eV."
          },
          "spin_polarization": {
            "type": "number",
            "title": "Spin Polarization",
            "description": "Spin polarization at the fermi level."
          }
        },
        "type": "object",
        "title": "DosSummaryData"
      },
      "EOSDoc": {
        "properties": {
          "energies": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Energies",
            "description": "Common energies in eV/atom that the equations of state are plotted with."
          },
          "volumes": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Volumes",
            "description": "Common volumes in A³/atom that the equations of state are plotted with."
          },
          "eos": {
            "type": "object",
            "title": "Eos",
            "description": "Data for each type of equation of state."
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The Materials Project ID of the material. This comes in the form: mp-******."
          }
        },
        "type": "object",
        "title": "EOSDoc",
        "description": "Fitted equations of state and energies and volumes used for fits."
      },
      "Edge": {
        "enum": ["K", "L2", "L3", "L2,3"],
        "title": "Edge",
        "description": "The interaction edge for XAS\nThere are 2n-1 sub-components to each edge where\nK: n=1\nL: n=2\nM: n=3\nN: n=4"
      },
      "ElasticityData": {
        "properties": {
          "k_voigt": {
            "type": "number",
            "title": "K Voigt",
            "description": "Voigt average of the bulk modulus in GPa."
          },
          "k_reuss": {
            "type": "number",
            "title": "K Reuss",
            "description": "Reuss average of the bulk modulus in GPa."
          },
          "k_vrh": {
            "type": "number",
            "title": "K Vrh",
            "description": "Voigt-Reuss-Hill average of the bulk modulus in GPa."
          },
          "g_voigt": {
            "type": "number",
            "title": "G Voigt",
            "description": "Voigt average of the shear modulus in GPa."
          },
          "g_reuss": {
            "type": "number",
            "title": "G Reuss",
            "description": "Reuss average of the shear modulus in GPa."
          },
          "g_vrh": {
            "type": "number",
            "title": "G Vrh",
            "description": "Voigt-Reuss-Hill average of the shear modulus in GPa."
          },
          "universal_anisotropy": {
            "type": "number",
            "title": "Universal Anisotropy",
            "description": "Elastic anisotropy."
          },
          "homogeneous_poisson": {
            "type": "number",
            "title": "Homogeneous Poisson",
            "description": "Poisson's ratio."
          },
          "elastic_tensor": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Elastic Tensor",
            "description": "Stiffness tensor in GPa."
          },
          "compliance_tensor": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Compliance Tensor",
            "description": "Compliance tensor in 10^(-12)/Pa."
          }
        },
        "type": "object",
        "title": "ElasticityData",
        "description": "Elastic tensors and associated information."
      },
      "ElasticityDoc": {
        "properties": {
          "pretty_formula": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the material formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemsys",
            "description": "Dash-delimited string of elements in the material."
          },
          "elasticity": {
            "allOf": [{ "$ref": "#/components/schemas/ElasticityData" }],
            "title": "Elasticity",
            "description": "Elasticity data for the material."
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The Materials Project ID of the material. This comes in the form: mp-******."
          }
        },
        "type": "object",
        "title": "ElasticityDoc",
        "description": "Model for a document containing elasticity data"
      },
      "ElectronPhononDisplacedStructures": {
        "properties": {
          "temperatures": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Temperatures",
            "description": "The temperatures at which the electron phonon displacements were generated."
          },
          "structures": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Structure"] },
                "@module": {
                  "type": "string",
                  "enum": ["pymatgen.core.structure"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Structures",
            "description": "The displaced structures corresponding to each temperature."
          }
        },
        "type": "object",
        "title": "ElectronPhononDisplacedStructures",
        "description": "Document defining electron phonon displaced structures."
      },
      "ElectronicStep": {
        "properties": {
          "alphaZ": {
            "type": "number",
            "title": "Alphaz",
            "description": "The alpha Z term."
          },
          "ewald": {
            "type": "number",
            "title": "Ewald",
            "description": "The ewald energy."
          },
          "hartreedc": {
            "type": "number",
            "title": "Hartreedc",
            "description": "Negative Hartree energy."
          },
          "XCdc": {
            "type": "number",
            "title": "Xcdc",
            "description": "Negative exchange energy."
          },
          "pawpsdc": {
            "type": "number",
            "title": "Pawpsdc",
            "description": "Negative potential energy with exchange-correlation energy."
          },
          "pawaedc": {
            "type": "number",
            "title": "Pawaedc",
            "description": "The PAW double counting term."
          },
          "eentropy": {
            "type": "number",
            "title": "Eentropy",
            "description": "The entropy (T * S)."
          },
          "bandstr": {
            "type": "number",
            "title": "Bandstr",
            "description": "The band energy (from eigenvalues)."
          },
          "atom": {
            "type": "number",
            "title": "Atom",
            "description": "The atomic energy."
          },
          "e_fr_energy": {
            "type": "number",
            "title": "E Fr Energy",
            "description": "The free energy."
          },
          "e_wo_entrp": {
            "type": "number",
            "title": "E Wo Entrp",
            "description": "The energy without entropy."
          },
          "e_0_energy": {
            "type": "number",
            "title": "E 0 Energy",
            "description": "The internal energy."
          }
        },
        "type": "object",
        "title": "ElectronicStep",
        "description": "Document defining the information at each electronic step.\n\nNote, not all the information will be available at every step."
      },
      "ElectronicStructureDoc": {
        "properties": {
          "task_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Task Id",
            "description": "The source calculation (task) ID for the electronic structure data. This has the same form as a Materials Project ID.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "band_gap": {
            "type": "number",
            "title": "Band Gap",
            "description": "Band gap energy in eV."
          },
          "cbm": {
            "anyOf": [{ "type": "number" }, { "type": "object" }],
            "title": "Cbm",
            "description": "Conduction band minimum data."
          },
          "vbm": {
            "anyOf": [{ "type": "number" }, { "type": "object" }],
            "title": "Vbm",
            "description": "Valence band maximum data."
          },
          "efermi": {
            "type": "number",
            "title": "Efermi",
            "description": "Fermi energy in eV."
          },
          "is_gap_direct": {
            "type": "boolean",
            "title": "Is Gap Direct",
            "description": "Whether the band gap is direct."
          },
          "is_metal": {
            "type": "boolean",
            "title": "Is Metal",
            "description": "Whether the material is a metal."
          },
          "magnetic_ordering": {
            "anyOf": [
              { "type": "string" },
              { "$ref": "#/components/schemas/Ordering" }
            ],
            "title": "Magnetic Ordering",
            "description": "Magnetic ordering of the calculation."
          },
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for when this document was last updated."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "bandstructure": {
            "allOf": [{ "$ref": "#/components/schemas/BandstructureData" }],
            "title": "Bandstructure",
            "description": "Band structure data for the material."
          },
          "dos": {
            "allOf": [{ "$ref": "#/components/schemas/DosData" }],
            "title": "Dos",
            "description": "Density of states data for the material."
          }
        },
        "type": "object",
        "title": "ElectronicStructureDoc",
        "description": "Definition for a core Electronic Structure Document"
      },
      "Element": {
        "enum": [
          "H",
          "He",
          "Li",
          "Be",
          "B",
          "C",
          "N",
          "O",
          "F",
          "Ne",
          "Na",
          "Mg",
          "Al",
          "Si",
          "P",
          "S",
          "Cl",
          "Ar",
          "K",
          "Ca",
          "Sc",
          "Ti",
          "V",
          "Cr",
          "Mn",
          "Fe",
          "Co",
          "Ni",
          "Cu",
          "Zn",
          "Ga",
          "Ge",
          "As",
          "Se",
          "Br",
          "Kr",
          "Rb",
          "Sr",
          "Y",
          "Zr",
          "Nb",
          "Mo",
          "Tc",
          "Ru",
          "Rh",
          "Pd",
          "Ag",
          "Cd",
          "In",
          "Sn",
          "Sb",
          "Te",
          "I",
          "Xe",
          "Cs",
          "Ba",
          "La",
          "Ce",
          "Pr",
          "Nd",
          "Pm",
          "Sm",
          "Eu",
          "Gd",
          "Tb",
          "Dy",
          "Ho",
          "Er",
          "Tm",
          "Yb",
          "Lu",
          "Hf",
          "Ta",
          "W",
          "Re",
          "Os",
          "Ir",
          "Pt",
          "Au",
          "Hg",
          "Tl",
          "Pb",
          "Bi",
          "Po",
          "At",
          "Rn",
          "Fr",
          "Ra",
          "Ac",
          "Th",
          "Pa",
          "U",
          "Np",
          "Pu",
          "Am",
          "Cm",
          "Bk",
          "Cf",
          "Es",
          "Fm",
          "Md",
          "No",
          "Lr",
          "Rf",
          "Db",
          "Sg",
          "Bh",
          "Hs",
          "Mt",
          "Ds",
          "Rg",
          "Cn",
          "Nh",
          "Fl",
          "Mc",
          "Lv",
          "Ts",
          "Og"
        ],
        "title": "Element",
        "description": "Enum representing an element in the periodic table."
      },
      "EmmetMeta": {
        "properties": {
          "emmet_version": {
            "type": "string",
            "title": "Emmet Version",
            "description": "The version of emmet this document was built with."
          },
          "pymatgen_version": {
            "type": "string",
            "title": "Pymatgen Version",
            "description": "The version of pymatgen this document was built with."
          },
          "pull_request": {
            "type": "integer",
            "title": "Pull Request",
            "description": "The pull request number associated with this data build."
          },
          "database_version": {
            "type": "string",
            "title": "Database Version",
            "description": "The database version for the built data."
          },
          "build_date": {
            "type": "string",
            "format": "date-time",
            "title": "Build Date",
            "description": "The build date for this document."
          }
        },
        "type": "object",
        "title": "EmmetMeta",
        "description": "Default emmet metadata"
      },
      "EntriesCompositionSummary": {
        "properties": {
          "all_formulas": {
            "items": { "type": "string" },
            "type": "array",
            "title": "All Formulas",
            "description": "Reduced formulas for material entries across all voltage pairs."
          },
          "all_chemsys": {
            "items": { "type": "string" },
            "type": "array",
            "title": "All Chemsys",
            "description": "Chemical systems for material entries across all voltage pairs."
          },
          "all_formula_anonymous": {
            "items": { "type": "string" },
            "type": "array",
            "title": "All Formula Anonymous",
            "description": "Anonymous formulas for material entries across all voltage pairs."
          },
          "all_elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "Elements in material entries across all voltage pairs."
          },
          "all_composition_reduced": {
            "type": "object",
            "title": "All Composition Reduced",
            "description": "Composition reduced data for entries across all voltage pairs."
          }
        },
        "type": "object",
        "title": "EntriesCompositionSummary",
        "description": "Composition summary data for all material entries associated with this electrode.\nIncluded to enable better searching via the API."
      },
      "EntryDoc": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The (task) ID of this calculation, used as a universal reference across property documents.This comes in the form: mp-******."
          },
          "entry": {
            "properties": {
              "@class": {
                "type": "string",
                "enum": ["ComputedStructureEntry"]
              },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.entries.computed_entries"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Entry",
            "description": "Computed structure entry for the calculation associated with the task doc."
          }
        },
        "type": "object",
        "title": "EntryDoc",
        "description": "Model for task entry data"
      },
      "Error": {
        "properties": {
          "code": {
            "type": "integer",
            "title": "Code",
            "description": "The error code"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "The description of the error"
          }
        },
        "type": "object",
        "required": ["code", "message"],
        "title": "Error",
        "description": "Base Error model for General API"
      },
      "ExtractedMaterial": {
        "properties": {
          "material_string": {
            "type": "string",
            "title": "Material String",
            "description": "String of the material as written in paper."
          },
          "material_formula": {
            "type": "string",
            "title": "Material Formula",
            "description": "Normalized formula of the material."
          },
          "material_name": {
            "type": "string",
            "title": "Material Name",
            "description": "English name of the material."
          },
          "phase": {
            "type": "string",
            "title": "Phase",
            "description": "Phase description of material, such as anatase."
          },
          "is_acronym": {
            "type": "boolean",
            "title": "Is Acronym",
            "description": "Whether the material is an acronym, such as LMO for LiMn2O4."
          },
          "composition": {
            "items": { "$ref": "#/components/schemas/Component" },
            "type": "array",
            "title": "Composition",
            "description": "List of components in this material."
          },
          "amounts_vars": {
            "additionalProperties": { "$ref": "#/components/schemas/Values" },
            "type": "object",
            "title": "Amounts Vars",
            "description": "Amount variables (formula subscripts)."
          },
          "elements_vars": {
            "additionalProperties": {
              "items": { "type": "string" },
              "type": "array"
            },
            "type": "object",
            "title": "Elements Vars",
            "description": "Chemical element variables"
          },
          "additives": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Additives",
            "description": "List of additives, dopants, etc."
          },
          "oxygen_deficiency": {
            "type": "string",
            "title": "Oxygen Deficiency",
            "description": "Symbol indicating whether the materials is oxygen deficient."
          }
        },
        "type": "object",
        "title": "ExtractedMaterial",
        "description": "Model for a material extracted from the literature"
      },
      "FermiDoc": {
        "properties": {
          "fermi_surfaces": {
            "items": { "type": "object" },
            "type": "array",
            "title": "Fermi Surfaces",
            "description": "List of IFermi FermiSurface objects."
          },
          "surface_types": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Surface Types",
            "description": "Type of each fermi surface in the fermi_surfaces list.            Is either CBM or VBM for semiconductors, or fermi_surface for metals."
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The Materials Project ID of the material. This comes in the form: mp-******."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation for this fermi surface document."
          }
        },
        "type": "object",
        "title": "FermiDoc",
        "description": "Fermi surfaces."
      },
      "FindMolecule": {
        "properties": {
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of this molecule, used as a universal reference across property documents.",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "rmsd": {
            "type": "number",
            "title": "Rmsd",
            "description": "Root-mean-squared displacement of the molecule compared to a reference"
          }
        },
        "type": "object",
        "title": "FindMolecule",
        "description": "Class defining find molecule return data"
      },
      "FindStructure": {
        "properties": {
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The ID of this material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "normalized_rms_displacement": {
            "type": "number",
            "title": "Normalized Rms Displacement",
            "description": "Volume normalized root-mean squared displacement between the structures"
          },
          "max_distance_paired_sites": {
            "type": "number",
            "title": "Max Distance Paired Sites",
            "description": "Maximum distance between paired sites."
          }
        },
        "type": "object",
        "title": "FindStructure",
        "description": "Class defining find structure return data"
      },
      "FormulaAutocomplete": {
        "properties": {
          "formula_pretty": {
            "type": "string",
            "title": "Formula Pretty",
            "description": "Human readable chemical formula."
          }
        },
        "type": "object",
        "title": "FormulaAutocomplete",
        "description": "Class defining formula autocomplete return data"
      },
      "FormulaPart": {
        "properties": {
          "amount": {
            "type": "string",
            "title": "Amount",
            "description": "Amount of the compound in a formula."
          },
          "material": {
            "type": "string",
            "title": "Material",
            "description": "The compound that participates in a reaction."
          }
        },
        "type": "object",
        "title": "FormulaPart"
      },
      "FrequencyDependentDielectric": {
        "properties": {
          "real": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Real",
            "description": "Real part of the frequency dependent dielectric constant, given at each energy as 6 components according to XX, YY, ZZ, XY, YZ, ZX"
          },
          "imaginary": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Imaginary",
            "description": "Imaginary part of the frequency dependent dielectric constant, given at each energy as 6 components according to XX, YY, ZZ, XY, YZ, ZX"
          },
          "energy": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Energy",
            "description": "Energies at which the real and imaginary parts of the dielectricconstant are given"
          }
        },
        "type": "object",
        "title": "FrequencyDependentDielectric",
        "description": "Frequency-dependent dielectric data."
      },
      "GBSearchData": {
        "properties": {
          "sigma": {
            "type": "integer",
            "title": "Sigma",
            "description": "Sigma value of the boundary.",
            "source": "grain_boundary"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Grain boundary type.",
            "source": "grain_boundary"
          },
          "gb_energy": {
            "type": "number",
            "title": "Gb Energy",
            "description": "Grain boundary energy in J/m^2.",
            "source": "grain_boundary"
          },
          "rotation_angle": {
            "type": "number",
            "title": "Rotation Angle",
            "description": "Rotation angle in degrees.",
            "source": "grain_boundary"
          }
        },
        "type": "object",
        "title": "GBSearchData",
        "description": "Fields in grain boundary sub docs in summary"
      },
      "GBTypeEnum": {
        "enum": ["tilt", "twist"],
        "title": "GBTypeEnum",
        "description": "Grain boundary types"
      },
      "GrainBoundaryDoc": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The Materials Project ID of the material. This comes in the form: mp-******."
          },
          "sigma": {
            "type": "integer",
            "title": "Sigma",
            "description": "Sigma value of the boundary."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/GBTypeEnum" }],
            "description": "Grain boundary type."
          },
          "rotation_axis": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Rotation Axis",
            "description": "Rotation axis."
          },
          "gb_plane": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Gb Plane",
            "description": "Grain boundary plane."
          },
          "rotation_angle": {
            "type": "number",
            "title": "Rotation Angle",
            "description": "Rotation angle in degrees."
          },
          "gb_energy": {
            "type": "number",
            "title": "Gb Energy",
            "description": "Grain boundary energy in J/m^2."
          },
          "initial_structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["GrainBoundary"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.analysis.gb.grain"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Initial Structure",
            "description": "Initial grain boundary structure."
          },
          "final_structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["GrainBoundary"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.analysis.gb.grain"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Final Structure",
            "description": "Final grain boundary structure."
          },
          "pretty_formula": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Reduced formula of the material."
          },
          "w_sep": {
            "type": "number",
            "title": "W Sep",
            "description": "Work of separation in J/m^2."
          },
          "cif": {
            "type": "string",
            "title": "Cif",
            "description": "CIF file of the structure."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemsys",
            "description": "Dash-delimited string of elements in the material."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation for this Material document."
          }
        },
        "type": "object",
        "title": "GrainBoundaryDoc",
        "description": "Grain boundary energies, work of separation..."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "History": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "url": { "type": "string", "title": "Url" },
          "description": {
            "type": "object",
            "title": "Description",
            "description": "Dictionary of exra data for this history node."
          }
        },
        "type": "object",
        "title": "History",
        "description": "History of the material provenance"
      },
      "InputDoc": {
        "properties": {
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Input Structure",
            "description": "Output Structure from the VASP calculation."
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "description": "Parameters from vasprun for the last calculation in the series"
          },
          "pseudo_potentials": {
            "allOf": [{ "$ref": "#/components/schemas/Potcar" }],
            "title": "Pseudo Potentials",
            "description": "Summary of the pseudo-potentials used in this calculation"
          },
          "potcar_spec": {
            "items": { "$ref": "#/components/schemas/PotcarSpec" },
            "type": "array",
            "title": "Potcar Spec",
            "description": "Title and hash of POTCAR files used in the calculation"
          },
          "xc_override": {
            "type": "string",
            "title": "Xc Override",
            "description": "Exchange-correlation functional used if not the default"
          },
          "is_lasph": {
            "type": "boolean",
            "title": "Is Lasph",
            "description": "Whether the calculation was run with aspherical corrections"
          },
          "is_hubbard": {
            "type": "boolean",
            "title": "Is Hubbard",
            "description": "Is this a Hubbard +U calculation"
          },
          "hubbards": {
            "type": "object",
            "title": "Hubbards",
            "description": "The hubbard parameters used"
          }
        },
        "type": "object",
        "title": "InputDoc"
      },
      "InsertionElectrodeDoc": {
        "properties": {
          "battery_type": {
            "allOf": [{ "$ref": "#/components/schemas/BatteryType" }],
            "description": "The type of battery (insertion or conversion)."
          },
          "battery_id": {
            "type": "string",
            "title": "Battery Id",
            "description": "The id for this battery document is the numerically smallest material_id followed by the working ion."
          },
          "thermo_type": {
            "type": "string",
            "title": "Thermo Type",
            "description": "The functional type used to compute the thermodynamics of this electrode document."
          },
          "battery_formula": {
            "type": "string",
            "title": "Battery Formula",
            "description": "Reduced formula with working ion range produced by combining the charge and discharge formulas."
          },
          "working_ion": {
            "allOf": [{ "$ref": "#/components/schemas/Element" }],
            "description": "The working ion as an Element object."
          },
          "num_steps": {
            "type": "integer",
            "title": "Num Steps",
            "description": "The number of distinct voltage steps in from fully charge to discharge based on the stable intermediate states."
          },
          "max_voltage_step": {
            "type": "number",
            "title": "Max Voltage Step",
            "description": "Maximum absolute difference in adjacent voltage steps."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation for this Material document."
          },
          "framework": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Framework",
            "description": "The chemical compositions of the host framework."
          },
          "framework_formula": {
            "type": "string",
            "title": "Framework Formula",
            "description": "The id for this battery document."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "The atomic species contained in this electrode (not including the working ion)."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "The number of elements in the material (not including the working ion)."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemsys",
            "description": "The chemical system this electrode belongs to (not including the working ion)."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula (not including the working ion)."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this electrode data."
          },
          "formula_charge": {
            "type": "string",
            "title": "Formula Charge",
            "description": "The chemical formula of the charged material."
          },
          "formula_discharge": {
            "type": "string",
            "title": "Formula Discharge",
            "description": "The chemical formula of the discharged material."
          },
          "max_delta_volume": {
            "type": "number",
            "title": "Max Delta Volume",
            "description": "Volume changes in % for a particular voltage step using: max(charge, discharge) / min(charge, discharge) - 1."
          },
          "average_voltage": {
            "type": "number",
            "title": "Average Voltage",
            "description": "The average voltage in V for a particular voltage step."
          },
          "capacity_grav": {
            "type": "number",
            "title": "Capacity Grav",
            "description": "Gravimetric capacity in mAh/g."
          },
          "capacity_vol": {
            "type": "number",
            "title": "Capacity Vol",
            "description": "Volumetric capacity in mAh/cc."
          },
          "energy_grav": {
            "type": "number",
            "title": "Energy Grav",
            "description": "Gravimetric energy (Specific energy) in Wh/kg."
          },
          "energy_vol": {
            "type": "number",
            "title": "Energy Vol",
            "description": "Volumetric energy (Energy Density) in Wh/l."
          },
          "fracA_charge": {
            "type": "number",
            "title": "Fraca Charge",
            "description": "Atomic fraction of the working ion in the charged state."
          },
          "fracA_discharge": {
            "type": "number",
            "title": "Fraca Discharge",
            "description": "Atomic fraction of the working ion in the discharged state."
          },
          "stability_charge": {
            "type": "number",
            "title": "Stability Charge",
            "description": "The energy above hull of the charged material in eV/atom."
          },
          "stability_discharge": {
            "type": "number",
            "title": "Stability Discharge",
            "description": "The energy above hull of the discharged material in eV/atom."
          },
          "id_charge": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
                "examples": ["mp-3534", "3453", "mp-834-Ag"]
              },
              { "type": "integer" }
            ],
            "title": "Id Charge",
            "description": "The Materials Project ID of the charged structure."
          },
          "id_discharge": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
                "examples": ["mp-3534", "3453", "mp-834-Ag"]
              },
              { "type": "integer" }
            ],
            "title": "Id Discharge",
            "description": "The Materials Project ID of the discharged structure."
          },
          "host_structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Host Structure",
            "description": "Host structure (structure without the working ion)."
          },
          "adj_pairs": {
            "items": { "$ref": "#/components/schemas/InsertionVoltagePairDoc" },
            "type": "array",
            "title": "Adj Pairs",
            "description": "Returns all of the voltage steps material pairs."
          },
          "material_ids": {
            "items": {
              "type": "string",
              "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
              "examples": ["mp-3534", "3453", "mp-834-Ag"]
            },
            "type": "array",
            "title": "Material Ids",
            "description": "The ids of all structures that matched to the present host lattice, regardless of stability. The stable entries can be found in the adjacent pairs."
          },
          "entries_composition_summary": {
            "allOf": [
              { "$ref": "#/components/schemas/EntriesCompositionSummary" }
            ],
            "title": "Entries Composition Summary",
            "description": "Composition summary data for all material in entries across all voltage pairs."
          },
          "electrode_object": {
            "properties": {
              "@class": { "type": "string", "enum": ["InsertionElectrode"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.apps.battery.insertion_battery"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Electrode Object",
            "description": "The Pymatgen electrode object."
          }
        },
        "type": "object",
        "title": "InsertionElectrodeDoc",
        "description": "Insertion electrode"
      },
      "InsertionVoltagePairDoc": {
        "properties": {
          "formula_charge": {
            "type": "string",
            "title": "Formula Charge",
            "description": "The chemical formula of the charged material."
          },
          "formula_discharge": {
            "type": "string",
            "title": "Formula Discharge",
            "description": "The chemical formula of the discharged material."
          },
          "max_delta_volume": {
            "type": "number",
            "title": "Max Delta Volume",
            "description": "Volume changes in % for a particular voltage step using: max(charge, discharge) / min(charge, discharge) - 1."
          },
          "average_voltage": {
            "type": "number",
            "title": "Average Voltage",
            "description": "The average voltage in V for a particular voltage step."
          },
          "capacity_grav": {
            "type": "number",
            "title": "Capacity Grav",
            "description": "Gravimetric capacity in mAh/g."
          },
          "capacity_vol": {
            "type": "number",
            "title": "Capacity Vol",
            "description": "Volumetric capacity in mAh/cc."
          },
          "energy_grav": {
            "type": "number",
            "title": "Energy Grav",
            "description": "Gravimetric energy (Specific energy) in Wh/kg."
          },
          "energy_vol": {
            "type": "number",
            "title": "Energy Vol",
            "description": "Volumetric energy (Energy Density) in Wh/l."
          },
          "fracA_charge": {
            "type": "number",
            "title": "Fraca Charge",
            "description": "Atomic fraction of the working ion in the charged state."
          },
          "fracA_discharge": {
            "type": "number",
            "title": "Fraca Discharge",
            "description": "Atomic fraction of the working ion in the discharged state."
          },
          "stability_charge": {
            "type": "number",
            "title": "Stability Charge",
            "description": "The energy above hull of the charged material in eV/atom."
          },
          "stability_discharge": {
            "type": "number",
            "title": "Stability Discharge",
            "description": "The energy above hull of the discharged material in eV/atom."
          },
          "id_charge": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
                "examples": ["mp-3534", "3453", "mp-834-Ag"]
              },
              { "type": "integer" }
            ],
            "title": "Id Charge",
            "description": "The Materials Project ID of the charged structure."
          },
          "id_discharge": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
                "examples": ["mp-3534", "3453", "mp-834-Ag"]
              },
              { "type": "integer" }
            ],
            "title": "Id Discharge",
            "description": "The Materials Project ID of the discharged structure."
          }
        },
        "type": "object",
        "title": "InsertionVoltagePairDoc",
        "description": "Features specific to insertion electrode"
      },
      "IonicStep": {
        "properties": {
          "e_fr_energy": {
            "type": "number",
            "title": "E Fr Energy",
            "description": "The free energy."
          },
          "e_wo_entrp": {
            "type": "number",
            "title": "E Wo Entrp",
            "description": "The energy without entropy."
          },
          "e_0_energy": {
            "type": "number",
            "title": "E 0 Energy",
            "description": "The internal energy."
          },
          "forces": {
            "items": {
              "items": [
                { "type": "number" },
                { "type": "number" },
                { "type": "number" }
              ],
              "type": "array",
              "maxItems": 3,
              "minItems": 3
            },
            "type": "array",
            "title": "Forces",
            "description": "The forces on each atom."
          },
          "stress": {
            "items": [
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              },
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              },
              {
                "items": [
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "number" }
                ],
                "type": "array",
                "maxItems": 3,
                "minItems": 3
              }
            ],
            "type": "array",
            "maxItems": 3,
            "minItems": 3,
            "title": "Stress",
            "description": "The stress on the lattice."
          },
          "electronic_steps": {
            "items": { "$ref": "#/components/schemas/ElectronicStep" },
            "type": "array",
            "title": "Electronic Steps",
            "description": "The electronic convergence steps."
          },
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure",
            "description": "The structure at this step."
          }
        },
        "type": "object",
        "title": "IonicStep",
        "description": "Document defining the information at each ionic step."
      },
      "LevelOfTheory": {
        "enum": [
          "PBE/6-31g*/VACUUM",
          "PBE/6-31g*/PCM",
          "PBE/6-31g*/SMD",
          "PBE/def2-SVPD/VACUUM",
          "PBE/def2-SVPD/PCM",
          "PBE/def2-SVPD/SMD",
          "PBE/def2-TZVP/VACUUM",
          "PBE/def2-TZVP/PCM",
          "PBE/def2-TZVP/SMD",
          "PBE/def2-TZVPD/VACUUM",
          "PBE/def2-TZVPD/PCM",
          "PBE/def2-TZVPD/SMD",
          "PBE/def2-TZVPP/VACUUM",
          "PBE/def2-TZVPP/PCM",
          "PBE/def2-TZVPP/SMD",
          "PBE/def2-TZVPPD/VACUUM",
          "PBE/def2-TZVPPD/PCM",
          "PBE/def2-TZVPPD/SMD",
          "PBE/def2-QZVPD/VACUUM",
          "PBE/def2-QZVPD/PCM",
          "PBE/def2-QZVPD/SMD",
          "PBE/def2-QZVPPD/VACUUM",
          "PBE/def2-QZVPPD/PCM",
          "PBE/def2-QZVPPD/SMD",
          "B97-D/6-31g*/VACUUM",
          "B97-D/6-31g*/PCM",
          "B97-D/6-31g*/SMD",
          "B97-D/def2-SVPD/VACUUM",
          "B97-D/def2-SVPD/PCM",
          "B97-D/def2-SVPD/SMD",
          "B97-D/def2-TZVP/VACUUM",
          "B97-D/def2-TZVP/PCM",
          "B97-D/def2-TZVP/SMD",
          "B97-D/def2-TZVPD/VACUUM",
          "B97-D/def2-TZVPD/PCM",
          "B97-D/def2-TZVPD/SMD",
          "B97-D/def2-TZVPP/VACUUM",
          "B97-D/def2-TZVPP/PCM",
          "B97-D/def2-TZVPP/SMD",
          "B97-D/def2-TZVPPD/VACUUM",
          "B97-D/def2-TZVPPD/PCM",
          "B97-D/def2-TZVPPD/SMD",
          "B97-D/def2-QZVPD/VACUUM",
          "B97-D/def2-QZVPD/PCM",
          "B97-D/def2-QZVPD/SMD",
          "B97-D/def2-QZVPPD/VACUUM",
          "B97-D/def2-QZVPPD/PCM",
          "B97-D/def2-QZVPPD/SMD",
          "B97-D3/6-31g*/VACUUM",
          "B97-D3/6-31g*/PCM",
          "B97-D3/6-31g*/SMD",
          "B97-D3/def2-SVPD/VACUUM",
          "B97-D3/def2-SVPD/PCM",
          "B97-D3/def2-SVPD/SMD",
          "B97-D3/def2-TZVP/VACUUM",
          "B97-D3/def2-TZVP/PCM",
          "B97-D3/def2-TZVP/SMD",
          "B97-D3/def2-TZVPD/VACUUM",
          "B97-D3/def2-TZVPD/PCM",
          "B97-D3/def2-TZVPD/SMD",
          "B97-D3/def2-TZVPP/VACUUM",
          "B97-D3/def2-TZVPP/PCM",
          "B97-D3/def2-TZVPP/SMD",
          "B97-D3/def2-TZVPPD/VACUUM",
          "B97-D3/def2-TZVPPD/PCM",
          "B97-D3/def2-TZVPPD/SMD",
          "B97-D3/def2-QZVPD/VACUUM",
          "B97-D3/def2-QZVPD/PCM",
          "B97-D3/def2-QZVPD/SMD",
          "B97-D3/def2-QZVPPD/VACUUM",
          "B97-D3/def2-QZVPPD/PCM",
          "B97-D3/def2-QZVPPD/SMD",
          "B97M-V/6-31g*/VACUUM",
          "B97M-V/6-31g*/PCM",
          "B97M-V/6-31g*/SMD",
          "B97M-V/def2-SVPD/VACUUM",
          "B97M-V/def2-SVPD/PCM",
          "B97M-V/def2-SVPD/SMD",
          "B97M-V/def2-TZVP/VACUUM",
          "B97M-V/def2-TZVP/PCM",
          "B97M-V/def2-TZVP/SMD",
          "B97M-V/def2-TZVPD/VACUUM",
          "B97M-V/def2-TZVPD/PCM",
          "B97M-V/def2-TZVPD/SMD",
          "B97M-V/def2-TZVPP/VACUUM",
          "B97M-V/def2-TZVPP/PCM",
          "B97M-V/def2-TZVPP/SMD",
          "B97M-V/def2-TZVPPD/VACUUM",
          "B97M-V/def2-TZVPPD/PCM",
          "B97M-V/def2-TZVPPD/SMD",
          "B97M-V/def2-QZVPD/VACUUM",
          "B97M-V/def2-QZVPD/PCM",
          "B97M-V/def2-QZVPD/SMD",
          "B97M-V/def2-QZVPPD/VACUUM",
          "B97M-V/def2-QZVPPD/PCM",
          "B97M-V/def2-QZVPPD/SMD",
          "B97M-rV/6-31g*/VACUUM",
          "B97M-rV/6-31g*/PCM",
          "B97M-rV/6-31g*/SMD",
          "B97M-rV/def2-SVPD/VACUUM",
          "B97M-rV/def2-SVPD/PCM",
          "B97M-rV/def2-SVPD/SMD",
          "B97M-rV/def2-TZVP/VACUUM",
          "B97M-rV/def2-TZVP/PCM",
          "B97M-rV/def2-TZVP/SMD",
          "B97M-rV/def2-TZVPD/VACUUM",
          "B97M-rV/def2-TZVPD/PCM",
          "B97M-rV/def2-TZVPD/SMD",
          "B97M-rV/def2-TZVPP/VACUUM",
          "B97M-rV/def2-TZVPP/PCM",
          "B97M-rV/def2-TZVPP/SMD",
          "B97M-rV/def2-TZVPPD/VACUUM",
          "B97M-rV/def2-TZVPPD/PCM",
          "B97M-rV/def2-TZVPPD/SMD",
          "B97M-rV/def2-QZVPD/VACUUM",
          "B97M-rV/def2-QZVPD/PCM",
          "B97M-rV/def2-QZVPD/SMD",
          "B97M-rV/def2-QZVPPD/VACUUM",
          "B97M-rV/def2-QZVPPD/PCM",
          "B97M-rV/def2-QZVPPD/SMD",
          "B3LYP/6-31g*/VACUUM",
          "B3LYP/6-31g*/PCM",
          "B3LYP/6-31g*/SMD",
          "B3LYP/def2-SVPD/VACUUM",
          "B3LYP/def2-SVPD/PCM",
          "B3LYP/def2-SVPD/SMD",
          "B3LYP/def2-TZVP/VACUUM",
          "B3LYP/def2-TZVP/PCM",
          "B3LYP/def2-TZVP/SMD",
          "B3LYP/def2-TZVPD/VACUUM",
          "B3LYP/def2-TZVPD/PCM",
          "B3LYP/def2-TZVPD/SMD",
          "B3LYP/def2-TZVPP/VACUUM",
          "B3LYP/def2-TZVPP/PCM",
          "B3LYP/def2-TZVPP/SMD",
          "B3LYP/def2-TZVPPD/VACUUM",
          "B3LYP/def2-TZVPPD/PCM",
          "B3LYP/def2-TZVPPD/SMD",
          "B3LYP/def2-QZVPD/VACUUM",
          "B3LYP/def2-QZVPD/PCM",
          "B3LYP/def2-QZVPD/SMD",
          "B3LYP/def2-QZVPPD/VACUUM",
          "B3LYP/def2-QZVPPD/PCM",
          "B3LYP/def2-QZVPPD/SMD",
          "wB97X-D/6-31g*/VACUUM",
          "wB97X-D/6-31g*/PCM",
          "wB97X-D/6-31g*/SMD",
          "wB97X-D/def2-SVPD/VACUUM",
          "wB97X-D/def2-SVPD/PCM",
          "wB97X-D/def2-SVPD/SMD",
          "wB97X-D/def2-TZVP/VACUUM",
          "wB97X-D/def2-TZVP/PCM",
          "wB97X-D/def2-TZVP/SMD",
          "wB97X-D/def2-TZVPD/VACUUM",
          "wB97X-D/def2-TZVPD/PCM",
          "wB97X-D/def2-TZVPD/SMD",
          "wB97X-D/def2-TZVPP/VACUUM",
          "wB97X-D/def2-TZVPP/PCM",
          "wB97X-D/def2-TZVPP/SMD",
          "wB97X-D/def2-TZVPPD/VACUUM",
          "wB97X-D/def2-TZVPPD/PCM",
          "wB97X-D/def2-TZVPPD/SMD",
          "wB97X-D/def2-QZVPD/VACUUM",
          "wB97X-D/def2-QZVPD/PCM",
          "wB97X-D/def2-QZVPD/SMD",
          "wB97X-D/def2-QZVPPD/VACUUM",
          "wB97X-D/def2-QZVPPD/PCM",
          "wB97X-D/def2-QZVPPD/SMD",
          "wB97X-D3/6-31g*/VACUUM",
          "wB97X-D3/6-31g*/PCM",
          "wB97X-D3/6-31g*/SMD",
          "wB97X-D3/def2-SVPD/VACUUM",
          "wB97X-D3/def2-SVPD/PCM",
          "wB97X-D3/def2-SVPD/SMD",
          "wB97X-D3/def2-TZVP/VACUUM",
          "wB97X-D3/def2-TZVP/PCM",
          "wB97X-D3/def2-TZVP/SMD",
          "wB97X-D3/def2-TZVPD/VACUUM",
          "wB97X-D3/def2-TZVPD/PCM",
          "wB97X-D3/def2-TZVPD/SMD",
          "wB97X-D3/def2-TZVPP/VACUUM",
          "wB97X-D3/def2-TZVPP/PCM",
          "wB97X-D3/def2-TZVPP/SMD",
          "wB97X-D3/def2-TZVPPD/VACUUM",
          "wB97X-D3/def2-TZVPPD/PCM",
          "wB97X-D3/def2-TZVPPD/SMD",
          "wB97X-D3/def2-QZVPD/VACUUM",
          "wB97X-D3/def2-QZVPD/PCM",
          "wB97X-D3/def2-QZVPD/SMD",
          "wB97X-D3/def2-QZVPPD/VACUUM",
          "wB97X-D3/def2-QZVPPD/PCM",
          "wB97X-D3/def2-QZVPPD/SMD",
          "wB97X-V/6-31g*/VACUUM",
          "wB97X-V/6-31g*/PCM",
          "wB97X-V/6-31g*/SMD",
          "wB97X-V/def2-SVPD/VACUUM",
          "wB97X-V/def2-SVPD/PCM",
          "wB97X-V/def2-SVPD/SMD",
          "wB97X-V/def2-TZVP/VACUUM",
          "wB97X-V/def2-TZVP/PCM",
          "wB97X-V/def2-TZVP/SMD",
          "wB97X-V/def2-TZVPD/VACUUM",
          "wB97X-V/def2-TZVPD/PCM",
          "wB97X-V/def2-TZVPD/SMD",
          "wB97X-V/def2-TZVPP/VACUUM",
          "wB97X-V/def2-TZVPP/PCM",
          "wB97X-V/def2-TZVPP/SMD",
          "wB97X-V/def2-TZVPPD/VACUUM",
          "wB97X-V/def2-TZVPPD/PCM",
          "wB97X-V/def2-TZVPPD/SMD",
          "wB97X-V/def2-QZVPD/VACUUM",
          "wB97X-V/def2-QZVPD/PCM",
          "wB97X-V/def2-QZVPD/SMD",
          "wB97X-V/def2-QZVPPD/VACUUM",
          "wB97X-V/def2-QZVPPD/PCM",
          "wB97X-V/def2-QZVPPD/SMD",
          "wB97M-V/6-31g*/VACUUM",
          "wB97M-V/6-31g*/PCM",
          "wB97M-V/6-31g*/SMD",
          "wB97M-V/def2-SVPD/VACUUM",
          "wB97M-V/def2-SVPD/PCM",
          "wB97M-V/def2-SVPD/SMD",
          "wB97M-V/def2-TZVP/VACUUM",
          "wB97M-V/def2-TZVP/PCM",
          "wB97M-V/def2-TZVP/SMD",
          "wB97M-V/def2-TZVPD/VACUUM",
          "wB97M-V/def2-TZVPD/PCM",
          "wB97M-V/def2-TZVPD/SMD",
          "wB97M-V/def2-TZVPP/VACUUM",
          "wB97M-V/def2-TZVPP/PCM",
          "wB97M-V/def2-TZVPP/SMD",
          "wB97M-V/def2-TZVPPD/VACUUM",
          "wB97M-V/def2-TZVPPD/PCM",
          "wB97M-V/def2-TZVPPD/SMD",
          "wB97M-V/def2-QZVPD/VACUUM",
          "wB97M-V/def2-QZVPD/PCM",
          "wB97M-V/def2-QZVPD/SMD",
          "wB97M-V/def2-QZVPPD/VACUUM",
          "wB97M-V/def2-QZVPPD/PCM",
          "wB97M-V/def2-QZVPPD/SMD"
        ],
        "title": "LevelOfTheory",
        "description": "Levels of theory for calculations in Q-Chem "
      },
      "MPCompleteDataStatus": {
        "enum": ["SUBMITTED", "PENDING", "RUNNING", "ERROR", "COMPLETE"],
        "title": "MPCompleteDataStatus",
        "description": "Submission status for MPComplete data"
      },
      "MPCompleteDoc": {
        "properties": {
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure",
            "description": "Structure submitted by the user."
          },
          "public_name": {
            "type": "string",
            "title": "Public Name",
            "description": "Public name of submitter."
          },
          "public_email": {
            "type": "string",
            "title": "Public Email",
            "description": "Public email of submitter."
          },
          "submission_id": {
            "type": "string",
            "title": "Submission Id",
            "description": "Unique submission ID"
          },
          "state": {
            "items": { "$ref": "#/components/schemas/MPCompleteDataStatus" },
            "type": "array",
            "description": "List of data status descriptions"
          },
          "updated": {
            "items": { "type": "string", "format": "date-time" },
            "type": "array",
            "title": "Updated",
            "description": "List of status update datetimes"
          }
        },
        "type": "object",
        "title": "MPCompleteDoc",
        "description": "Defines data for MPComplete structure submissions"
      },
      "MagnetismDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "ordering": {
            "type": "string",
            "title": "Ordering",
            "description": "Magnetic ordering."
          },
          "is_magnetic": {
            "type": "boolean",
            "title": "Is Magnetic",
            "description": "Whether the material is magnetic."
          },
          "exchange_symmetry": {
            "type": "integer",
            "title": "Exchange Symmetry",
            "description": "Exchange symmetry."
          },
          "num_magnetic_sites": {
            "type": "integer",
            "title": "Num Magnetic Sites",
            "description": "The number of magnetic sites."
          },
          "num_unique_magnetic_sites": {
            "type": "integer",
            "title": "Num Unique Magnetic Sites",
            "description": "The number of unique magnetic sites."
          },
          "types_of_magnetic_species": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Types Of Magnetic Species",
            "description": "Magnetic specie elements."
          },
          "magmoms": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Magmoms",
            "description": "Magnetic moments for each site."
          },
          "total_magnetization": {
            "type": "number",
            "title": "Total Magnetization",
            "description": "Total magnetization in μB."
          },
          "total_magnetization_normalized_vol": {
            "type": "number",
            "title": "Total Magnetization Normalized Vol",
            "description": "Total magnetization normalized by volume in μB/Å³."
          },
          "total_magnetization_normalized_formula_units": {
            "type": "number",
            "title": "Total Magnetization Normalized Formula Units",
            "description": "Total magnetization normalized by formula unit in μB/f.u. ."
          }
        },
        "type": "object",
        "title": "MagnetismDoc",
        "description": "Magnetic data obtain from the calculated structure"
      },
      "MaterialsDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure",
            "description": "The structure of the this material."
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this materials document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this materials document isn't valid."
          },
          "initial_structures": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Structure"] },
                "@module": {
                  "type": "string",
                  "enum": ["pymatgen.core.structure"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Initial Structures",
            "description": "Initial structures used in the DFT optimizations corresponding to this material."
          },
          "task_ids": {
            "items": {
              "type": "string",
              "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
              "examples": ["mp-3534", "3453", "mp-834-Ag"]
            },
            "type": "array",
            "title": "Task Ids",
            "description": "List of Calculations IDs used to make this Materials Document."
          },
          "deprecated_tasks": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecated Tasks"
          },
          "calc_types": {
            "additionalProperties": {
              "$ref": "#/components/schemas/emmet__core__vasp__calc_types__enums__CalcType"
            },
            "type": "object",
            "description": "Calculation types for all the calculations that make up this material"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for when this document was last updated."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Timestamp for when this material document was first created."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Mappingionary for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this material."
          },
          "task_types": {
            "additionalProperties": {
              "$ref": "#/components/schemas/emmet__core__vasp__calc_types__enums__TaskType"
            },
            "type": "object",
            "description": "Task types for all the calculations that make up this material"
          },
          "run_types": {
            "additionalProperties": { "$ref": "#/components/schemas/RunType" },
            "type": "object",
            "description": "Run types for all the calculations that make up this material"
          },
          "entries": {
            "additionalProperties": {
              "properties": {
                "@class": {
                  "type": "string",
                  "enum": ["ComputedStructureEntry"]
                },
                "@module": {
                  "type": "string",
                  "enum": ["pymatgen.entries.computed_entries"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "object",
            "title": "Entries",
            "description": "Dictionary for tracking entries for VASP calculations"
          }
        },
        "type": "object",
        "title": "MaterialsDoc",
        "description": "Definition for a core Materials Document"
      },
      "Meta": {
        "properties": {
          "api_version": {
            "type": "string",
            "title": "Api Version",
            "description": "a string containing the version of the Materials API implementation, e.g. v0.9.5",
            "default": "0.53.1"
          },
          "time_stamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Stamp",
            "description": "a string containing the date and time at which the query was executed"
          },
          "total_doc": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Total Doc",
            "description": "the total number of documents available for this query"
          }
        },
        "type": "object",
        "title": "Meta",
        "description": "Meta information for the MAPI Response"
      },
      "MetalBindingData": {
        "properties": {
          "metal_molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Metal Molecule Id",
            "description": "The MPculeID of the metal atom or ion being bound",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "nometal_molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Nometal Molecule Id",
            "description": "The MPculeID of the molecule with the metal atom/ion removed",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "metal_index": {
            "type": "integer",
            "title": "Metal Index",
            "description": "Index of the metal in this Molecule (in case of a molecule with multiple identical metal atoms/ions)"
          },
          "metal_element": {
            "anyOf": [
              { "type": "string" },
              {
                "properties": {
                  "@class": { "type": "string", "enum": ["Species"] },
                  "@module": {
                    "type": "string",
                    "enum": ["pymatgen.core.periodic_table"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              { "$ref": "#/components/schemas/Element" }
            ],
            "title": "Metal Element",
            "description": "The metal bound to the molecule"
          },
          "metal_partial_charge": {
            "type": "number",
            "title": "Metal Partial Charge",
            "description": "The exact calculated partial charge of the metal"
          },
          "metal_partial_spin": {
            "type": "number",
            "title": "Metal Partial Spin",
            "description": "The exact calculated partial spin on the metal"
          },
          "metal_assigned_charge": {
            "type": "number",
            "title": "Metal Assigned Charge",
            "description": "The integral charge assigned to this metal based on partial charge/spin data"
          },
          "metal_assigned_spin": {
            "type": "number",
            "title": "Metal Assigned Spin",
            "description": "The integral spin multiplicity assigned to this metal based on partial spin data"
          },
          "number_coordinate_bonds": {
            "type": "integer",
            "title": "Number Coordinate Bonds",
            "description": "The number of atoms neighboring the metal atom or ion of interest"
          },
          "coordinating_atoms": {
            "items": {
              "anyOf": [
                { "type": "string" },
                {
                  "properties": {
                    "@class": { "type": "string", "enum": ["Species"] },
                    "@module": {
                      "type": "string",
                      "enum": ["pymatgen.core.periodic_table"]
                    },
                    "@version": { "type": "string" }
                  },
                  "type": "object",
                  "required": ["@class", "@module"]
                }
              ]
            },
            "type": "array",
            "title": "Coordinating Atoms",
            "description": "The elements/species coordinating the metal."
          },
          "coordinate_bond_lengths": {
            "additionalProperties": {
              "additionalProperties": {
                "anyOf": [
                  { "type": "number" },
                  { "items": { "type": "number" }, "type": "array" }
                ]
              },
              "type": "object"
            },
            "type": "object",
            "title": "Coordinate Bond Lengths",
            "description": "Bond lengths and statistics broken down by the coordinating atoms"
          },
          "binding_energy": {
            "type": "number",
            "title": "Binding Energy",
            "description": "The electronic energy change (∆E) of binding (units: eV)"
          },
          "binding_enthalpy": {
            "type": "number",
            "title": "Binding Enthalpy",
            "description": "The enthalpy change (∆H) of binding (units: eV)"
          },
          "binding_entropy": {
            "type": "number",
            "title": "Binding Entropy",
            "description": "The entropy change (∆S) of binding (units: eV/K)"
          },
          "binding_free_energy": {
            "type": "number",
            "title": "Binding Free Energy",
            "description": "The free energy change (∆G) of binding (units: eV)"
          },
          "metal_thermo_property_id": {
            "type": "string",
            "title": "Metal Thermo Property Id",
            "description": "ID of MoleculeThermoDoc used to obtain the thermochemistry of the metal atom/ion"
          },
          "nometal_thermo_property_id": {
            "type": "string",
            "title": "Nometal Thermo Property Id",
            "description": "ID of MoleculeThermoDoc used to obtain the thermochemistry of of the molecule with the metal atom/ion removed"
          }
        },
        "type": "object",
        "title": "MetalBindingData",
        "description": "Metal binding information for one metal or ion in a molecule"
      },
      "MetalBindingDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "property_id": {
            "type": "string",
            "title": "Property Id",
            "description": "The unique identifier of this property document."
          },
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of the molecule, used as a reference across property documents.This comes in the form of an MPculeID (or appropriately formatted string)",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid"
          },
          "level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used to generate this property document."
          },
          "solvent": {
            "type": "string",
            "title": "Solvent",
            "description": "String representation of the solvent environment used to generate this property document."
          },
          "lot_solvent": {
            "type": "string",
            "title": "Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to generate this property document."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property"
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property"
          },
          "method": {
            "type": "string",
            "title": "Method",
            "description": "Method used to determine the charge, spin, and coordination environment of a metal"
          },
          "binding_partial_charges_property_id": {
            "type": "string",
            "title": "Binding Partial Charges Property Id",
            "description": "ID of PartialChargesDoc used to estimate metal charge"
          },
          "binding_partial_spins_property_id": {
            "type": "string",
            "title": "Binding Partial Spins Property Id",
            "description": "ID of PartialSpinsDoc used to estimate metal spin"
          },
          "binding_partial_charges_lot_solvent": {
            "type": "string",
            "title": "Binding Partial Charges Lot Solvent",
            "description": "Combination of level of theory and solvent used to calculate atomic partial charges"
          },
          "binding_partial_spins_lot_solvent": {
            "type": "string",
            "title": "Binding Partial Spins Lot Solvent",
            "description": "Combination of level of theory and solvent used to calculate atomic partial spins"
          },
          "binding_charge_spin_method": {
            "type": "string",
            "title": "Binding Charge Spin Method",
            "description": "The method used for partial charges and spins (must be the same)."
          },
          "binding_bonding_property_id": {
            "type": "string",
            "title": "Binding Bonding Property Id",
            "description": "ID of MoleculeBondingDoc used to detect bonding in this molecule"
          },
          "binding_bonding_lot_solvent": {
            "type": "string",
            "title": "Binding Bonding Lot Solvent",
            "description": "Combination of level of theory and solvent used to determine the coordination environment of the metal atom or ion"
          },
          "binding_bonding_method": {
            "type": "string",
            "title": "Binding Bonding Method",
            "description": "The method used for to define bonding."
          },
          "binding_thermo_property_id": {
            "type": "string",
            "title": "Binding Thermo Property Id",
            "description": "ID of MoleculeThermoDoc used to obtain this molecule's thermochemistry"
          },
          "binding_thermo_lot_solvent": {
            "type": "string",
            "title": "Binding Thermo Lot Solvent",
            "description": "Combination of level of theory and solvent used for uncorrected thermochemistry"
          },
          "binding_thermo_correction_lot_solvent": {
            "type": "string",
            "title": "Binding Thermo Correction Lot Solvent",
            "description": "Combination of level of theory and solvent used to correct the electronic energy"
          },
          "binding_thermo_combined_lot_solvent": {
            "type": "string",
            "title": "Binding Thermo Combined Lot Solvent",
            "descrption": "Combination of level of theory and solvent used for molecular thermochemistry, combining both the frequency calculation and (potentially) the single-point energy correction."
          },
          "binding_data": {
            "items": { "$ref": "#/components/schemas/MetalBindingData" },
            "type": "array",
            "title": "Binding Data",
            "description": "Binding data for each metal atom or ion in the molecule"
          }
        },
        "type": "object",
        "title": "MetalBindingDoc",
        "description": "Metal binding properties of a molecule"
      },
      "MineralData": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Mineral type."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The mineral name if found."
          }
        },
        "type": "object",
        "title": "MineralData",
        "description": "Model for mineral data in the condensed structure robocrystallographer field"
      },
      "MoleculeBondingDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "property_id": {
            "type": "string",
            "title": "Property Id",
            "description": "The unique identifier of this property document."
          },
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of the molecule, used as a reference across property documents.This comes in the form of an MPculeID (or appropriately formatted string)",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid"
          },
          "level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used to generate this property document."
          },
          "solvent": {
            "type": "string",
            "title": "Solvent",
            "description": "String representation of the solvent environment used to generate this property document."
          },
          "lot_solvent": {
            "type": "string",
            "title": "Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to generate this property document."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property"
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property"
          },
          "molecule_graph": {
            "properties": {
              "@class": { "type": "string", "enum": ["MoleculeGraph"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.analysis.graphs"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Molecule Graph",
            "description": "Molecule graph"
          },
          "method": {
            "type": "string",
            "title": "Method",
            "description": "Method used to compute molecule graph"
          },
          "bond_types": {
            "additionalProperties": {
              "items": { "type": "number" },
              "type": "array"
            },
            "type": "object",
            "title": "Bond Types",
            "description": "Dictionary of bond types to their length, e.g. C-O to a list of the lengths of C-O bonds in Angstrom."
          },
          "bonds": {
            "items": {
              "items": [{ "type": "integer" }, { "type": "integer" }],
              "type": "array",
              "maxItems": 2,
              "minItems": 2
            },
            "type": "array",
            "title": "Bonds",
            "description": "List of bonds in the form (a, b), where a and b are 0-indexed atom indices"
          },
          "bonds_nometal": {
            "items": {
              "items": [{ "type": "integer" }, { "type": "integer" }],
              "type": "array",
              "maxItems": 2,
              "minItems": 2
            },
            "type": "array",
            "title": "Bonds Nometal",
            "description": "List of bonds in the form (a, b), where a and b are 0-indexed atom indices, with all metal ions removed"
          }
        },
        "type": "object",
        "title": "MoleculeBondingDoc",
        "description": "Representation of molecular bonding."
      },
      "MoleculeDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of this molecule, used as a universal reference across property documents.This comes in the form of an MPID (or int) or MPculeID (or str)",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "molecule": {
            "properties": {
              "@class": { "type": "string", "enum": ["Molecule"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Molecule",
            "description": "The best (typically meaning lowest in energy) structure for this molecule"
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this molecule document is deprecated."
          },
          "deprecation_reasons": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this molecules document isn't valid"
          },
          "initial_molecules": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Molecule"] },
                "@module": {
                  "type": "string",
                  "enum": ["pymatgen.core.structure"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Initial Molecules",
            "description": "Initial molecules used in the DFT geometry optimizations corresponding to this molecule"
          },
          "task_ids": {
            "items": {
              "type": "string",
              "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
              "examples": ["mp-3534", "3453", "mp-834-Ag"]
            },
            "type": "array",
            "title": "Calculation IDs",
            "description": "List of Calculations IDs used to make this Molecule Document"
          },
          "deprecated_tasks": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecated Tasks"
          },
          "calc_types": {
            "additionalProperties": {
              "$ref": "#/components/schemas/emmet__core__qchem__calc_types__enums__CalcType"
            },
            "type": "object",
            "description": "Calculation types for all the calculations that make up this molecule"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for when this document was last updated"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Timestamp for when this document was first created"
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "List of property origins for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this molecule"
          },
          "species": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Species",
            "description": "Ordered list of elements/species in this Molecule."
          },
          "molecules": {
            "additionalProperties": {
              "properties": {
                "@class": { "type": "string", "enum": ["Molecule"] },
                "@module": {
                  "type": "string",
                  "enum": ["pymatgen.core.structure"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "object",
            "title": "Molecules",
            "description": "The lowest energy optimized structures for this molecule for each solvent."
          },
          "molecule_levels_of_theory": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Molecule Levels Of Theory",
            "description": "Level of theory used to optimize the best molecular structure for each solvent."
          },
          "species_hash": {
            "type": "string",
            "title": "Species Hash",
            "description": "Weisfeiler Lehman (WL) graph hash using the atom species as the graph node attribute."
          },
          "coord_hash": {
            "type": "string",
            "title": "Coord Hash",
            "description": "Weisfeiler Lehman (WL) graph hash using the atom coordinates as the graph node attribute."
          },
          "inchi": {
            "type": "string",
            "title": "Inchi",
            "description": "International Chemical Identifier (InChI) for this molecule"
          },
          "inchi_key": {
            "type": "string",
            "title": "Inchi Key",
            "description": "Standardized hash of the InChI for this molecule"
          },
          "task_types": {
            "additionalProperties": {
              "$ref": "#/components/schemas/emmet__core__qchem__calc_types__enums__TaskType"
            },
            "type": "object",
            "description": "Task types for all the calculations that make up this molecule"
          },
          "levels_of_theory": {
            "additionalProperties": {
              "$ref": "#/components/schemas/LevelOfTheory"
            },
            "type": "object",
            "description": "Levels of theory types for all the calculations that make up this molecule"
          },
          "solvents": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Solvents",
            "description": "Solvents (solvent parameters) for all the calculations that make up this molecule"
          },
          "lot_solvents": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Lot Solvents",
            "description": "Combinations of level of theory and solvent for all calculations that make up this molecule"
          },
          "unique_calc_types": {
            "items": {
              "$ref": "#/components/schemas/emmet__core__qchem__calc_types__enums__CalcType"
            },
            "type": "array",
            "description": "Collection of all unique calculation types used for this molecule"
          },
          "unique_task_types": {
            "items": {
              "$ref": "#/components/schemas/emmet__core__qchem__calc_types__enums__TaskType"
            },
            "type": "array",
            "description": "Collection of all unique task types used for this molecule"
          },
          "unique_levels_of_theory": {
            "items": { "$ref": "#/components/schemas/LevelOfTheory" },
            "type": "array",
            "description": "Collection of all unique levels of theory used for this molecule"
          },
          "unique_solvents": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Unique Solvents",
            "description": "Collection of all unique solvents (solvent parameters) used for this molecule"
          },
          "unique_lot_solvents": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Unique Lot Solvents",
            "description": "Collection of all unique combinations of level of theory and solvent used for this molecule"
          },
          "entries": {
            "items": { "type": "object" },
            "type": "array",
            "title": "Entries",
            "description": "Dictionary representations of all task documents for this molecule"
          },
          "best_entries": {
            "additionalProperties": { "type": "object" },
            "type": "object",
            "title": "Best Entries",
            "description": "Mapping for tracking the best entries at each level of theory (+ solvent) for Q-Chem calculations"
          },
          "constituent_molecules": {
            "items": {
              "type": "string",
              "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
              "examples": [
                "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
                "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
              ]
            },
            "type": "array",
            "title": "Constituent Molecules",
            "description": "For cases where data from multiple MoleculeDocs have been compiled, a list of MPculeIDs of documents used to construct this document"
          },
          "similar_molecules": {
            "items": {
              "type": "string",
              "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
              "examples": [
                "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
                "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
              ]
            },
            "type": "array",
            "title": "Similar Molecules",
            "description": "List of MPculeIDs with of molecules similar (by e.g. structure) to this one"
          }
        },
        "type": "object",
        "title": "MoleculeDoc",
        "description": "Definition for a core Molecule Document"
      },
      "MoleculeSummaryDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "property_id": {
            "type": "string",
            "title": "Property Id",
            "description": "The unique identifier of this property document."
          },
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of the molecule, used as a reference across property documents.This comes in the form of an MPculeID (or appropriately formatted string)",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid"
          },
          "level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used to generate this property document."
          },
          "solvent": {
            "type": "string",
            "title": "Solvent",
            "description": "String representation of the solvent environment used to generate this property document."
          },
          "lot_solvent": {
            "type": "string",
            "title": "Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to generate this property document."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property"
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property"
          },
          "molecules": {
            "additionalProperties": {
              "properties": {
                "@class": { "type": "string", "enum": ["Molecule"] },
                "@module": {
                  "type": "string",
                  "enum": ["pymatgen.core.structure"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "object",
            "title": "Molecules",
            "description": "The lowest energy optimized structures for this molecule for each solvent."
          },
          "molecule_levels_of_theory": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Molecule Levels Of Theory",
            "description": "Level of theory used to optimize the best molecular structure for each solvent."
          },
          "species_hash": {
            "type": "string",
            "title": "Species Hash",
            "description": "Weisfeiler Lehman (WL) graph hash using the atom species as the graph node attribute."
          },
          "coord_hash": {
            "type": "string",
            "title": "Coord Hash",
            "description": "Weisfeiler Lehman (WL) graph hash using the atom coordinates as the graph node attribute."
          },
          "inchi": {
            "type": "string",
            "title": "Inchi",
            "description": "International Chemical Identifier (InChI) for this molecule"
          },
          "inchi_key": {
            "type": "string",
            "title": "Inchi Key",
            "description": "Standardized hash of the InChI for this molecule"
          },
          "task_ids": {
            "items": {
              "type": "string",
              "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
              "examples": ["mp-3534", "3453", "mp-834-Ag"]
            },
            "type": "array",
            "title": "Calculation IDs",
            "description": "List of Calculation IDs associated with this molecule."
          },
          "similar_molecules": {
            "items": {
              "type": "string",
              "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
              "examples": [
                "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
                "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
              ]
            },
            "type": "array",
            "title": "Similar Molecules",
            "description": "IDs associated with similar molecules"
          },
          "constituent_molecules": {
            "items": {
              "type": "string",
              "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
              "examples": [
                "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
                "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
              ]
            },
            "type": "array",
            "title": "Constituent Molecules",
            "description": "IDs of associated MoleculeDocs used to construct this molecule."
          },
          "unique_calc_types": {
            "items": {
              "$ref": "#/components/schemas/emmet__core__qchem__calc_types__enums__CalcType"
            },
            "type": "array",
            "description": "Collection of all unique calculation types used for this molecule"
          },
          "unique_task_types": {
            "items": {
              "$ref": "#/components/schemas/emmet__core__qchem__calc_types__enums__TaskType"
            },
            "type": "array",
            "description": "Collection of all unique task types used for this molecule"
          },
          "unique_levels_of_theory": {
            "items": { "$ref": "#/components/schemas/LevelOfTheory" },
            "type": "array",
            "description": "Collection of all unique levels of theory used for this molecule"
          },
          "unique_solvents": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Unique Solvents",
            "description": "Collection of all unique solvents (solvent parameters) used for this molecule"
          },
          "unique_lot_solvents": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Unique Lot Solvents",
            "description": "Collection of all unique combinations of level of theory and solvent used for this molecule"
          },
          "thermo_property_ids": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Thermo Property Ids",
            "description": "Solvent:property ID map for each MoleculeThermoDoc for this molecule."
          },
          "thermo_levels_of_theory": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Thermo Levels Of Theory",
            "description": "Solvent:level of theory map for each MoleculeThermoDoc for this molecule."
          },
          "electronic_energy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Electronic Energy",
            "description": "Electronic energy of the molecule (units: eV)"
          },
          "zero_point_energy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Zero Point Energy",
            "description": "Zero-point energy of the molecule (units: eV)"
          },
          "rt": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Rt",
            "description": "R*T, where R is the gas constant and T is temperature, taken to be 298.15K (units: eV)"
          },
          "total_enthalpy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Total Enthalpy",
            "description": "Total enthalpy of the molecule at 298.15K (units: eV)"
          },
          "total_entropy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Total Entropy",
            "description": "Total entropy of the molecule at 298.15K (units: eV/K)"
          },
          "translational_enthalpy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Translational Enthalpy",
            "description": "Translational enthalpy of the molecule at 298.15K (units: eV)"
          },
          "translational_entropy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Translational Entropy",
            "description": "Translational entropy of the molecule at 298.15K (units: eV/K)"
          },
          "rotational_enthalpy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Rotational Enthalpy",
            "description": "Rotational enthalpy of the molecule at 298.15K (units: eV)"
          },
          "rotational_entropy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Rotational Entropy",
            "description": "Rotational entropy of the molecule at 298.15K (units: eV/K)"
          },
          "vibrational_enthalpy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Vibrational Enthalpy",
            "description": "Vibrational enthalpy of the molecule at 298.15K (units: eV)"
          },
          "vibrational_entropy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Vibrational Entropy",
            "description": "Vibrational entropy of the molecule at 298.15K (units: eV/K)"
          },
          "free_energy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Free Energy",
            "description": "Gibbs free energy of the molecule at 298.15K (units: eV)"
          },
          "vibration_property_ids": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Vibration Property Ids",
            "description": "Solvent:property ID map for each VibrationDoc for this molecule."
          },
          "vibration_levels_of_theory": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Vibration Levels Of Theory",
            "description": "Solvent:level of theory map for each VibrationDoc for this molecule."
          },
          "frequencies": {
            "additionalProperties": {
              "items": { "type": "number" },
              "type": "array"
            },
            "type": "object",
            "title": "Frequencies",
            "description": "List of molecular vibrational frequencies"
          },
          "frequency_modes": {
            "additionalProperties": {
              "items": {
                "items": { "items": { "type": "number" }, "type": "array" },
                "type": "array"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Frequency Modes",
            "description": "Vibrational frequency modes of the molecule (units: Angstrom)"
          },
          "ir_intensities": {
            "additionalProperties": {
              "items": { "type": "number" },
              "type": "array"
            },
            "type": "object",
            "title": "IR intensities",
            "description": "Intensities for infrared vibrational spectrum peaks"
          },
          "ir_activities": {
            "additionalProperties": { "items": {}, "type": "array" },
            "type": "object",
            "title": "IR activities",
            "description": "List indicating if frequency-modes are IR-active"
          },
          "orbitals_property_ids": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Orbitals Property Ids",
            "description": "Solvent:property ID map for each OrbitalDoc for this molecule."
          },
          "orbitals_levels_of_theory": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Orbitals Levels Of Theory",
            "description": "Solvent:level of theory map for each OrbitalDoc for this molecule."
          },
          "open_shell": {
            "additionalProperties": { "type": "boolean" },
            "type": "object",
            "title": "Open Shell",
            "description": "Is this molecule open-shell (spin multiplicity != 1)?"
          },
          "nbo_population": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["NaturalPopulation"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Nbo Population",
            "description": "Natural electron populations of the molecule"
          },
          "nbo_lone_pairs": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["LonePair"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Nbo Lone Pairs",
            "description": "Lone pair orbitals of a closed-shell molecule"
          },
          "nbo_bonds": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["Bond"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Nbo Bonds",
            "description": "Bond-like orbitals of a closed-shell molecule"
          },
          "nbo_interactions": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["Interaction"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Nbo Interactions",
            "description": "Orbital-orbital interactions of a closed-shell molecule"
          },
          "alpha_population": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["NaturalPopulation"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Alpha Population",
            "description": "Natural electron populations of the alpha electrons of an open-shell molecule"
          },
          "beta_population": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["NaturalPopulation"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Beta Population",
            "description": "Natural electron populations of the beta electrons of an open-shell molecule"
          },
          "alpha_lone_pairs": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["LonePair"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Alpha Lone Pairs",
            "description": "Alpha electron lone pair orbitals of an open-shell molecule"
          },
          "beta_lone_pairs": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["LonePair"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Beta Lone Pairs",
            "description": "Beta electron lone pair orbitals of an open-shell molecule"
          },
          "alpha_bonds": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["Bond"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Alpha Bonds",
            "description": "Alpha electron bond-like orbitals of an open-shell molecule"
          },
          "beta_bonds": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["Bond"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Beta Bonds",
            "description": "Beta electron bond-like orbitals of an open-shell molecule"
          },
          "alpha_interactions": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["Interaction"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Alpha Interactions",
            "description": "Alpha electron orbital-orbital interactions of an open-shell molecule"
          },
          "beta_interactions": {
            "additionalProperties": {
              "items": {
                "properties": {
                  "@class": { "type": "string", "enum": ["Interaction"] },
                  "@module": {
                    "type": "string",
                    "enum": ["emmet.core.molecules.orbitals"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "array"
            },
            "type": "object",
            "title": "Beta Interactions",
            "description": "Beta electron orbital-orbital interactions of an open-shell molecule"
          },
          "partial_charges_property_ids": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Partial Charges Property Ids",
            "description": "Solvent:method:property ID map for each PartialChargesDoc for this molecule."
          },
          "partial_charges_levels_of_theory": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Partial Charges Levels Of Theory",
            "description": "Solvent:method:level of theory map for each PartialChargesDoc for this molecule."
          },
          "partial_charges": {
            "additionalProperties": {
              "additionalProperties": {
                "items": { "type": "number" },
                "type": "array"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Partial Charges",
            "description": "Atomic partial charges for the molecule using different partitioning schemes (Mulliken, Restrained Electrostatic Potential, Natural Bonding Orbitals, etc.)"
          },
          "partial_spins_property_ids": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Partial Spins Property Ids",
            "description": "Solvent:method:property ID map for each PartialSpinsDoc for this molecule."
          },
          "partial_spins_levels_of_theory": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Partial Spins Levels Of Theory",
            "description": "Solvent:method:level of theory map for each PartialSpinsDoc for this molecule."
          },
          "partial_spins": {
            "additionalProperties": {
              "additionalProperties": {
                "items": { "type": "number" },
                "type": "array"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Partial Spins",
            "description": "Atomic partial spins for the molecule using different partitioning schemes (Mulliken, Natural Bonding Orbitals, etc.)"
          },
          "bonding_property_ids": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Bonding Property Ids",
            "description": "Solvent:method:property ID map for each MoleculeBondingDoc for this molecule."
          },
          "bonding_levels_of_theory": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Bonding Levels Of Theory",
            "description": "Solvent:method:level of theory map for each MoleculeBondingDoc for this molecule."
          },
          "molecule_graph": {
            "additionalProperties": {
              "additionalProperties": {
                "properties": {
                  "@class": { "type": "string", "enum": ["MoleculeGraph"] },
                  "@module": {
                    "type": "string",
                    "enum": ["pymatgen.analysis.graphs"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              "type": "object"
            },
            "type": "object",
            "title": "Molecule Graph",
            "description": "Molecular graph representations of the molecule using different definitions of bonding."
          },
          "bond_types": {
            "additionalProperties": {
              "additionalProperties": {
                "additionalProperties": {
                  "items": { "type": "number" },
                  "type": "array"
                },
                "type": "object"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Bond Types",
            "description": "Dictionaries of bond types to their length under different definitions of bonding, e.g. C-O to a list of the lengths of C-O bonds in Angstrom."
          },
          "bonds": {
            "additionalProperties": {
              "additionalProperties": {
                "items": {
                  "items": [{ "type": "integer" }, { "type": "integer" }],
                  "type": "array",
                  "maxItems": 2,
                  "minItems": 2
                },
                "type": "array"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Bonds",
            "description": "List of bonds under different definitions of bonding. Each bond takes the form (a, b), where a and b are 0-indexed atom indices"
          },
          "bonds_nometal": {
            "additionalProperties": {
              "additionalProperties": {
                "items": {
                  "items": [{ "type": "integer" }, { "type": "integer" }],
                  "type": "array",
                  "maxItems": 2,
                  "minItems": 2
                },
                "type": "array"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Bonds Nometal",
            "description": "List of bonds under different definitions of bonding with all metal ions removed. Each bond takes the form in the form (a, b), where a and b are 0-indexed atom indices."
          },
          "redox_property_ids": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Redox Property Ids",
            "description": "Solvent:property ID map for each RedoxDoc for this molecule."
          },
          "redox_levels_of_theory": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Redox Levels Of Theory",
            "description": "Solvent:level of theory map for each RedoxDoc for this molecule."
          },
          "electron_affinity": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Electron Affinity",
            "description": "Vertical electron affinity in eV"
          },
          "ea_task_id": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
              "examples": ["mp-3534", "3453", "mp-834-Ag"]
            },
            "type": "object",
            "title": "Ea Task Id",
            "description": "Molecule ID for electron affinity"
          },
          "ionization_energy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Ionization Energy",
            "description": "Vertical ionization energy in eV"
          },
          "ie_task_id": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
              "examples": ["mp-3534", "3453", "mp-834-Ag"]
            },
            "type": "object",
            "title": "Ie Task Id",
            "description": "Molecule ID for ionization energy"
          },
          "reduction_free_energy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Reduction Free Energy",
            "description": "Adiabatic free energy of reduction"
          },
          "red_molecule_id": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
              "examples": [
                "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
                "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
              ]
            },
            "type": "object",
            "title": "Red Molecule Id",
            "description": "Molecule ID for adiabatic reduction"
          },
          "oxidation_free_energy": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Oxidation Free Energy",
            "description": "Adiabatic free energy of oxidation"
          },
          "ox_molecule_id": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
              "examples": [
                "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
                "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
              ]
            },
            "type": "object",
            "title": "Ox Molecule Id",
            "description": "Molecule ID for adiabatic oxidation"
          },
          "reduction_potential": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Reduction Potential",
            "description": "Reduction potential referenced to the standard hydrogen electrode (SHE) (units: V)"
          },
          "oxidation_potential": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Oxidation Potential",
            "description": "Oxidation potential referenced to the standard hydrogen electrode (SHE) (units: V)"
          },
          "binding_partial_charges_property_id": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Partial Charges Property Id",
            "description": "ID of PartialChargesDoc used to estimate metal charge"
          },
          "binding_partial_spins_property_id": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Partial Spins Property Id",
            "description": "ID of PartialSpinsDoc used to estimate metal spin"
          },
          "binding_partial_charges_lot_solvent": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Partial Charges Lot Solvent",
            "description": "Combination of level of theory and solvent used to calculate atomic partial charges"
          },
          "binding_partial_spins_lot_solvent": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Partial Spins Lot Solvent",
            "description": "Combination of level of theory and solvent used to calculate atomic partial spins"
          },
          "binding_charge_spin_method": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Charge Spin Method",
            "description": "The method used for partial charges and spins (must be the same)."
          },
          "binding_bonding_property_id": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Bonding Property Id",
            "description": "ID of MoleculeBondingDoc used to detect bonding in this molecule"
          },
          "binding_bonding_lot_solvent": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Bonding Lot Solvent",
            "description": "Combination of level of theory and solvent used to determine the coordination environment of the metal atom or ion"
          },
          "binding_bonding_method": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Bonding Method",
            "description": "The method used for to define bonding."
          },
          "binding_thermo_property_id": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Thermo Property Id",
            "description": "ID of MoleculeThermoDoc used to obtain this molecule's thermochemistry"
          },
          "binding_thermo_lot_solvent": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Thermo Lot Solvent",
            "description": "Combination of level of theory and solvent used for uncorrected thermochemistry"
          },
          "binding_thermo_correction_lot_solvent": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Thermo Correction Lot Solvent",
            "description": "Combination of level of theory and solvent used to correct the electronic energy"
          },
          "binding_thermo_combined_lot_solvent": {
            "additionalProperties": {
              "additionalProperties": { "type": "string" },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Thermo Combined Lot Solvent",
            "descrption": "Combination of level of theory and solvent used for molecular thermochemistry, combining both the frequency calculation and (potentially) the single-point energy correction."
          },
          "binding_data": {
            "additionalProperties": {
              "additionalProperties": {
                "items": { "$ref": "#/components/schemas/MetalBindingData" },
                "type": "array"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Binding Data",
            "description": "Binding data for each metal atom or ion in the molecule"
          },
          "has_props": {
            "items": {
              "$ref": "#/components/schemas/emmet__core__molecules__summary__HasProps"
            },
            "type": "array",
            "description": "List of properties that are available for a given material."
          }
        },
        "type": "object",
        "title": "MoleculeSummaryDoc",
        "description": "Summary information about molecules and their properties, useful for searching."
      },
      "MoleculeThermoDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "property_id": {
            "type": "string",
            "title": "Property Id",
            "description": "The unique identifier of this property document."
          },
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of the molecule, used as a reference across property documents.This comes in the form of an MPculeID (or appropriately formatted string)",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid"
          },
          "level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used to generate this property document."
          },
          "solvent": {
            "type": "string",
            "title": "Solvent",
            "description": "String representation of the solvent environment used to generate this property document."
          },
          "lot_solvent": {
            "type": "string",
            "title": "Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to generate this property document."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property"
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property"
          },
          "electronic_energy": {
            "type": "number",
            "title": "Electronic Energy",
            "description": "Electronic energy of the molecule (units: eV)"
          },
          "correction": {
            "type": "boolean",
            "title": "Correction",
            "description": "Was a single-point calculation at higher level of theory used to correct the electronic energy?"
          },
          "base_level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used for uncorrected thermochemistry."
          },
          "base_solvent": {
            "type": "string",
            "title": "Base Solvent",
            "description": "String representation of the solvent environment used for uncorrected thermochemistry."
          },
          "base_lot_solvent": {
            "type": "string",
            "title": "Base Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used for uncorrected thermochemistry."
          },
          "correction_level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used to correct the electronic energy."
          },
          "correction_solvent": {
            "type": "string",
            "title": "Correction Solvent",
            "description": "String representation of the solvent environment used to correct the electronic energy."
          },
          "correction_lot_solvent": {
            "type": "string",
            "title": "Correction Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to correct the electronic energy."
          },
          "combined_lot_solvent": {
            "type": "string",
            "title": "Combined Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to generate this ThermoDoc, combining both the frequency calculation and (potentially) the single-point energy correction."
          },
          "zero_point_energy": {
            "type": "number",
            "title": "Zero Point Energy",
            "description": "Zero-point energy of the molecule (units: eV)"
          },
          "rt": {
            "type": "number",
            "title": "Rt",
            "description": "R*T, where R is the gas constant and T is temperature, taken to be 298.15K (units: eV)"
          },
          "total_enthalpy": {
            "type": "number",
            "title": "Total Enthalpy",
            "description": "Total enthalpy of the molecule at 298.15K (units: eV)"
          },
          "total_entropy": {
            "type": "number",
            "title": "Total Entropy",
            "description": "Total entropy of the molecule at 298.15K (units: eV/K)"
          },
          "translational_enthalpy": {
            "type": "number",
            "title": "Translational Enthalpy",
            "description": "Translational enthalpy of the molecule at 298.15K (units: eV)"
          },
          "translational_entropy": {
            "type": "number",
            "title": "Translational Entropy",
            "description": "Translational entropy of the molecule at 298.15K (units: eV/K)"
          },
          "rotational_enthalpy": {
            "type": "number",
            "title": "Rotational Enthalpy",
            "description": "Rotational enthalpy of the molecule at 298.15K (units: eV)"
          },
          "rotational_entropy": {
            "type": "number",
            "title": "Rotational Entropy",
            "description": "Rotational entropy of the molecule at 298.15K (units: eV/K)"
          },
          "vibrational_enthalpy": {
            "type": "number",
            "title": "Vibrational Enthalpy",
            "description": "Vibrational enthalpy of the molecule at 298.15K (units: eV)"
          },
          "vibrational_entropy": {
            "type": "number",
            "title": "Vibrational Entropy",
            "description": "Vibrational entropy of the molecule at 298.15K (units: eV/K)"
          },
          "free_energy": {
            "type": "number",
            "title": "Free Energy",
            "description": "Gibbs free energy of the molecule at 298.15K (units: eV)"
          }
        },
        "type": "object",
        "title": "MoleculeThermoDoc",
        "description": "Base model definition for any singular molecule property. This may contain any amount\nof molecule metadata for the purpose of search\nThis is intended to be inherited and extended not used directly"
      },
      "MoleculesDoc": {
        "properties": {
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements in the molecule."
          },
          "EA": {
            "type": "number",
            "title": "Ea",
            "description": "Electron affinity of the molecule in eV."
          },
          "IE": {
            "type": "number",
            "title": "Ie",
            "description": "Ionization energy of the molecule in eV."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule in +e."
          },
          "pointgroup": {
            "type": "string",
            "title": "Pointgroup",
            "description": "Point group of the molecule in Schoenflies notation."
          },
          "smiles": {
            "type": "string",
            "title": "Smiles",
            "description": "The simplified molecular input line-entry system (SMILES)             representation of the molecule."
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "Materials Project molecule ID. This takes the form mol-*****."
          },
          "molecule": {
            "properties": {
              "@class": { "type": "string", "enum": ["Molecule"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Molecule",
            "description": "Pymatgen molecule object."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Formula Pretty",
            "description": "Chemical formula of the molecule."
          },
          "svg": {
            "type": "string",
            "title": "Svg",
            "description": "String representation of the SVG image of the molecule."
          }
        },
        "type": "object",
        "title": "MoleculesDoc",
        "description": "Molecules relevant to battery electrolytes."
      },
      "Operation": {
        "properties": {
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/OperationTypeEnum" }],
            "description": "Type of the operation as classified by the pipeline."
          },
          "token": {
            "type": "string",
            "title": "Token",
            "description": "Token (word) of the operation as written in paper."
          },
          "conditions": {
            "allOf": [{ "$ref": "#/components/schemas/Conditions" }],
            "title": "Conditions",
            "description": "The conditions linked to this operation."
          }
        },
        "type": "object",
        "title": "Operation"
      },
      "OperationTypeEnum": {
        "type": "string",
        "enum": [
          "StartingSynthesis",
          "MixingOperation",
          "ShapingOperation",
          "DryingOperation",
          "HeatingOperation",
          "QuenchingOperation"
        ],
        "title": "OperationTypeEnum",
        "description": "An enumeration."
      },
      "OrbitalDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "property_id": {
            "type": "string",
            "title": "Property Id",
            "description": "The unique identifier of this property document."
          },
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of the molecule, used as a reference across property documents.This comes in the form of an MPculeID (or appropriately formatted string)",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid"
          },
          "level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used to generate this property document."
          },
          "solvent": {
            "type": "string",
            "title": "Solvent",
            "description": "String representation of the solvent environment used to generate this property document."
          },
          "lot_solvent": {
            "type": "string",
            "title": "Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to generate this property document."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property"
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property"
          },
          "open_shell": {
            "type": "boolean",
            "title": "Open Shell",
            "description": "Is this molecule open-shell (spin multiplicity != 1)?"
          },
          "nbo_population": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["NaturalPopulation"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Nbo Population",
            "description": "Natural electron populations of the molecule"
          },
          "nbo_lone_pairs": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["LonePair"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Nbo Lone Pairs",
            "description": "Lone pair orbitals of a closed-shell molecule"
          },
          "nbo_bonds": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Bond"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Nbo Bonds",
            "description": "Bond-like orbitals of a closed-shell molecule"
          },
          "nbo_interactions": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Interaction"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Nbo Interactions",
            "description": "Orbital-orbital interactions of a closed-shell molecule"
          },
          "alpha_population": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["NaturalPopulation"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Alpha Population",
            "description": "Natural electron populations of the alpha electrons of an open-shell molecule"
          },
          "beta_population": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["NaturalPopulation"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Beta Population",
            "description": "Natural electron populations of the beta electrons of an open-shell molecule"
          },
          "alpha_lone_pairs": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["LonePair"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Alpha Lone Pairs",
            "description": "Alpha electron lone pair orbitals of an open-shell molecule"
          },
          "beta_lone_pairs": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["LonePair"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Beta Lone Pairs",
            "description": "Beta electron lone pair orbitals of an open-shell molecule"
          },
          "alpha_bonds": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Bond"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Alpha Bonds",
            "description": "Alpha electron bond-like orbitals of an open-shell molecule"
          },
          "beta_bonds": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Bond"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Beta Bonds",
            "description": "Beta electron bond-like orbitals of an open-shell molecule"
          },
          "alpha_interactions": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Interaction"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Alpha Interactions",
            "description": "Alpha electron orbital-orbital interactions of an open-shell molecule"
          },
          "beta_interactions": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Interaction"] },
                "@module": {
                  "type": "string",
                  "enum": ["emmet.core.molecules.orbitals"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Beta Interactions",
            "description": "Beta electron orbital-orbital interactions of an open-shell molecule"
          }
        },
        "type": "object",
        "title": "OrbitalDoc",
        "description": "Base model definition for any singular molecule property. This may contain any amount\nof molecule metadata for the purpose of search\nThis is intended to be inherited and extended not used directly"
      },
      "OrbitalType": {
        "enum": [0, 1, 2, 3],
        "title": "OrbitalType",
        "description": "Enum type for orbital type. Indices are basically the azimuthal quantum\nnumber, l."
      },
      "Ordering": {
        "enum": ["FM", "AFM", "FiM", "NM", "Unknown"],
        "title": "Ordering",
        "description": "Enumeration defining possible magnetic orderings."
      },
      "OrigInputs": {
        "properties": {
          "incar": {
            "anyOf": [
              {
                "properties": {
                  "@class": { "type": "string", "enum": ["Incar"] },
                  "@module": {
                    "type": "string",
                    "enum": ["pymatgen.io.vasp.inputs"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              { "type": "object" }
            ],
            "title": "Incar",
            "description": "Pymatgen object representing the INCAR file."
          },
          "poscar": {
            "properties": {
              "@class": { "type": "string", "enum": ["Poscar"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.io.vasp.inputs"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Poscar",
            "description": "Pymatgen object representing the POSCAR file."
          },
          "kpoints": {
            "properties": {
              "@class": { "type": "string", "enum": ["Kpoints"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.io.vasp.inputs"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Kpoints",
            "description": "Pymatgen object representing the KPOINTS file."
          },
          "potcar": {
            "anyOf": [
              { "$ref": "#/components/schemas/Potcar" },
              {
                "items": {},
                "properties": {
                  "@class": { "type": "string", "enum": ["Potcar"] },
                  "@module": {
                    "type": "string",
                    "enum": ["pymatgen.io.vasp.inputs"]
                  },
                  "@version": { "type": "string" }
                },
                "type": "object",
                "required": ["@class", "@module"]
              },
              { "items": {}, "type": "array" }
            ],
            "title": "Potcar",
            "description": "Pymatgen object representing the POTCAR file."
          }
        },
        "type": "object",
        "title": "OrigInputs"
      },
      "OutputDoc": {
        "properties": {
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Output Structure",
            "description": "Output Structure from the VASP calculation."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density of in units of g/cc."
          },
          "energy": {
            "type": "number",
            "title": "Energy",
            "description": "Total Energy in units of eV."
          },
          "forces": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Forces",
            "description": "The force on each atom in units of eV/A^2."
          },
          "stress": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Stress",
            "description": "The stress on the cell in units of kB."
          },
          "energy_per_atom": {
            "type": "number",
            "title": "Energy Per Atom",
            "description": "The final DFT energy per atom for the last calculation"
          },
          "bandgap": {
            "type": "number",
            "title": "Bandgap",
            "description": "The DFT bandgap for the last calculation"
          }
        },
        "type": "object",
        "title": "OutputDoc"
      },
      "OutputSummary": {
        "properties": {
          "initial_molecule": {
            "properties": {
              "@class": { "type": "string", "enum": ["Molecule"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Initial Molecule",
            "description": "Input Molecule object"
          },
          "optimized_molecule": {
            "properties": {
              "@class": { "type": "string", "enum": ["Molecule"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Optimized Molecule",
            "description": "Optimized Molecule object"
          },
          "final_energy": {
            "type": "number",
            "title": "Final Energy",
            "description": "Final electronic energy for the calculation (units: Hartree)"
          },
          "enthalpy": {
            "type": "number",
            "title": "Enthalpy",
            "description": "Total enthalpy of the molecule (units: kcal/mol)"
          },
          "entropy": {
            "type": "number",
            "title": "Entropy",
            "description": "Total entropy of the molecule (units: cal/mol-K"
          },
          "mulliken": {
            "items": {},
            "type": "array",
            "title": "Mulliken",
            "description": "Mulliken atomic partial charges and partial spins"
          },
          "resp": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Resp",
            "description": "Restrained Electrostatic Potential (RESP) atomic partial charges"
          },
          "nbo": {
            "type": "object",
            "title": "Nbo",
            "description": "Natural Bonding Orbital (NBO) output"
          },
          "frequencies": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Frequencies",
            "description": "Vibrational frequencies of the molecule (units: cm^-1)"
          }
        },
        "type": "object",
        "title": "OutputSummary",
        "description": "Summary of an output for a Q-Chem calculation"
      },
      "OxidationStateDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure",
            "description": "The structure used in the generation of the oxidation state data."
          },
          "possible_species": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Possible Species",
            "description": "Possible charged species in this material."
          },
          "possible_valences": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Possible Valences",
            "description": "List of valences for each site in this material."
          },
          "average_oxidation_states": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Average Oxidation States",
            "description": "Average oxidation states for each unique species."
          },
          "method": {
            "type": "string",
            "title": "Method",
            "description": "Method used to compute oxidation states."
          }
        },
        "type": "object",
        "title": "OxidationStateDoc",
        "description": "Oxidation states computed from the structure"
      },
      "PartialChargesDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "property_id": {
            "type": "string",
            "title": "Property Id",
            "description": "The unique identifier of this property document."
          },
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of the molecule, used as a reference across property documents.This comes in the form of an MPculeID (or appropriately formatted string)",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid"
          },
          "level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used to generate this property document."
          },
          "solvent": {
            "type": "string",
            "title": "Solvent",
            "description": "String representation of the solvent environment used to generate this property document."
          },
          "lot_solvent": {
            "type": "string",
            "title": "Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to generate this property document."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property"
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property"
          },
          "method": {
            "type": "string",
            "title": "Method",
            "description": "Method used to compute atomic partial charges"
          },
          "partial_charges": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Partial Charges",
            "description": "Atomic partial charges for the molecule"
          }
        },
        "type": "object",
        "title": "PartialChargesDoc",
        "description": "Atomic partial charges of a molecule"
      },
      "PartialSpinsDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "property_id": {
            "type": "string",
            "title": "Property Id",
            "description": "The unique identifier of this property document."
          },
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of the molecule, used as a reference across property documents.This comes in the form of an MPculeID (or appropriately formatted string)",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid"
          },
          "level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used to generate this property document."
          },
          "solvent": {
            "type": "string",
            "title": "Solvent",
            "description": "String representation of the solvent environment used to generate this property document."
          },
          "lot_solvent": {
            "type": "string",
            "title": "Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to generate this property document."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property"
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property"
          },
          "method": {
            "type": "string",
            "title": "Method",
            "description": "Method used to compute atomic partial spins"
          },
          "partial_spins": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Partial Spins",
            "description": "Atomic partial spins for the molecule"
          }
        },
        "type": "object",
        "title": "PartialSpinsDoc",
        "description": "Atomic partial charges of a molecule"
      },
      "PhaseDiagramDoc": {
        "properties": {
          "phase_diagram_id": {
            "type": "string",
            "title": "Phase Diagram Id",
            "description": "Phase diagram ID consisting of the chemical system and thermo type"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemsys",
            "description": "Dash-delimited string of elements in the material"
          },
          "thermo_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/ThermoType" },
              { "$ref": "#/components/schemas/RunType" }
            ],
            "title": "Thermo Type",
            "description": "Functional types of calculations involved in the energy mixing scheme."
          },
          "phase_diagram": {
            "properties": {
              "@class": { "type": "string", "enum": ["PhaseDiagram"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.analysis.phase_diagram"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Phase Diagram",
            "description": "Phase diagram for the chemical system."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property"
          },
          "property_name": { "type": "string", "title": "Property Name" }
        },
        "type": "object",
        "title": "PhaseDiagramDoc",
        "description": "A phase diagram document"
      },
      "PhononBSDOSDoc": {
        "properties": {
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material. This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "ph_bs": {
            "properties": {
              "@class": {
                "type": "string",
                "enum": ["PhononBandStructureSymmLine"]
              },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.phonon.bandstructure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Ph Bs",
            "description": "Phonon band structure object."
          },
          "ph_dos": {
            "properties": {
              "@class": { "type": "string", "enum": ["PhononDos"] },
              "@module": { "type": "string", "enum": ["pymatgen.phonon.dos"] },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Ph Dos",
            "description": "Phonon density of states object."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation for this Material document."
          }
        },
        "type": "object",
        "title": "PhononBSDOSDoc",
        "description": "Phonon band structures and density of states data."
      },
      "PiezoelectricDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "total": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Total",
            "description": "Total piezoelectric tensor in C/m²"
          },
          "ionic": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Ionic",
            "description": "Ionic contribution to piezoelectric tensor in C/m²"
          },
          "electronic": {
            "items": { "items": { "type": "number" }, "type": "array" },
            "type": "array",
            "title": "Electronic",
            "description": "Electronic contribution to piezoelectric tensor in C/m²"
          },
          "e_ij_max": {
            "type": "number",
            "title": "E Ij Max",
            "description": "Piezoelectric modulus"
          },
          "max_direction": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Max Direction",
            "description": "Miller direction for maximum piezo response"
          },
          "strain_for_max": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Strain For Max",
            "description": "Normalized strain direction for maximum piezo repsonse"
          }
        },
        "type": "object",
        "title": "PiezoelectricDoc",
        "description": "A dielectric package block"
      },
      "PointGroupData": {
        "properties": {
          "point_group": {
            "type": "string",
            "title": "Point Group Symbol",
            "description": "The point group for the lattice"
          },
          "rotation_number": {
            "type": "number",
            "title": "Rotational Symmetry Number",
            "description": "Rotational symmetry number for the molecule"
          },
          "linear": {
            "type": "boolean",
            "title": "Molecule Linearity",
            "description": "Is the molecule linear?"
          },
          "tolerance": {
            "type": "number",
            "title": "Point Group Analyzer Tolerance",
            "description": "Distance tolerance to consider sites as symmetrically equivalent."
          },
          "eigen_tolerance": {
            "type": "number",
            "title": "Interia Tensor Eigenvalue Tolerance",
            "description": "Tolerance to compare eigen values of the inertia tensor."
          },
          "matrix_tolerance": {
            "type": "number",
            "title": "Symmetry Operation Matrix Element Tolerance",
            "description": "Tolerance used to generate the full set of symmetry operations of the point group."
          }
        },
        "type": "object",
        "title": "PointGroupData",
        "description": "Defines symmetry for a molecule document"
      },
      "Potcar": {
        "properties": {
          "pot_type": {
            "type": "string",
            "title": "Pot Type",
            "description": "Pseudo-potential type, e.g. PAW"
          },
          "functional": {
            "type": "string",
            "title": "Functional",
            "description": "Functional type use in the calculation."
          },
          "symbols": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Symbols",
            "description": "List of VASP potcar symbols used in the calculation."
          }
        },
        "type": "object",
        "title": "Potcar"
      },
      "PotcarSpec": {
        "properties": {
          "titel": {
            "type": "string",
            "title": "Titel",
            "description": "TITEL field from POTCAR header"
          },
          "hash": {
            "type": "string",
            "title": "Hash",
            "description": "md5 hash of POTCAR file"
          }
        },
        "type": "object",
        "title": "PotcarSpec",
        "description": "Document defining a VASP POTCAR specification."
      },
      "PropertyOrigin": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The property name"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
                "examples": ["mp-3534", "3453", "mp-834-Ag"]
              },
              {
                "type": "string",
                "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
                "examples": [
                  "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
                  "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
                ]
              }
            ],
            "title": "Task Id",
            "description": "The calculation ID this property comes from"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "The timestamp when this calculation was last updated"
          }
        },
        "type": "object",
        "title": "PropertyOrigin",
        "description": "Provenance document for the origin of properties in a material document"
      },
      "ProvenanceDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "creation date for the first structure corresponding to this material"
          },
          "references": {
            "items": { "type": "string" },
            "type": "array",
            "title": "References",
            "description": "Bibtex reference strings for this material"
          },
          "authors": {
            "items": { "$ref": "#/components/schemas/Author" },
            "type": "array",
            "title": "Authors",
            "description": "List of authors for this material"
          },
          "remarks": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Remarks",
            "description": "List of remarks for the provenance of this material"
          },
          "tags": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Tags"
          },
          "theoretical": {
            "type": "boolean",
            "title": "Theoretical",
            "description": "If this material has any experimental provenance or not"
          },
          "database_IDs": {
            "additionalProperties": {
              "items": { "type": "string" },
              "type": "array"
            },
            "type": "object",
            "title": "Database Ids",
            "description": "Database IDs corresponding to this material"
          },
          "history": {
            "items": { "$ref": "#/components/schemas/History" },
            "type": "array",
            "title": "History",
            "description": "List of history nodes specifying the transformations or orignation of this material for the entry closest matching the material input"
          }
        },
        "type": "object",
        "title": "ProvenanceDoc",
        "description": "A provenance property block"
      },
      "QChemStatus": {
        "enum": ["successful", "unsuccessful"],
        "title": "QChemStatus",
        "description": "Q-Chem Calculation State"
      },
      "ReactionFormula": {
        "properties": {
          "left_side": {
            "items": { "$ref": "#/components/schemas/FormulaPart" },
            "type": "array",
            "title": "Left Side",
            "description": "List of materials and their amounts at the left side."
          },
          "right_side": {
            "items": { "$ref": "#/components/schemas/FormulaPart" },
            "type": "array",
            "title": "Right Side",
            "description": "List of materials and their amounts at the right side."
          },
          "element_substitution": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Element Substitution",
            "description": "Dictionary that contains elemental substitutions"
          }
        },
        "type": "object",
        "title": "ReactionFormula",
        "description": "Model for a balanced reaction"
      },
      "RedoxDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "property_id": {
            "type": "string",
            "title": "Property Id",
            "description": "The unique identifier of this property document."
          },
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of the molecule, used as a reference across property documents.This comes in the form of an MPculeID (or appropriately formatted string)",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid"
          },
          "level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used to generate this property document."
          },
          "solvent": {
            "type": "string",
            "title": "Solvent",
            "description": "String representation of the solvent environment used to generate this property document."
          },
          "lot_solvent": {
            "type": "string",
            "title": "Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to generate this property document."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property"
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property"
          },
          "base_property_id": {
            "type": "string",
            "title": "Base Property Id",
            "description": "Property ID for the thermodynamic data of the base molecule"
          },
          "electron_affinity": {
            "type": "number",
            "title": "Electron Affinity",
            "description": "Vertical electron affinity (units: eV)"
          },
          "ea_task_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Ea Task Id",
            "description": "Task ID for the electron affinity calculation",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "ionization_energy": {
            "type": "number",
            "title": "Ionization Energy",
            "description": "Vertical ionization energy (units: eV)"
          },
          "ie_task_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Ie Task Id",
            "description": "Task ID for the ionization energy calculation",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "reduction_energy": {
            "type": "number",
            "title": "Reduction Energy",
            "description": "Adiabatic electronic energy of reduction (units: eV)"
          },
          "reduction_free_energy": {
            "type": "number",
            "title": "Reduction Free Energy",
            "description": "Adiabatic free energy of reduction (units: eV)"
          },
          "red_molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Red Molecule Id",
            "description": "Molecule ID for adiabatic reduction",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "red_property_id": {
            "type": "string",
            "title": "Red Property Id",
            "description": "Property ID for the thermodynamic data of the reduced molecule"
          },
          "oxidation_energy": {
            "type": "number",
            "title": "Oxidation Energy",
            "description": "Adiabatic electronic energy of oxidation (units: eV)"
          },
          "oxidation_free_energy": {
            "type": "number",
            "title": "Oxidation Free Energy",
            "description": "Adiabatic free energy of oxidation (units: eV)"
          },
          "ox_molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Ox Molecule Id",
            "description": "Molecule ID for adiabatic oxidation",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "ox_property_id": {
            "type": "string",
            "title": "Ox Property Id",
            "description": "Property ID for the thermodynamic data of the oxidized molecule"
          },
          "reduction_potential": {
            "type": "number",
            "title": "Reduction Potential",
            "description": "Reduction potential referenced to the standard hydrogen electrode (SHE) (units: V)"
          },
          "oxidation_potential": {
            "type": "number",
            "title": "Oxidation Potential",
            "description": "Oxidation potential referenced to the standard hydrogen electrode (SHE) (units: V)"
          }
        },
        "type": "object",
        "title": "RedoxDoc",
        "description": "Molecular properties related to reduction and oxidation, including\nvertical ionization energies and electron affinities, as well as reduction\nand oxidation potentials"
      },
      "Response_AbsorptionDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/AbsorptionDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[AbsorptionDoc]",
        "description": "A Generic API Response"
      },
      "Response_AlloyPairDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/AlloyPairDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[AlloyPairDoc]",
        "description": "A Generic API Response"
      },
      "Response_BSObjectDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/BSObjectDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[BSObjectDoc]",
        "description": "A Generic API Response"
      },
      "Response_BondingDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/BondingDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[BondingDoc]",
        "description": "A Generic API Response"
      },
      "Response_ChemEnvDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ChemEnvDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[ChemEnvDoc]",
        "description": "A Generic API Response"
      },
      "Response_ChgcarDataDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ChgcarDataDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[ChgcarDataDoc]",
        "description": "A Generic API Response"
      },
      "Response_DOIDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/DOIDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[DOIDoc]",
        "description": "A Generic API Response"
      },
      "Response_DOSObjectDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/DOSObjectDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[DOSObjectDoc]",
        "description": "A Generic API Response"
      },
      "Response_DeprecationDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/DeprecationDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[DeprecationDoc]",
        "description": "A Generic API Response"
      },
      "Response_DielectricDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/DielectricDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[DielectricDoc]",
        "description": "A Generic API Response"
      },
      "Response_EOSDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/EOSDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[EOSDoc]",
        "description": "A Generic API Response"
      },
      "Response_ElasticityDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ElasticityDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[ElasticityDoc]",
        "description": "A Generic API Response"
      },
      "Response_ElectronicStructureDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ElectronicStructureDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[ElectronicStructureDoc]",
        "description": "A Generic API Response"
      },
      "Response_EntryDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/EntryDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[EntryDoc]",
        "description": "A Generic API Response"
      },
      "Response_FermiDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/FermiDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[FermiDoc]",
        "description": "A Generic API Response"
      },
      "Response_FindMolecule_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/FindMolecule" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[FindMolecule]",
        "description": "A Generic API Response"
      },
      "Response_FindStructure_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/FindStructure" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[FindStructure]",
        "description": "A Generic API Response"
      },
      "Response_FormulaAutocomplete_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/FormulaAutocomplete" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[FormulaAutocomplete]",
        "description": "A Generic API Response"
      },
      "Response_GrainBoundaryDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/GrainBoundaryDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[GrainBoundaryDoc]",
        "description": "A Generic API Response"
      },
      "Response_InsertionElectrodeDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/InsertionElectrodeDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[InsertionElectrodeDoc]",
        "description": "A Generic API Response"
      },
      "Response_MPCompleteDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MPCompleteDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[MPCompleteDoc]",
        "description": "A Generic API Response"
      },
      "Response_MagnetismDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MagnetismDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[MagnetismDoc]",
        "description": "A Generic API Response"
      },
      "Response_MaterialsDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MaterialsDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[MaterialsDoc]",
        "description": "A Generic API Response"
      },
      "Response_MetalBindingDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MetalBindingDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[MetalBindingDoc]",
        "description": "A Generic API Response"
      },
      "Response_MoleculeBondingDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MoleculeBondingDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[MoleculeBondingDoc]",
        "description": "A Generic API Response"
      },
      "Response_MoleculeDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MoleculeDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[MoleculeDoc]",
        "description": "A Generic API Response"
      },
      "Response_MoleculeSummaryDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MoleculeSummaryDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[MoleculeSummaryDoc]",
        "description": "A Generic API Response"
      },
      "Response_MoleculeThermoDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MoleculeThermoDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[MoleculeThermoDoc]",
        "description": "A Generic API Response"
      },
      "Response_MoleculesDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MoleculesDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[MoleculesDoc]",
        "description": "A Generic API Response"
      },
      "Response_OrbitalDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/OrbitalDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[OrbitalDoc]",
        "description": "A Generic API Response"
      },
      "Response_OxidationStateDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/OxidationStateDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[OxidationStateDoc]",
        "description": "A Generic API Response"
      },
      "Response_PartialChargesDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PartialChargesDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[PartialChargesDoc]",
        "description": "A Generic API Response"
      },
      "Response_PartialSpinsDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PartialSpinsDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[PartialSpinsDoc]",
        "description": "A Generic API Response"
      },
      "Response_PhaseDiagramDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PhaseDiagramDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[PhaseDiagramDoc]",
        "description": "A Generic API Response"
      },
      "Response_PhononBSDOSDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PhononBSDOSDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[PhononBSDOSDoc]",
        "description": "A Generic API Response"
      },
      "Response_PiezoelectricDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PiezoelectricDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[PiezoelectricDoc]",
        "description": "A Generic API Response"
      },
      "Response_ProvenanceDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ProvenanceDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[ProvenanceDoc]",
        "description": "A Generic API Response"
      },
      "Response_RedoxDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/RedoxDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[RedoxDoc]",
        "description": "A Generic API Response"
      },
      "Response_RobocrystallogapherDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/RobocrystallogapherDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[RobocrystallogapherDoc]",
        "description": "A Generic API Response"
      },
      "Response_SimilarityDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/SimilarityDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[SimilarityDoc]",
        "description": "A Generic API Response"
      },
      "Response_SubstratesDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/SubstratesDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[SubstratesDoc]",
        "description": "A Generic API Response"
      },
      "Response_SummaryDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/SummaryDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[SummaryDoc]",
        "description": "A Generic API Response"
      },
      "Response_SummaryStats_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/SummaryStats" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[SummaryStats]",
        "description": "A Generic API Response"
      },
      "Response_SurfacePropDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/SurfacePropDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[SurfacePropDoc]",
        "description": "A Generic API Response"
      },
      "Response_SynthesisSearchResultModel_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SynthesisSearchResultModel"
            },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[SynthesisSearchResultModel]",
        "description": "A Generic API Response"
      },
      "Response_TaskDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TaskDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[TaskDoc]",
        "description": "A Generic API Response"
      },
      "Response_TaskDocument_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TaskDocument" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[TaskDocument]",
        "description": "A Generic API Response"
      },
      "Response_ThermoDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ThermoDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[ThermoDoc]",
        "description": "A Generic API Response"
      },
      "Response_TrajectoryDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TrajectoryDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[TrajectoryDoc]",
        "description": "A Generic API Response"
      },
      "Response_VibrationDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/VibrationDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[VibrationDoc]",
        "description": "A Generic API Response"
      },
      "Response_XASDoc_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/XASDoc" },
            "type": "array",
            "title": "Data",
            "description": "List of returned data"
          },
          "errors": {
            "items": { "$ref": "#/components/schemas/Error" },
            "type": "array",
            "title": "Errors",
            "description": "Any errors on processing this query"
          },
          "meta": {
            "allOf": [{ "$ref": "#/components/schemas/Meta" }],
            "title": "Meta",
            "description": "Extra information for the query"
          }
        },
        "type": "object",
        "title": "Response[XASDoc]",
        "description": "A Generic API Response"
      },
      "RobocrystallogapherDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Decription text from robocrytallographer."
          },
          "condensed_structure": {
            "allOf": [
              { "$ref": "#/components/schemas/CondensedStructureData" }
            ],
            "title": "Condensed Structure",
            "description": "Condensed structure data from robocrytallographer."
          },
          "robocrys_version": {
            "type": "string",
            "title": "Robocrys Version",
            "description": "The version of Robocrystallographer used to generate this document."
          }
        },
        "type": "object",
        "title": "RobocrystallogapherDoc",
        "description": "This document contains the descriptive data from robocrystallographer\nfor a material:\n    Structural features, mineral prototypes, dimensionality, ..."
      },
      "RunStatistics": {
        "properties": {
          "average_memory": {
            "type": "number",
            "title": "Average Memory",
            "description": "The average memory used in kb"
          },
          "max_memory": {
            "type": "number",
            "title": "Max Memory",
            "description": "The maximum memory used in kb"
          },
          "elapsed_time": {
            "type": "number",
            "title": "Elapsed Time",
            "description": "The real time elapsed in seconds"
          },
          "system_time": {
            "type": "number",
            "title": "System Time",
            "description": "The system CPU time in seconds"
          },
          "user_time": {
            "type": "number",
            "title": "User Time",
            "description": "The user CPU time spent by VASP in seconds"
          },
          "total_time": {
            "type": "number",
            "title": "Total Time",
            "description": "The total CPU time for this calculation"
          },
          "cores": {
            "type": "integer",
            "title": "Cores",
            "description": "The number of cores used by VASP"
          }
        },
        "type": "object",
        "title": "RunStatistics",
        "description": "Summary of the run statistics for a VASP calculation."
      },
      "RunType": {
        "enum": [
          "AM05",
          "GGA",
          "PBE",
          "PBESol",
          "PBEsol",
          "RevPBE+PADE",
          "optB86b",
          "optB88",
          "optPBE",
          "revPBE",
          "B3LYP",
          "HF",
          "HSE03",
          "HSE06",
          "PB0",
          "M06L",
          "MBJL",
          "MS0",
          "MS1",
          "MS2",
          "RTPSS",
          "SCAN",
          "R2SCAN",
          "TPSS",
          "R2SCAN-rVV10",
          "SCAN-rVV10",
          "optB86b-vdW",
          "optB88-vdW",
          "optPBE-vdW",
          "rev-vdW-DF2",
          "revPBE-vdW",
          "vdW-DF2",
          "AM05+U",
          "GGA+U",
          "PBE+U",
          "PBESol+U",
          "PBEsol+U",
          "RevPBE+PADE+U",
          "optB86b+U",
          "optB88+U",
          "optPBE+U",
          "revPBE+U",
          "B3LYP+U",
          "HF+U",
          "HSE03+U",
          "HSE06+U",
          "PB0+U",
          "M06L+U",
          "MBJL+U",
          "MS0+U",
          "MS1+U",
          "MS2+U",
          "RTPSS+U",
          "SCAN+U",
          "R2SCAN+U",
          "TPSS+U",
          "R2SCAN-rVV10+U",
          "SCAN-rVV10+U",
          "optB86b-vdW+U",
          "optB88-vdW+U",
          "optPBE-vdW+U",
          "rev-vdW-DF2+U",
          "revPBE-vdW+U",
          "vdW-DF2+U",
          "LDA",
          "LDA+U"
        ],
        "title": "RunType",
        "description": "VASP calculation run types"
      },
      "SimilarityDoc": {
        "properties": {
          "sim": {
            "items": { "$ref": "#/components/schemas/SimilarityEntry" },
            "type": "array",
            "title": "Sim",
            "description": "List containing similar structure data for a given material."
          },
          "material_id": {
            "type": "string",
            "title": "Material Id",
            "description": "The Materials Project ID for the material. This comes in the form: mp-******"
          }
        },
        "type": "object",
        "title": "SimilarityDoc",
        "description": "Model for a document containing structure similarity data"
      },
      "SimilarityEntry": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The Materials Project ID for the matched material. This comes in the form: mp-******."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements in the matched material."
          },
          "dissimilarity": {
            "type": "number",
            "title": "Dissimilarity",
            "description": "Dissimilarity measure for the matched material in %."
          },
          "formula": {
            "type": "string",
            "title": "Formula",
            "description": "Formula of the matched material."
          }
        },
        "type": "object",
        "title": "SimilarityEntry",
        "description": "Find similar materials to a specified material based on crystal geometry."
      },
      "Spin": {
        "enum": [1, -1],
        "title": "Spin",
        "description": "Enum type for Spin. Only up and down.\nUsage: Spin.up, Spin.down."
      },
      "SubstratesDoc": {
        "properties": {
          "sub_form": {
            "type": "string",
            "title": "Sub Form",
            "description": "Reduced formula of the substrate."
          },
          "sub_id": {
            "type": "string",
            "title": "Sub Id",
            "description": "Materials Project ID of the substrate material. This comes in the form: mp-******."
          },
          "film_orient": {
            "type": "string",
            "title": "Film Orient",
            "description": "Surface orientation of the film material."
          },
          "area": {
            "type": "number",
            "title": "Area",
            "description": "Minimum coincident interface area in Å²."
          },
          "energy": {
            "type": "number",
            "title": "Energy",
            "description": "Elastic energy in meV."
          },
          "film_id": {
            "type": "string",
            "title": "Film Id",
            "description": "The Materials Project ID of the film material. This comes in the form: mp-******."
          },
          "orient": {
            "type": "string",
            "title": "Orient",
            "description": "Surface orientation of the substrate material."
          }
        },
        "type": "object",
        "title": "SubstratesDoc",
        "description": "Possible growth substrates for a given material."
      },
      "SummaryDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure",
            "description": "The lowest energy structure for this material.",
            "source": "materials"
          },
          "task_ids": {
            "items": {
              "type": "string",
              "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
              "examples": ["mp-3534", "3453", "mp-834-Ag"]
            },
            "type": "array",
            "title": "Calculation IDs",
            "description": "List of Calculations IDs associated with this material.",
            "source": "materials"
          },
          "uncorrected_energy_per_atom": {
            "type": "number",
            "title": "Uncorrected Energy Per Atom",
            "description": "The total DFT energy of this material per atom in eV/atom.",
            "source": "thermo"
          },
          "energy_per_atom": {
            "type": "number",
            "title": "Energy Per Atom",
            "description": "The total corrected DFT energy of this material per atom in eV/atom.",
            "source": "thermo"
          },
          "formation_energy_per_atom": {
            "type": "number",
            "title": "Formation Energy Per Atom",
            "description": "The formation energy per atom in eV/atom.",
            "source": "thermo"
          },
          "energy_above_hull": {
            "type": "number",
            "title": "Energy Above Hull",
            "description": "The energy above the hull in eV/Atom.",
            "source": "thermo"
          },
          "is_stable": {
            "type": "boolean",
            "title": "Is Stable",
            "description": "Flag for whether this material is on the hull and therefore stable.",
            "source": "thermo"
          },
          "equilibrium_reaction_energy_per_atom": {
            "type": "number",
            "title": "Equilibrium Reaction Energy Per Atom",
            "description": "The reaction energy of a stable entry from the neighboring equilibrium stable materials in eV. Also known as the inverse distance to hull.",
            "source": "thermo"
          },
          "decomposes_to": {
            "items": { "$ref": "#/components/schemas/DecompositionProduct" },
            "type": "array",
            "title": "Decomposes To",
            "description": "List of decomposition data for this material. Only valid for metastable or unstable material.",
            "source": "thermo"
          },
          "xas": {
            "items": { "$ref": "#/components/schemas/XASSearchData" },
            "type": "array",
            "title": "Xas",
            "description": "List of xas documents.",
            "source": "xas"
          },
          "grain_boundaries": {
            "items": { "$ref": "#/components/schemas/GBSearchData" },
            "type": "array",
            "title": "Grain Boundaries",
            "description": "List of grain boundary documents.",
            "source": "grain_boundary"
          },
          "band_gap": {
            "type": "number",
            "title": "Band Gap",
            "description": "Band gap energy in eV.",
            "source": "electronic_structure"
          },
          "cbm": {
            "anyOf": [{ "type": "number" }, { "type": "object" }],
            "title": "Cbm",
            "description": "Conduction band minimum data.",
            "source": "electronic_structure"
          },
          "vbm": {
            "anyOf": [{ "type": "number" }, { "type": "object" }],
            "title": "Vbm",
            "description": "Valence band maximum data.",
            "source": "electronic_structure"
          },
          "efermi": {
            "type": "number",
            "title": "Efermi",
            "description": "Fermi energy in eV.",
            "source": "electronic_structure"
          },
          "is_gap_direct": {
            "type": "boolean",
            "title": "Is Gap Direct",
            "description": "Whether the band gap is direct.",
            "source": "electronic_structure"
          },
          "is_metal": {
            "type": "boolean",
            "title": "Is Metal",
            "description": "Whether the material is a metal.",
            "source": "electronic_structure"
          },
          "es_source_calc_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
                "examples": ["mp-3534", "3453", "mp-834-Ag"]
              },
              { "type": "integer" }
            ],
            "title": "Es Source Calc Id",
            "description": "The source calculation ID for the electronic structure data.",
            "source": "electronic_structure"
          },
          "bandstructure": {
            "allOf": [{ "$ref": "#/components/schemas/BandstructureData" }],
            "title": "Bandstructure",
            "description": "Band structure data for the material.",
            "source": "electronic_structure"
          },
          "dos": {
            "allOf": [{ "$ref": "#/components/schemas/DosData" }],
            "title": "Dos",
            "description": "Density of states data for the material.",
            "source": "electronic_structure"
          },
          "dos_energy_up": {
            "type": "number",
            "title": "Dos Energy Up",
            "description": "Spin-up DOS band gap in eV.",
            "source": "electronic_structure"
          },
          "dos_energy_down": {
            "type": "number",
            "title": "Dos Energy Down",
            "description": "Spin-down DOS band gap in eV.",
            "source": "electronic_structure"
          },
          "is_magnetic": {
            "type": "boolean",
            "title": "Is Magnetic",
            "description": "Whether the material is magnetic.",
            "source": "magnetism"
          },
          "ordering": {
            "type": "string",
            "title": "Ordering",
            "description": "Type of magnetic ordering.",
            "source": "magnetism"
          },
          "total_magnetization": {
            "type": "number",
            "title": "Total Magnetization",
            "description": "Total magnetization in μB.",
            "source": "magnetism"
          },
          "total_magnetization_normalized_vol": {
            "type": "number",
            "title": "Total Magnetization Normalized Vol",
            "description": "Total magnetization normalized by volume in μB/Å³.",
            "source": "magnetism"
          },
          "total_magnetization_normalized_formula_units": {
            "type": "number",
            "title": "Total Magnetization Normalized Formula Units",
            "description": "Total magnetization normalized by formula unit in μB/f.u. .",
            "source": "magnetism"
          },
          "num_magnetic_sites": {
            "type": "integer",
            "title": "Num Magnetic Sites",
            "description": "The number of magnetic sites.",
            "source": "magnetism"
          },
          "num_unique_magnetic_sites": {
            "type": "integer",
            "title": "Num Unique Magnetic Sites",
            "description": "The number of unique magnetic sites.",
            "source": "magnetism"
          },
          "types_of_magnetic_species": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "Magnetic specie elements.",
            "source": "magnetism"
          },
          "k_voigt": {
            "type": "number",
            "title": "K Voigt",
            "description": "Voigt average of the bulk modulus."
          },
          "k_reuss": {
            "type": "number",
            "title": "K Reuss",
            "description": "Reuss average of the bulk modulus in GPa."
          },
          "k_vrh": {
            "type": "number",
            "title": "K Vrh",
            "description": "Voigt-Reuss-Hill average of the bulk modulus in GPa."
          },
          "g_voigt": {
            "type": "number",
            "title": "G Voigt",
            "description": "Voigt average of the shear modulus in GPa."
          },
          "g_reuss": {
            "type": "number",
            "title": "G Reuss",
            "description": "Reuss average of the shear modulus in GPa."
          },
          "g_vrh": {
            "type": "number",
            "title": "G Vrh",
            "description": "Voigt-Reuss-Hill average of the shear modulus in GPa."
          },
          "universal_anisotropy": {
            "type": "number",
            "title": "Universal Anisotropy",
            "description": "Elastic anisotropy."
          },
          "homogeneous_poisson": {
            "type": "number",
            "title": "Homogeneous Poisson",
            "description": "Poisson's ratio."
          },
          "e_total": {
            "type": "number",
            "title": "E Total",
            "description": "Total dielectric constant.",
            "source": "dielectric"
          },
          "e_ionic": {
            "type": "number",
            "title": "E Ionic",
            "description": "Ionic contribution to dielectric constant.",
            "source": "dielectric"
          },
          "e_electronic": {
            "type": "number",
            "title": "E Electronic",
            "description": "Electronic contribution to dielectric constant.",
            "source": "dielectric"
          },
          "n": {
            "type": "number",
            "title": "N",
            "description": "Refractive index.",
            "source": "dielectric"
          },
          "e_ij_max": {
            "type": "number",
            "title": "E Ij Max",
            "description": "Piezoelectric modulus.",
            "source": "piezoelectric"
          },
          "weighted_surface_energy_EV_PER_ANG2": {
            "type": "number",
            "title": "Weighted Surface Energy Ev Per Ang2",
            "description": "Weighted surface energy in eV/Å².",
            "source": "surface_properties"
          },
          "weighted_surface_energy": {
            "type": "number",
            "title": "Weighted Surface Energy",
            "description": "Weighted surface energy in J/m².",
            "source": "surface_properties"
          },
          "weighted_work_function": {
            "type": "number",
            "title": "Weighted Work Function",
            "description": "Weighted work function in eV.",
            "source": "surface_properties"
          },
          "surface_anisotropy": {
            "type": "number",
            "title": "Surface Anisotropy",
            "description": "Surface energy anisotropy.",
            "source": "surface_properties"
          },
          "shape_factor": {
            "type": "number",
            "title": "Shape Factor",
            "description": "Shape factor.",
            "source": "surface_properties"
          },
          "has_reconstructed": {
            "type": "boolean",
            "title": "Has Reconstructed",
            "description": "Whether the material has any reconstructed surfaces.",
            "source": "surface_properties"
          },
          "possible_species": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Possible Species",
            "description": "Possible charged species in this material.",
            "source": "oxidation_states"
          },
          "has_props": {
            "items": {
              "$ref": "#/components/schemas/emmet__core__summary__HasProps"
            },
            "type": "array",
            "description": "List of properties that are available for a given material.",
            "source": "summary"
          },
          "theoretical": {
            "type": "boolean",
            "title": "Theoretical",
            "description": "Whether the material is theoretical.",
            "source": "provenance"
          },
          "database_IDs": {
            "additionalProperties": {
              "items": { "type": "string" },
              "type": "array"
            },
            "type": "object",
            "title": "Database Ids",
            "description": "External database IDs corresponding to this material."
          }
        },
        "type": "object",
        "title": "SummaryDoc",
        "description": "Summary information about materials and their properties, useful for materials\nscreening studies and searching."
      },
      "SummaryStats": {
        "properties": {
          "field": {
            "type": "string",
            "title": "Field",
            "description": "Field name corresponding to a field in SummaryDoc."
          },
          "num_samples": {
            "type": "integer",
            "title": "Sample",
            "description": "The number of documents sampled to generate statistics. If unspecified, statistics will be from entire database."
          },
          "min": {
            "type": "number",
            "title": "Minimum",
            "description": "The minimum value of the specified field used to generate statistics."
          },
          "max": {
            "type": "number",
            "title": "Maximum",
            "description": "The maximum value of the specified field used to generate statistics."
          },
          "median": {
            "type": "number",
            "title": "Median",
            "description": "The median of the field values."
          },
          "mean": {
            "type": "number",
            "title": "Mean",
            "description": "The mean of the field values."
          },
          "distribution": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Distribution",
            "description": "List of floats specifying a kernel density estimator of the distribution, equally spaced between specified minimum and maximum values."
          }
        },
        "type": "object",
        "title": "SummaryStats",
        "description": "Statistics about a specified SummaryDoc field."
      },
      "SurfaceEntry": {
        "properties": {
          "miller_index": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Miller Index",
            "description": "Miller index of surface."
          },
          "surface_energy_EV_PER_ANG2": {
            "type": "number",
            "title": "Surface Energy Ev Per Ang2",
            "description": "Surface energy in eV/Å²."
          },
          "surface_energy": {
            "type": "number",
            "title": "Surface Energy",
            "description": "Surface energy in J/m²."
          },
          "is_reconstructed": {
            "type": "boolean",
            "title": "Is Reconstructed",
            "description": "Whether it is a reconstructed surface."
          },
          "structure": {
            "type": "string",
            "title": "Structure",
            "description": "CIF of slab structure."
          },
          "work_function": {
            "type": "number",
            "title": "Work Function",
            "description": "Work function in eV."
          },
          "efermi": {
            "type": "number",
            "title": "Efermi",
            "description": "Fermi energy in eV."
          },
          "area_fraction": {
            "type": "number",
            "title": "Area Fraction",
            "description": "Area fraction."
          },
          "has_wulff": {
            "type": "boolean",
            "title": "Has Wulff",
            "description": "Whether the surface has wulff entry."
          }
        },
        "type": "object",
        "title": "SurfaceEntry",
        "description": "Surface energies, miller indicies, ..."
      },
      "SurfacePropDoc": {
        "properties": {
          "surfaces": {
            "items": { "$ref": "#/components/schemas/SurfaceEntry" },
            "type": "array",
            "title": "Surfaces",
            "description": "List of individual surface data."
          },
          "weighted_surface_energy_EV_PER_ANG2": {
            "type": "number",
            "title": "Weighted Surface Energy Ev Per Ang2",
            "description": "Weighted surface energy in eV/Å²"
          },
          "weighted_surface_energy": {
            "type": "number",
            "title": "Weighted Surface Energy",
            "description": "Weighted surface energy in J/m²"
          },
          "surface_anisotropy": {
            "type": "number",
            "title": "Surface Anisotropy",
            "description": "Surface energy anisotropy."
          },
          "pretty_formula": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Reduced Formula of the material."
          },
          "shape_factor": {
            "type": "number",
            "title": "Shape Factor",
            "description": "Shape factor."
          },
          "weighted_work_function": {
            "type": "number",
            "title": "Weighted Work Function",
            "description": "Weighted work function in eV."
          },
          "has_reconstructed": {
            "type": "boolean",
            "title": "Has Reconstructed",
            "description": "Whether the entry has any reconstructed surfaces."
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The Materials Project ID of the material. This comes in the form: mp-******."
          },
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure",
            "description": "The conventional crystal structure of the material."
          }
        },
        "type": "object",
        "title": "SurfacePropDoc",
        "description": "Model for a document containing surface properties data"
      },
      "SymmetryData": {
        "properties": {
          "crystal_system": {
            "allOf": [{ "$ref": "#/components/schemas/CrystalSystem" }],
            "title": "Crystal System",
            "description": "The crystal system for this lattice."
          },
          "symbol": {
            "type": "string",
            "title": "Space Group Symbol",
            "description": "The spacegroup symbol for the lattice."
          },
          "number": {
            "type": "integer",
            "title": "Space Group Number",
            "description": "The spacegroup number for the lattice."
          },
          "point_group": {
            "type": "string",
            "title": "Point Group Symbol",
            "description": "The point group for the lattice."
          },
          "symprec": {
            "type": "number",
            "title": "Symmetry Finding Precision",
            "description": "The precision given to spglib to determine the symmetry of this lattice."
          },
          "version": { "type": "string", "title": "SPGLib version" }
        },
        "type": "object",
        "title": "SymmetryData",
        "description": "Defines a symmetry data set for materials documents"
      },
      "SynthesisSearchResultModel": {
        "properties": {
          "doi": {
            "type": "string",
            "title": "Doi",
            "description": "DOI of the journal article."
          },
          "paragraph_string": {
            "type": "string",
            "title": "Paragraph String",
            "description": "The paragraph from which this recipe is extracted."
          },
          "synthesis_type": {
            "allOf": [{ "$ref": "#/components/schemas/SynthesisTypeEnum" }],
            "description": "Type of the synthesis recipe."
          },
          "reaction_string": {
            "type": "string",
            "title": "Reaction String",
            "description": "String representation of this recipe."
          },
          "reaction": {
            "allOf": [{ "$ref": "#/components/schemas/ReactionFormula" }],
            "title": "Reaction",
            "description": "The balanced reaction formula."
          },
          "target": {
            "allOf": [{ "$ref": "#/components/schemas/ExtractedMaterial" }],
            "title": "Target",
            "description": "The target material."
          },
          "targets_formula": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Targets Formula",
            "description": "List of synthesized target material compositions."
          },
          "precursors_formula": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Precursors Formula",
            "description": "List of precursor material compositions."
          },
          "targets_formula_s": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Targets Formula S",
            "description": "List of synthesized target material compositions, as strings."
          },
          "precursors_formula_s": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Precursors Formula S",
            "description": "List of precursor material compositions, as strings."
          },
          "precursors": {
            "items": { "$ref": "#/components/schemas/ExtractedMaterial" },
            "type": "array",
            "title": "Precursors",
            "description": "List of precursor materials."
          },
          "operations": {
            "items": { "$ref": "#/components/schemas/Operation" },
            "type": "array",
            "title": "Operations",
            "description": "List of operations used to synthesize this recipe."
          },
          "search_score": {
            "type": "number",
            "title": "Search Score",
            "description": "Search score."
          },
          "highlights": {
            "items": {},
            "type": "array",
            "title": "Highlights",
            "description": "Search highlights."
          }
        },
        "type": "object",
        "title": "SynthesisSearchResultModel",
        "description": "Model for a document containing synthesis recipes\ndata and additional keyword search results"
      },
      "SynthesisTypeEnum": {
        "type": "string",
        "enum": ["solid-state", "sol-gel"],
        "title": "SynthesisTypeEnum",
        "description": "An enumeration."
      },
      "TaskDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "tags": {
            "items": { "type": "string" },
            "type": "array",
            "title": "tag",
            "description": "Metadata tagged to a given task."
          },
          "dir_name": {
            "type": "string",
            "title": "Dir Name",
            "description": "The directory for this VASP task"
          },
          "state": {
            "allOf": [{ "$ref": "#/components/schemas/TaskState" }],
            "description": "State of this calculation"
          },
          "calcs_reversed": {
            "items": { "$ref": "#/components/schemas/Calculation" },
            "type": "array",
            "title": "Calcs reversed data",
            "description": "Detailed data for each VASP calculation contributing to the task document."
          },
          "structure": {
            "properties": {
              "@class": { "type": "string", "enum": ["Structure"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Structure",
            "description": "Final output structure from the task"
          },
          "task_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/emmet__core__vasp__calc_types__enums__CalcType"
              },
              {
                "$ref": "#/components/schemas/emmet__core__vasp__calc_types__enums__TaskType"
              }
            ],
            "title": "Task Type",
            "description": "The type of calculation."
          },
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The (task) ID of this calculation, used as a universal reference across property documents.This comes in the form: mp-******."
          },
          "orig_inputs": {
            "allOf": [{ "$ref": "#/components/schemas/OrigInputs" }],
            "title": "Orig Inputs",
            "description": "The exact set of input parameters used to generate the current task document."
          },
          "input": {
            "allOf": [{ "$ref": "#/components/schemas/InputDoc" }],
            "title": "Input",
            "description": "The input structure used to generate the current task document."
          },
          "output": {
            "allOf": [{ "$ref": "#/components/schemas/OutputDoc" }],
            "title": "Output",
            "description": "The exact set of output parameters used to generate the current task document."
          },
          "included_objects": {
            "items": { "$ref": "#/components/schemas/VaspObject" },
            "type": "array",
            "description": "List of VASP objects included with this task document"
          },
          "vasp_objects": {
            "type": "object",
            "title": "Vasp Objects",
            "description": "Vasp objects associated with this task"
          },
          "entry": {
            "properties": {
              "@class": { "type": "string", "enum": ["ComputedEntry"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.entries.computed_entries"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Entry",
            "description": "The ComputedEntry from the task doc"
          },
          "task_label": {
            "type": "string",
            "title": "Task Label",
            "description": "A description of the task"
          },
          "author": {
            "type": "string",
            "title": "Author",
            "description": "Author extracted from transformations"
          },
          "icsd_id": {
            "type": "string",
            "title": "Icsd Id",
            "description": "Inorganic Crystal Structure Database id of the structure"
          },
          "transformations": {
            "type": "object",
            "title": "Transformations",
            "description": "Information on the structural transformations, parsed from a transformations.json file"
          },
          "additional_json": {
            "type": "object",
            "title": "Additional Json",
            "description": "Additional json loaded from the calculation directory"
          },
          "custodian": {
            "items": { "$ref": "#/components/schemas/CustodianDoc" },
            "type": "array",
            "title": "Calcs reversed data",
            "description": "Detailed custodian data for each VASP calculation contributing to the task document."
          },
          "analysis": {
            "allOf": [{ "$ref": "#/components/schemas/AnalysisDoc" }],
            "title": "Calculation Analysis",
            "description": "Some analysis of calculation data after collection."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation for this task document"
          }
        },
        "type": "object",
        "title": "TaskDoc",
        "description": "Calculation-level details about VASP calculations that power Materials Project."
      },
      "TaskDocument": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "calc_code": { "type": "string", "title": "Calc Code" },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "The version of the calculation code"
          },
          "dir_name": {
            "type": "string",
            "title": "Dir Name",
            "description": "The directory for this task"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
                "examples": ["mp-3534", "3453", "mp-834-Ag"]
              },
              {
                "type": "string",
                "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
                "examples": [
                  "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
                  "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
                ]
              }
            ],
            "title": "Task Id",
            "description": "the Task ID For this document"
          },
          "completed": { "type": "boolean", "title": "Completed" },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Completed At",
            "description": "Timestamp for when this task was completed"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for when this task document was last updated"
          },
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid",
            "description": "Whether this task document passed validation or not"
          },
          "state": {
            "allOf": [{ "$ref": "#/components/schemas/QChemStatus" }],
            "description": "State of this calculation"
          },
          "cputime": {
            "type": "number",
            "title": "Cputime",
            "description": "The system CPU time in seconds"
          },
          "walltime": {
            "type": "number",
            "title": "Walltime",
            "description": "The real elapsed time in seconds"
          },
          "calcs_reversed": {
            "items": { "type": "object" },
            "type": "array",
            "title": "Calcs Reversed",
            "description": "The 'raw' calculation docs used to assembled this task"
          },
          "orig": {
            "type": "object",
            "title": "Orig",
            "description": "Summary of the original Q-Chem inputs"
          },
          "critic2": {
            "type": "object",
            "title": "Critic2",
            "description": "Output from Critic2 critical point analysis code"
          },
          "custom_smd": {
            "type": "string",
            "title": "Custom Smd",
            "description": "Parameter string for SMD implicit solvent model"
          },
          "special_run_type": {
            "type": "string",
            "title": "Special Run Type",
            "description": "Special workflow name (if applicable)"
          },
          "smiles": {
            "type": "string",
            "title": "Smiles",
            "description": "Simplified molecular-input line-entry system (SMILES) string for the molecule involved in this calculation."
          },
          "species_hash": {
            "type": "string",
            "title": "Species Hash",
            "description": "Weisfeiler Lehman (WL) graph hash using the atom species as the graph node attribute."
          },
          "coord_hash": {
            "type": "string",
            "title": "Coord Hash",
            "description": "Weisfeiler Lehman (WL) graph hash using the atom coordinates as the graph node attribute."
          },
          "tags": { "title": "Tags", "description": "Metadata tags" },
          "warnings": {
            "additionalProperties": { "type": "boolean" },
            "type": "object",
            "title": "Warnings",
            "description": "Any warnings related to this task document"
          },
          "output": { "$ref": "#/components/schemas/OutputSummary" }
        },
        "type": "object",
        "title": "TaskDocument",
        "description": "Definition of a Q-Chem task document"
      },
      "TaskState": {
        "enum": ["successful", "failed", "error"],
        "title": "TaskState",
        "description": "VASP Calculation State"
      },
      "ThermoDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The Materials Project ID of the material, used as a universal reference across property documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/DeprecationMessage" },
                { "type": "string" }
              ]
            },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "thermo_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/ThermoType" },
              { "$ref": "#/components/schemas/RunType" }
            ],
            "title": "Thermo Type",
            "description": "Functional types of calculations involved in the energy mixing scheme."
          },
          "thermo_id": {
            "type": "string",
            "title": "Thermo Id",
            "description": "Unique document ID which is composed of the Material ID and thermo data type."
          },
          "uncorrected_energy_per_atom": {
            "type": "number",
            "title": "Uncorrected Energy Per Atom",
            "description": "The total DFT energy of this material per atom in eV/atom."
          },
          "energy_per_atom": {
            "type": "number",
            "title": "Energy Per Atom",
            "description": "The total corrected DFT energy of this material per atom in eV/atom."
          },
          "energy_uncertainy_per_atom": {
            "type": "number",
            "title": "Energy Uncertainy Per Atom"
          },
          "formation_energy_per_atom": {
            "type": "number",
            "title": "Formation Energy Per Atom",
            "description": "The formation energy per atom in eV/atom."
          },
          "energy_above_hull": {
            "type": "number",
            "title": "Energy Above Hull",
            "description": "The energy above the hull in eV/Atom."
          },
          "is_stable": {
            "type": "boolean",
            "title": "Is Stable",
            "description": "Flag for whether this material is on the hull and therefore stable."
          },
          "equilibrium_reaction_energy_per_atom": {
            "type": "number",
            "title": "Equilibrium Reaction Energy Per Atom",
            "description": "The reaction energy of a stable entry from the neighboring equilibrium stable materials in eV. Also known as the inverse distance to hull."
          },
          "decomposes_to": {
            "items": { "$ref": "#/components/schemas/DecompositionProduct" },
            "type": "array",
            "title": "Decomposes To",
            "description": "List of decomposition data for this material. Only valid for metastable or unstable material."
          },
          "decomposition_enthalpy": {
            "type": "number",
            "title": "Decomposition Enthalpy",
            "description": "Decomposition enthalpy as defined by `get_decomp_and_phase_separation_energy` in pymatgen."
          },
          "decomposition_enthalpy_decomposes_to": {
            "items": { "$ref": "#/components/schemas/DecompositionProduct" },
            "type": "array",
            "title": "Decomposition Enthalpy Decomposes To",
            "description": "List of decomposition data associated with the decomposition_enthalpy quantity."
          },
          "energy_type": {
            "type": "string",
            "title": "Energy Type",
            "description": "The type of calculation this energy evaluation comes from."
          },
          "entry_types": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Entry Types",
            "description": "List of available energy types computed for this material."
          },
          "entries": {
            "additionalProperties": {
              "anyOf": [
                {
                  "properties": {
                    "@class": { "type": "string", "enum": ["ComputedEntry"] },
                    "@module": {
                      "type": "string",
                      "enum": ["pymatgen.entries.computed_entries"]
                    },
                    "@version": { "type": "string" }
                  },
                  "type": "object",
                  "required": ["@class", "@module"]
                },
                {
                  "properties": {
                    "@class": {
                      "type": "string",
                      "enum": ["ComputedStructureEntry"]
                    },
                    "@module": {
                      "type": "string",
                      "enum": ["pymatgen.entries.computed_entries"]
                    },
                    "@version": { "type": "string" }
                  },
                  "type": "object",
                  "required": ["@class", "@module"]
                }
              ]
            },
            "type": "object",
            "title": "Entries",
            "description": "List of all entries that are valid for this material. The keys for this dictionary are names of various calculation types."
          }
        },
        "type": "object",
        "title": "ThermoDoc",
        "description": "A thermo entry document"
      },
      "ThermoType": {
        "enum": ["GGA_GGA+U", "GGA_GGA+U_R2SCAN", "R2SCAN", "UNKNOWN"],
        "title": "ThermoType",
        "description": "An enumeration."
      },
      "TrajectoryDoc": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "The (task) ID of this calculation, used as a universal reference across property documents.This comes in the form: mp-******."
          },
          "trajectories": {
            "items": {
              "properties": {
                "@class": { "type": "string", "enum": ["Trajectory"] },
                "@module": {
                  "type": "string",
                  "enum": ["pymatgen.core.trajectory"]
                },
                "@version": { "type": "string" }
              },
              "type": "object",
              "required": ["@class", "@module"]
            },
            "type": "array",
            "title": "Trajectories",
            "description": "Trajectory data for calculations associated with a task doc."
          }
        },
        "type": "object",
        "title": "TrajectoryDoc",
        "description": "Model for task trajectory data"
      },
      "Type": {
        "enum": ["XANES", "EXAFS", "XAFS"],
        "title": "Type",
        "description": "The type of XAS Spectrum\nXANES - Just the near-edge region\nEXAFS - Just the extended region\nXAFS - Fully stitched XANES + EXAFS"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "Value": {
        "properties": {
          "min_value": {
            "type": "number",
            "title": "Min Value",
            "description": "Minimal value."
          },
          "max_value": {
            "type": "number",
            "title": "Max Value",
            "description": "Maximal value."
          },
          "values": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Values",
            "description": "Enumerated values in the literature."
          },
          "units": {
            "type": "string",
            "title": "Units",
            "description": "Unit of this value."
          }
        },
        "type": "object",
        "title": "Value"
      },
      "Values": {
        "properties": {
          "values": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Values",
            "description": "List of values."
          },
          "min_value": {
            "type": "number",
            "title": "Min Value",
            "description": "Minimal value."
          },
          "max_value": {
            "type": "number",
            "title": "Max Value",
            "description": "Maximal value."
          }
        },
        "type": "object",
        "title": "Values"
      },
      "VaspObject": {
        "enum": [
          "bandstructure",
          "dos",
          "chgcar",
          "aeccar0",
          "aeccar1",
          "aeccar2",
          "trajectory",
          "elfcar",
          "wavecar",
          "locpot",
          "optic",
          "procar"
        ],
        "title": "VaspObject",
        "description": "Types of VASP data objects."
      },
      "VibrationDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "charge": {
            "type": "integer",
            "title": "Charge",
            "description": "Charge of the molecule"
          },
          "spin_multiplicity": {
            "type": "integer",
            "title": "Spin Multiplicity",
            "description": "Spin multiplicity of the molecule"
          },
          "natoms": {
            "type": "integer",
            "title": "Natoms",
            "description": "Total number of atoms in the molecule"
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the molecule"
          },
          "nelements": { "type": "integer", "title": "Number of Elements" },
          "nelectrons": {
            "type": "integer",
            "title": "Number of electrons",
            "description": "The total number of electrons for the molecule"
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the molecule"
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition"
          },
          "formula_alphabetical": {
            "type": "string",
            "title": "Alphabetical Formula",
            "description": "Alphabetical molecular formula"
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula"
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the molecule"
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/PointGroupData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this molecule"
          },
          "property_name": { "type": "string", "title": "Property Name" },
          "property_id": {
            "type": "string",
            "title": "Property Id",
            "description": "The unique identifier of this property document."
          },
          "molecule_id": {
            "type": "string",
            "pattern": "^^([A-Za-z]+-)?([A-Fa-f0-9]+)-([A-Za-z0-9]+)-(m?[0-9]+)-([0-9]+)$",
            "title": "Molecule Id",
            "description": "The ID of the molecule, used as a reference across property documents.This comes in the form of an MPculeID (or appropriately formatted string)",
            "examples": [
              "1a525231bdac3f13e2fac0962fe8d053-Mg1-0-1",
              "22b40b99719ac570fc7e6225e855ec6e-F5Li1P1-m1-2mpcule-b9ba54febc77d2a9177accf4605767db-C1H41-2"
            ]
          },
          "deprecated": {
            "type": "boolean",
            "title": "Deprecated",
            "description": "Whether this property document is deprecated."
          },
          "deprecation_reasons": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Deprecation Reasons",
            "description": "List of deprecation tags detailing why this document isn't valid"
          },
          "level_of_theory": {
            "allOf": [{ "$ref": "#/components/schemas/LevelOfTheory" }],
            "description": "Level of theory used to generate this property document."
          },
          "solvent": {
            "type": "string",
            "title": "Solvent",
            "description": "String representation of the solvent environment used to generate this property document."
          },
          "lot_solvent": {
            "type": "string",
            "title": "Lot Solvent",
            "description": "String representation of the level of theory and solvent environment used to generate this property document."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property"
          },
          "origins": {
            "items": { "$ref": "#/components/schemas/PropertyOrigin" },
            "type": "array",
            "title": "Origins",
            "description": "Dictionary for tracking the provenance of properties"
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property"
          },
          "molecule": {
            "properties": {
              "@class": { "type": "string", "enum": ["Molecule"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.structure"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Molecule",
            "description": "Molecular structure"
          },
          "frequencies": {
            "items": { "type": "number" },
            "type": "array",
            "title": "Frequencies",
            "description": "List of molecular vibrational frequencies"
          },
          "frequency_modes": {
            "items": {
              "items": { "items": { "type": "number" }, "type": "array" },
              "type": "array"
            },
            "type": "array",
            "title": "Frequency Modes",
            "description": "Vibrational frequency modes of the molecule"
          },
          "ir_intensities": {
            "items": { "type": "number" },
            "type": "array",
            "title": "IR intensities",
            "description": "Intensities for IR vibrational spectrum peaks"
          },
          "ir_activities": {
            "items": {},
            "type": "array",
            "title": "IR activities",
            "description": "List indicating if frequency-modes are IR-active"
          }
        },
        "type": "object",
        "title": "VibrationDoc",
        "description": "Base model definition for any singular molecule property. This may contain any amount\nof molecule metadata for the purpose of search\nThis is intended to be inherited and extended not used directly"
      },
      "XASDoc": {
        "properties": {
          "builder_meta": {
            "allOf": [{ "$ref": "#/components/schemas/EmmetMeta" }],
            "title": "Builder Meta",
            "description": "Builder metadata."
          },
          "nsites": {
            "type": "integer",
            "title": "Nsites",
            "description": "Total number of sites in the structure."
          },
          "elements": {
            "items": { "$ref": "#/components/schemas/Element" },
            "type": "array",
            "description": "List of elements in the material."
          },
          "nelements": {
            "type": "integer",
            "title": "Nelements",
            "description": "Number of elements."
          },
          "composition": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Composition",
            "description": "Full composition for the material."
          },
          "composition_reduced": {
            "properties": {
              "@class": { "type": "string", "enum": ["Composition"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.core.composition"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Reduced Composition",
            "description": "Simplified representation of the composition."
          },
          "formula_pretty": {
            "type": "string",
            "title": "Pretty Formula",
            "description": "Cleaned representation of the formula."
          },
          "formula_anonymous": {
            "type": "string",
            "title": "Anonymous Formula",
            "description": "Anonymized representation of the formula."
          },
          "chemsys": {
            "type": "string",
            "title": "Chemical System",
            "description": "dash-delimited string of elements in the material."
          },
          "volume": {
            "type": "number",
            "title": "Volume",
            "description": "Total volume for this structure in Angstroms^3."
          },
          "density": {
            "type": "number",
            "title": "Density",
            "description": "Density in grams per cm^3."
          },
          "density_atomic": {
            "type": "number",
            "title": "Packing Density",
            "description": "The atomic packing density in atoms per cm^3."
          },
          "symmetry": {
            "allOf": [{ "$ref": "#/components/schemas/SymmetryData" }],
            "title": "Symmetry",
            "description": "Symmetry data for this material."
          },
          "spectrum_name": { "type": "string", "title": "Spectrum Name" },
          "material_id": {
            "type": "string",
            "pattern": "^([A-Za-z]*-)?(\\d+)(-[A-Za-z0-9]+)*$",
            "title": "Material Id",
            "description": "The ID of the material, used as a universal reference across proeprty documents.This comes in the form: mp-******.",
            "examples": ["mp-3534", "3453", "mp-834-Ag"]
          },
          "spectrum_id": {
            "type": "string",
            "title": "Spectrum Document ID",
            "description": "The unique ID for this spectrum document."
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated",
            "description": "Timestamp for the most recent calculation update for this property."
          },
          "warnings": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Warnings",
            "description": "Any warnings related to this property."
          },
          "spectrum": {
            "properties": {
              "@class": { "type": "string", "enum": ["XAS"] },
              "@module": {
                "type": "string",
                "enum": ["pymatgen.analysis.xas.spectrum"]
              },
              "@version": { "type": "string" }
            },
            "type": "object",
            "required": ["@class", "@module"],
            "title": "Spectrum"
          },
          "task_ids": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Calculation IDs",
            "description": "List of Calculations IDs used to make this XAS spectrum."
          },
          "absorbing_element": {
            "allOf": [{ "$ref": "#/components/schemas/Element" }],
            "description": "Absoring element."
          },
          "spectrum_type": {
            "allOf": [{ "$ref": "#/components/schemas/Type" }],
            "description": "XAS spectrum type."
          },
          "edge": {
            "allOf": [{ "$ref": "#/components/schemas/Edge" }],
            "title": "Absorption Edge",
            "description": "The interaction edge for XAS."
          }
        },
        "type": "object",
        "title": "XASDoc",
        "description": "Document describing a XAS Spectrum."
      },
      "XASSearchData": {
        "properties": {
          "edge": {
            "allOf": [{ "$ref": "#/components/schemas/Edge" }],
            "title": "Absorption Edge",
            "description": "The interaction edge for XAS",
            "source": "xas"
          },
          "absorbing_element": {
            "allOf": [{ "$ref": "#/components/schemas/Element" }],
            "description": "Absorbing element.",
            "source": "xas"
          },
          "spectrum_type": {
            "allOf": [{ "$ref": "#/components/schemas/Type" }],
            "description": "Type of XAS spectrum.",
            "source": "xas"
          }
        },
        "type": "object",
        "title": "XASSearchData",
        "description": "Fields in XAS sub docs in summary"
      },
      "emmet__core__molecules__summary__HasProps": {
        "enum": [
          "molecules",
          "bonding",
          "metal_binding",
          "orbitals",
          "partial_charges",
          "partial_spins",
          "redox",
          "thermo",
          "vibration"
        ],
        "title": "HasProps",
        "description": "Enum of possible hasprops values."
      },
      "emmet__core__qchem__calc_types__enums__CalcType": {
        "enum": [
          "PBE/6-31g*/VACUUM Single Point",
          "PBE/6-31g*/VACUUM Force",
          "PBE/6-31g*/VACUUM Geometry Optimization",
          "PBE/6-31g*/VACUUM Frequency Analysis",
          "PBE/6-31g*/VACUUM Frequency Flattening Geometry Optimization",
          "PBE/6-31g*/VACUUM Transition State Geometry Optimization",
          "PBE/6-31g*/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "PBE/6-31g*/VACUUM Unknown",
          "PBE/6-31g*/PCM Single Point",
          "PBE/6-31g*/PCM Force",
          "PBE/6-31g*/PCM Geometry Optimization",
          "PBE/6-31g*/PCM Frequency Analysis",
          "PBE/6-31g*/PCM Frequency Flattening Geometry Optimization",
          "PBE/6-31g*/PCM Transition State Geometry Optimization",
          "PBE/6-31g*/PCM Frequency Flattening Transition State Geometry Optimization",
          "PBE/6-31g*/PCM Unknown",
          "PBE/6-31g*/SMD Single Point",
          "PBE/6-31g*/SMD Force",
          "PBE/6-31g*/SMD Geometry Optimization",
          "PBE/6-31g*/SMD Frequency Analysis",
          "PBE/6-31g*/SMD Frequency Flattening Geometry Optimization",
          "PBE/6-31g*/SMD Transition State Geometry Optimization",
          "PBE/6-31g*/SMD Frequency Flattening Transition State Geometry Optimization",
          "PBE/6-31g*/SMD Unknown",
          "PBE/def2-SVPD/VACUUM Single Point",
          "PBE/def2-SVPD/VACUUM Force",
          "PBE/def2-SVPD/VACUUM Geometry Optimization",
          "PBE/def2-SVPD/VACUUM Frequency Analysis",
          "PBE/def2-SVPD/VACUUM Frequency Flattening Geometry Optimization",
          "PBE/def2-SVPD/VACUUM Transition State Geometry Optimization",
          "PBE/def2-SVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-SVPD/VACUUM Unknown",
          "PBE/def2-SVPD/PCM Single Point",
          "PBE/def2-SVPD/PCM Force",
          "PBE/def2-SVPD/PCM Geometry Optimization",
          "PBE/def2-SVPD/PCM Frequency Analysis",
          "PBE/def2-SVPD/PCM Frequency Flattening Geometry Optimization",
          "PBE/def2-SVPD/PCM Transition State Geometry Optimization",
          "PBE/def2-SVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-SVPD/PCM Unknown",
          "PBE/def2-SVPD/SMD Single Point",
          "PBE/def2-SVPD/SMD Force",
          "PBE/def2-SVPD/SMD Geometry Optimization",
          "PBE/def2-SVPD/SMD Frequency Analysis",
          "PBE/def2-SVPD/SMD Frequency Flattening Geometry Optimization",
          "PBE/def2-SVPD/SMD Transition State Geometry Optimization",
          "PBE/def2-SVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-SVPD/SMD Unknown",
          "PBE/def2-TZVP/VACUUM Single Point",
          "PBE/def2-TZVP/VACUUM Force",
          "PBE/def2-TZVP/VACUUM Geometry Optimization",
          "PBE/def2-TZVP/VACUUM Frequency Analysis",
          "PBE/def2-TZVP/VACUUM Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVP/VACUUM Transition State Geometry Optimization",
          "PBE/def2-TZVP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVP/VACUUM Unknown",
          "PBE/def2-TZVP/PCM Single Point",
          "PBE/def2-TZVP/PCM Force",
          "PBE/def2-TZVP/PCM Geometry Optimization",
          "PBE/def2-TZVP/PCM Frequency Analysis",
          "PBE/def2-TZVP/PCM Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVP/PCM Transition State Geometry Optimization",
          "PBE/def2-TZVP/PCM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVP/PCM Unknown",
          "PBE/def2-TZVP/SMD Single Point",
          "PBE/def2-TZVP/SMD Force",
          "PBE/def2-TZVP/SMD Geometry Optimization",
          "PBE/def2-TZVP/SMD Frequency Analysis",
          "PBE/def2-TZVP/SMD Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVP/SMD Transition State Geometry Optimization",
          "PBE/def2-TZVP/SMD Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVP/SMD Unknown",
          "PBE/def2-TZVPD/VACUUM Single Point",
          "PBE/def2-TZVPD/VACUUM Force",
          "PBE/def2-TZVPD/VACUUM Geometry Optimization",
          "PBE/def2-TZVPD/VACUUM Frequency Analysis",
          "PBE/def2-TZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVPD/VACUUM Transition State Geometry Optimization",
          "PBE/def2-TZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVPD/VACUUM Unknown",
          "PBE/def2-TZVPD/PCM Single Point",
          "PBE/def2-TZVPD/PCM Force",
          "PBE/def2-TZVPD/PCM Geometry Optimization",
          "PBE/def2-TZVPD/PCM Frequency Analysis",
          "PBE/def2-TZVPD/PCM Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVPD/PCM Transition State Geometry Optimization",
          "PBE/def2-TZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVPD/PCM Unknown",
          "PBE/def2-TZVPD/SMD Single Point",
          "PBE/def2-TZVPD/SMD Force",
          "PBE/def2-TZVPD/SMD Geometry Optimization",
          "PBE/def2-TZVPD/SMD Frequency Analysis",
          "PBE/def2-TZVPD/SMD Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVPD/SMD Transition State Geometry Optimization",
          "PBE/def2-TZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVPD/SMD Unknown",
          "PBE/def2-TZVPP/VACUUM Single Point",
          "PBE/def2-TZVPP/VACUUM Force",
          "PBE/def2-TZVPP/VACUUM Geometry Optimization",
          "PBE/def2-TZVPP/VACUUM Frequency Analysis",
          "PBE/def2-TZVPP/VACUUM Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVPP/VACUUM Transition State Geometry Optimization",
          "PBE/def2-TZVPP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVPP/VACUUM Unknown",
          "PBE/def2-TZVPP/PCM Single Point",
          "PBE/def2-TZVPP/PCM Force",
          "PBE/def2-TZVPP/PCM Geometry Optimization",
          "PBE/def2-TZVPP/PCM Frequency Analysis",
          "PBE/def2-TZVPP/PCM Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVPP/PCM Transition State Geometry Optimization",
          "PBE/def2-TZVPP/PCM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVPP/PCM Unknown",
          "PBE/def2-TZVPP/SMD Single Point",
          "PBE/def2-TZVPP/SMD Force",
          "PBE/def2-TZVPP/SMD Geometry Optimization",
          "PBE/def2-TZVPP/SMD Frequency Analysis",
          "PBE/def2-TZVPP/SMD Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVPP/SMD Transition State Geometry Optimization",
          "PBE/def2-TZVPP/SMD Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVPP/SMD Unknown",
          "PBE/def2-TZVPPD/VACUUM Single Point",
          "PBE/def2-TZVPPD/VACUUM Force",
          "PBE/def2-TZVPPD/VACUUM Geometry Optimization",
          "PBE/def2-TZVPPD/VACUUM Frequency Analysis",
          "PBE/def2-TZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVPPD/VACUUM Transition State Geometry Optimization",
          "PBE/def2-TZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVPPD/VACUUM Unknown",
          "PBE/def2-TZVPPD/PCM Single Point",
          "PBE/def2-TZVPPD/PCM Force",
          "PBE/def2-TZVPPD/PCM Geometry Optimization",
          "PBE/def2-TZVPPD/PCM Frequency Analysis",
          "PBE/def2-TZVPPD/PCM Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVPPD/PCM Transition State Geometry Optimization",
          "PBE/def2-TZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVPPD/PCM Unknown",
          "PBE/def2-TZVPPD/SMD Single Point",
          "PBE/def2-TZVPPD/SMD Force",
          "PBE/def2-TZVPPD/SMD Geometry Optimization",
          "PBE/def2-TZVPPD/SMD Frequency Analysis",
          "PBE/def2-TZVPPD/SMD Frequency Flattening Geometry Optimization",
          "PBE/def2-TZVPPD/SMD Transition State Geometry Optimization",
          "PBE/def2-TZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-TZVPPD/SMD Unknown",
          "PBE/def2-QZVPD/VACUUM Single Point",
          "PBE/def2-QZVPD/VACUUM Force",
          "PBE/def2-QZVPD/VACUUM Geometry Optimization",
          "PBE/def2-QZVPD/VACUUM Frequency Analysis",
          "PBE/def2-QZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "PBE/def2-QZVPD/VACUUM Transition State Geometry Optimization",
          "PBE/def2-QZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-QZVPD/VACUUM Unknown",
          "PBE/def2-QZVPD/PCM Single Point",
          "PBE/def2-QZVPD/PCM Force",
          "PBE/def2-QZVPD/PCM Geometry Optimization",
          "PBE/def2-QZVPD/PCM Frequency Analysis",
          "PBE/def2-QZVPD/PCM Frequency Flattening Geometry Optimization",
          "PBE/def2-QZVPD/PCM Transition State Geometry Optimization",
          "PBE/def2-QZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-QZVPD/PCM Unknown",
          "PBE/def2-QZVPD/SMD Single Point",
          "PBE/def2-QZVPD/SMD Force",
          "PBE/def2-QZVPD/SMD Geometry Optimization",
          "PBE/def2-QZVPD/SMD Frequency Analysis",
          "PBE/def2-QZVPD/SMD Frequency Flattening Geometry Optimization",
          "PBE/def2-QZVPD/SMD Transition State Geometry Optimization",
          "PBE/def2-QZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-QZVPD/SMD Unknown",
          "PBE/def2-QZVPPD/VACUUM Single Point",
          "PBE/def2-QZVPPD/VACUUM Force",
          "PBE/def2-QZVPPD/VACUUM Geometry Optimization",
          "PBE/def2-QZVPPD/VACUUM Frequency Analysis",
          "PBE/def2-QZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "PBE/def2-QZVPPD/VACUUM Transition State Geometry Optimization",
          "PBE/def2-QZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-QZVPPD/VACUUM Unknown",
          "PBE/def2-QZVPPD/PCM Single Point",
          "PBE/def2-QZVPPD/PCM Force",
          "PBE/def2-QZVPPD/PCM Geometry Optimization",
          "PBE/def2-QZVPPD/PCM Frequency Analysis",
          "PBE/def2-QZVPPD/PCM Frequency Flattening Geometry Optimization",
          "PBE/def2-QZVPPD/PCM Transition State Geometry Optimization",
          "PBE/def2-QZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-QZVPPD/PCM Unknown",
          "PBE/def2-QZVPPD/SMD Single Point",
          "PBE/def2-QZVPPD/SMD Force",
          "PBE/def2-QZVPPD/SMD Geometry Optimization",
          "PBE/def2-QZVPPD/SMD Frequency Analysis",
          "PBE/def2-QZVPPD/SMD Frequency Flattening Geometry Optimization",
          "PBE/def2-QZVPPD/SMD Transition State Geometry Optimization",
          "PBE/def2-QZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "PBE/def2-QZVPPD/SMD Unknown",
          "B97-D/6-31g*/VACUUM Single Point",
          "B97-D/6-31g*/VACUUM Force",
          "B97-D/6-31g*/VACUUM Geometry Optimization",
          "B97-D/6-31g*/VACUUM Frequency Analysis",
          "B97-D/6-31g*/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D/6-31g*/VACUUM Transition State Geometry Optimization",
          "B97-D/6-31g*/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/6-31g*/VACUUM Unknown",
          "B97-D/6-31g*/PCM Single Point",
          "B97-D/6-31g*/PCM Force",
          "B97-D/6-31g*/PCM Geometry Optimization",
          "B97-D/6-31g*/PCM Frequency Analysis",
          "B97-D/6-31g*/PCM Frequency Flattening Geometry Optimization",
          "B97-D/6-31g*/PCM Transition State Geometry Optimization",
          "B97-D/6-31g*/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/6-31g*/PCM Unknown",
          "B97-D/6-31g*/SMD Single Point",
          "B97-D/6-31g*/SMD Force",
          "B97-D/6-31g*/SMD Geometry Optimization",
          "B97-D/6-31g*/SMD Frequency Analysis",
          "B97-D/6-31g*/SMD Frequency Flattening Geometry Optimization",
          "B97-D/6-31g*/SMD Transition State Geometry Optimization",
          "B97-D/6-31g*/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D/6-31g*/SMD Unknown",
          "B97-D/def2-SVPD/VACUUM Single Point",
          "B97-D/def2-SVPD/VACUUM Force",
          "B97-D/def2-SVPD/VACUUM Geometry Optimization",
          "B97-D/def2-SVPD/VACUUM Frequency Analysis",
          "B97-D/def2-SVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D/def2-SVPD/VACUUM Transition State Geometry Optimization",
          "B97-D/def2-SVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-SVPD/VACUUM Unknown",
          "B97-D/def2-SVPD/PCM Single Point",
          "B97-D/def2-SVPD/PCM Force",
          "B97-D/def2-SVPD/PCM Geometry Optimization",
          "B97-D/def2-SVPD/PCM Frequency Analysis",
          "B97-D/def2-SVPD/PCM Frequency Flattening Geometry Optimization",
          "B97-D/def2-SVPD/PCM Transition State Geometry Optimization",
          "B97-D/def2-SVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-SVPD/PCM Unknown",
          "B97-D/def2-SVPD/SMD Single Point",
          "B97-D/def2-SVPD/SMD Force",
          "B97-D/def2-SVPD/SMD Geometry Optimization",
          "B97-D/def2-SVPD/SMD Frequency Analysis",
          "B97-D/def2-SVPD/SMD Frequency Flattening Geometry Optimization",
          "B97-D/def2-SVPD/SMD Transition State Geometry Optimization",
          "B97-D/def2-SVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-SVPD/SMD Unknown",
          "B97-D/def2-TZVP/VACUUM Single Point",
          "B97-D/def2-TZVP/VACUUM Force",
          "B97-D/def2-TZVP/VACUUM Geometry Optimization",
          "B97-D/def2-TZVP/VACUUM Frequency Analysis",
          "B97-D/def2-TZVP/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVP/VACUUM Transition State Geometry Optimization",
          "B97-D/def2-TZVP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVP/VACUUM Unknown",
          "B97-D/def2-TZVP/PCM Single Point",
          "B97-D/def2-TZVP/PCM Force",
          "B97-D/def2-TZVP/PCM Geometry Optimization",
          "B97-D/def2-TZVP/PCM Frequency Analysis",
          "B97-D/def2-TZVP/PCM Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVP/PCM Transition State Geometry Optimization",
          "B97-D/def2-TZVP/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVP/PCM Unknown",
          "B97-D/def2-TZVP/SMD Single Point",
          "B97-D/def2-TZVP/SMD Force",
          "B97-D/def2-TZVP/SMD Geometry Optimization",
          "B97-D/def2-TZVP/SMD Frequency Analysis",
          "B97-D/def2-TZVP/SMD Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVP/SMD Transition State Geometry Optimization",
          "B97-D/def2-TZVP/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVP/SMD Unknown",
          "B97-D/def2-TZVPD/VACUUM Single Point",
          "B97-D/def2-TZVPD/VACUUM Force",
          "B97-D/def2-TZVPD/VACUUM Geometry Optimization",
          "B97-D/def2-TZVPD/VACUUM Frequency Analysis",
          "B97-D/def2-TZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVPD/VACUUM Transition State Geometry Optimization",
          "B97-D/def2-TZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVPD/VACUUM Unknown",
          "B97-D/def2-TZVPD/PCM Single Point",
          "B97-D/def2-TZVPD/PCM Force",
          "B97-D/def2-TZVPD/PCM Geometry Optimization",
          "B97-D/def2-TZVPD/PCM Frequency Analysis",
          "B97-D/def2-TZVPD/PCM Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVPD/PCM Transition State Geometry Optimization",
          "B97-D/def2-TZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVPD/PCM Unknown",
          "B97-D/def2-TZVPD/SMD Single Point",
          "B97-D/def2-TZVPD/SMD Force",
          "B97-D/def2-TZVPD/SMD Geometry Optimization",
          "B97-D/def2-TZVPD/SMD Frequency Analysis",
          "B97-D/def2-TZVPD/SMD Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVPD/SMD Transition State Geometry Optimization",
          "B97-D/def2-TZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVPD/SMD Unknown",
          "B97-D/def2-TZVPP/VACUUM Single Point",
          "B97-D/def2-TZVPP/VACUUM Force",
          "B97-D/def2-TZVPP/VACUUM Geometry Optimization",
          "B97-D/def2-TZVPP/VACUUM Frequency Analysis",
          "B97-D/def2-TZVPP/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVPP/VACUUM Transition State Geometry Optimization",
          "B97-D/def2-TZVPP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVPP/VACUUM Unknown",
          "B97-D/def2-TZVPP/PCM Single Point",
          "B97-D/def2-TZVPP/PCM Force",
          "B97-D/def2-TZVPP/PCM Geometry Optimization",
          "B97-D/def2-TZVPP/PCM Frequency Analysis",
          "B97-D/def2-TZVPP/PCM Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVPP/PCM Transition State Geometry Optimization",
          "B97-D/def2-TZVPP/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVPP/PCM Unknown",
          "B97-D/def2-TZVPP/SMD Single Point",
          "B97-D/def2-TZVPP/SMD Force",
          "B97-D/def2-TZVPP/SMD Geometry Optimization",
          "B97-D/def2-TZVPP/SMD Frequency Analysis",
          "B97-D/def2-TZVPP/SMD Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVPP/SMD Transition State Geometry Optimization",
          "B97-D/def2-TZVPP/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVPP/SMD Unknown",
          "B97-D/def2-TZVPPD/VACUUM Single Point",
          "B97-D/def2-TZVPPD/VACUUM Force",
          "B97-D/def2-TZVPPD/VACUUM Geometry Optimization",
          "B97-D/def2-TZVPPD/VACUUM Frequency Analysis",
          "B97-D/def2-TZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVPPD/VACUUM Transition State Geometry Optimization",
          "B97-D/def2-TZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVPPD/VACUUM Unknown",
          "B97-D/def2-TZVPPD/PCM Single Point",
          "B97-D/def2-TZVPPD/PCM Force",
          "B97-D/def2-TZVPPD/PCM Geometry Optimization",
          "B97-D/def2-TZVPPD/PCM Frequency Analysis",
          "B97-D/def2-TZVPPD/PCM Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVPPD/PCM Transition State Geometry Optimization",
          "B97-D/def2-TZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVPPD/PCM Unknown",
          "B97-D/def2-TZVPPD/SMD Single Point",
          "B97-D/def2-TZVPPD/SMD Force",
          "B97-D/def2-TZVPPD/SMD Geometry Optimization",
          "B97-D/def2-TZVPPD/SMD Frequency Analysis",
          "B97-D/def2-TZVPPD/SMD Frequency Flattening Geometry Optimization",
          "B97-D/def2-TZVPPD/SMD Transition State Geometry Optimization",
          "B97-D/def2-TZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-TZVPPD/SMD Unknown",
          "B97-D/def2-QZVPD/VACUUM Single Point",
          "B97-D/def2-QZVPD/VACUUM Force",
          "B97-D/def2-QZVPD/VACUUM Geometry Optimization",
          "B97-D/def2-QZVPD/VACUUM Frequency Analysis",
          "B97-D/def2-QZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D/def2-QZVPD/VACUUM Transition State Geometry Optimization",
          "B97-D/def2-QZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-QZVPD/VACUUM Unknown",
          "B97-D/def2-QZVPD/PCM Single Point",
          "B97-D/def2-QZVPD/PCM Force",
          "B97-D/def2-QZVPD/PCM Geometry Optimization",
          "B97-D/def2-QZVPD/PCM Frequency Analysis",
          "B97-D/def2-QZVPD/PCM Frequency Flattening Geometry Optimization",
          "B97-D/def2-QZVPD/PCM Transition State Geometry Optimization",
          "B97-D/def2-QZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-QZVPD/PCM Unknown",
          "B97-D/def2-QZVPD/SMD Single Point",
          "B97-D/def2-QZVPD/SMD Force",
          "B97-D/def2-QZVPD/SMD Geometry Optimization",
          "B97-D/def2-QZVPD/SMD Frequency Analysis",
          "B97-D/def2-QZVPD/SMD Frequency Flattening Geometry Optimization",
          "B97-D/def2-QZVPD/SMD Transition State Geometry Optimization",
          "B97-D/def2-QZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-QZVPD/SMD Unknown",
          "B97-D/def2-QZVPPD/VACUUM Single Point",
          "B97-D/def2-QZVPPD/VACUUM Force",
          "B97-D/def2-QZVPPD/VACUUM Geometry Optimization",
          "B97-D/def2-QZVPPD/VACUUM Frequency Analysis",
          "B97-D/def2-QZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D/def2-QZVPPD/VACUUM Transition State Geometry Optimization",
          "B97-D/def2-QZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-QZVPPD/VACUUM Unknown",
          "B97-D/def2-QZVPPD/PCM Single Point",
          "B97-D/def2-QZVPPD/PCM Force",
          "B97-D/def2-QZVPPD/PCM Geometry Optimization",
          "B97-D/def2-QZVPPD/PCM Frequency Analysis",
          "B97-D/def2-QZVPPD/PCM Frequency Flattening Geometry Optimization",
          "B97-D/def2-QZVPPD/PCM Transition State Geometry Optimization",
          "B97-D/def2-QZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-QZVPPD/PCM Unknown",
          "B97-D/def2-QZVPPD/SMD Single Point",
          "B97-D/def2-QZVPPD/SMD Force",
          "B97-D/def2-QZVPPD/SMD Geometry Optimization",
          "B97-D/def2-QZVPPD/SMD Frequency Analysis",
          "B97-D/def2-QZVPPD/SMD Frequency Flattening Geometry Optimization",
          "B97-D/def2-QZVPPD/SMD Transition State Geometry Optimization",
          "B97-D/def2-QZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D/def2-QZVPPD/SMD Unknown",
          "B97-D3/6-31g*/VACUUM Single Point",
          "B97-D3/6-31g*/VACUUM Force",
          "B97-D3/6-31g*/VACUUM Geometry Optimization",
          "B97-D3/6-31g*/VACUUM Frequency Analysis",
          "B97-D3/6-31g*/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D3/6-31g*/VACUUM Transition State Geometry Optimization",
          "B97-D3/6-31g*/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/6-31g*/VACUUM Unknown",
          "B97-D3/6-31g*/PCM Single Point",
          "B97-D3/6-31g*/PCM Force",
          "B97-D3/6-31g*/PCM Geometry Optimization",
          "B97-D3/6-31g*/PCM Frequency Analysis",
          "B97-D3/6-31g*/PCM Frequency Flattening Geometry Optimization",
          "B97-D3/6-31g*/PCM Transition State Geometry Optimization",
          "B97-D3/6-31g*/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/6-31g*/PCM Unknown",
          "B97-D3/6-31g*/SMD Single Point",
          "B97-D3/6-31g*/SMD Force",
          "B97-D3/6-31g*/SMD Geometry Optimization",
          "B97-D3/6-31g*/SMD Frequency Analysis",
          "B97-D3/6-31g*/SMD Frequency Flattening Geometry Optimization",
          "B97-D3/6-31g*/SMD Transition State Geometry Optimization",
          "B97-D3/6-31g*/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/6-31g*/SMD Unknown",
          "B97-D3/def2-SVPD/VACUUM Single Point",
          "B97-D3/def2-SVPD/VACUUM Force",
          "B97-D3/def2-SVPD/VACUUM Geometry Optimization",
          "B97-D3/def2-SVPD/VACUUM Frequency Analysis",
          "B97-D3/def2-SVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-SVPD/VACUUM Transition State Geometry Optimization",
          "B97-D3/def2-SVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-SVPD/VACUUM Unknown",
          "B97-D3/def2-SVPD/PCM Single Point",
          "B97-D3/def2-SVPD/PCM Force",
          "B97-D3/def2-SVPD/PCM Geometry Optimization",
          "B97-D3/def2-SVPD/PCM Frequency Analysis",
          "B97-D3/def2-SVPD/PCM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-SVPD/PCM Transition State Geometry Optimization",
          "B97-D3/def2-SVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-SVPD/PCM Unknown",
          "B97-D3/def2-SVPD/SMD Single Point",
          "B97-D3/def2-SVPD/SMD Force",
          "B97-D3/def2-SVPD/SMD Geometry Optimization",
          "B97-D3/def2-SVPD/SMD Frequency Analysis",
          "B97-D3/def2-SVPD/SMD Frequency Flattening Geometry Optimization",
          "B97-D3/def2-SVPD/SMD Transition State Geometry Optimization",
          "B97-D3/def2-SVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-SVPD/SMD Unknown",
          "B97-D3/def2-TZVP/VACUUM Single Point",
          "B97-D3/def2-TZVP/VACUUM Force",
          "B97-D3/def2-TZVP/VACUUM Geometry Optimization",
          "B97-D3/def2-TZVP/VACUUM Frequency Analysis",
          "B97-D3/def2-TZVP/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVP/VACUUM Transition State Geometry Optimization",
          "B97-D3/def2-TZVP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVP/VACUUM Unknown",
          "B97-D3/def2-TZVP/PCM Single Point",
          "B97-D3/def2-TZVP/PCM Force",
          "B97-D3/def2-TZVP/PCM Geometry Optimization",
          "B97-D3/def2-TZVP/PCM Frequency Analysis",
          "B97-D3/def2-TZVP/PCM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVP/PCM Transition State Geometry Optimization",
          "B97-D3/def2-TZVP/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVP/PCM Unknown",
          "B97-D3/def2-TZVP/SMD Single Point",
          "B97-D3/def2-TZVP/SMD Force",
          "B97-D3/def2-TZVP/SMD Geometry Optimization",
          "B97-D3/def2-TZVP/SMD Frequency Analysis",
          "B97-D3/def2-TZVP/SMD Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVP/SMD Transition State Geometry Optimization",
          "B97-D3/def2-TZVP/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVP/SMD Unknown",
          "B97-D3/def2-TZVPD/VACUUM Single Point",
          "B97-D3/def2-TZVPD/VACUUM Force",
          "B97-D3/def2-TZVPD/VACUUM Geometry Optimization",
          "B97-D3/def2-TZVPD/VACUUM Frequency Analysis",
          "B97-D3/def2-TZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVPD/VACUUM Transition State Geometry Optimization",
          "B97-D3/def2-TZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVPD/VACUUM Unknown",
          "B97-D3/def2-TZVPD/PCM Single Point",
          "B97-D3/def2-TZVPD/PCM Force",
          "B97-D3/def2-TZVPD/PCM Geometry Optimization",
          "B97-D3/def2-TZVPD/PCM Frequency Analysis",
          "B97-D3/def2-TZVPD/PCM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVPD/PCM Transition State Geometry Optimization",
          "B97-D3/def2-TZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVPD/PCM Unknown",
          "B97-D3/def2-TZVPD/SMD Single Point",
          "B97-D3/def2-TZVPD/SMD Force",
          "B97-D3/def2-TZVPD/SMD Geometry Optimization",
          "B97-D3/def2-TZVPD/SMD Frequency Analysis",
          "B97-D3/def2-TZVPD/SMD Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVPD/SMD Transition State Geometry Optimization",
          "B97-D3/def2-TZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVPD/SMD Unknown",
          "B97-D3/def2-TZVPP/VACUUM Single Point",
          "B97-D3/def2-TZVPP/VACUUM Force",
          "B97-D3/def2-TZVPP/VACUUM Geometry Optimization",
          "B97-D3/def2-TZVPP/VACUUM Frequency Analysis",
          "B97-D3/def2-TZVPP/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVPP/VACUUM Transition State Geometry Optimization",
          "B97-D3/def2-TZVPP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVPP/VACUUM Unknown",
          "B97-D3/def2-TZVPP/PCM Single Point",
          "B97-D3/def2-TZVPP/PCM Force",
          "B97-D3/def2-TZVPP/PCM Geometry Optimization",
          "B97-D3/def2-TZVPP/PCM Frequency Analysis",
          "B97-D3/def2-TZVPP/PCM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVPP/PCM Transition State Geometry Optimization",
          "B97-D3/def2-TZVPP/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVPP/PCM Unknown",
          "B97-D3/def2-TZVPP/SMD Single Point",
          "B97-D3/def2-TZVPP/SMD Force",
          "B97-D3/def2-TZVPP/SMD Geometry Optimization",
          "B97-D3/def2-TZVPP/SMD Frequency Analysis",
          "B97-D3/def2-TZVPP/SMD Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVPP/SMD Transition State Geometry Optimization",
          "B97-D3/def2-TZVPP/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVPP/SMD Unknown",
          "B97-D3/def2-TZVPPD/VACUUM Single Point",
          "B97-D3/def2-TZVPPD/VACUUM Force",
          "B97-D3/def2-TZVPPD/VACUUM Geometry Optimization",
          "B97-D3/def2-TZVPPD/VACUUM Frequency Analysis",
          "B97-D3/def2-TZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVPPD/VACUUM Transition State Geometry Optimization",
          "B97-D3/def2-TZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVPPD/VACUUM Unknown",
          "B97-D3/def2-TZVPPD/PCM Single Point",
          "B97-D3/def2-TZVPPD/PCM Force",
          "B97-D3/def2-TZVPPD/PCM Geometry Optimization",
          "B97-D3/def2-TZVPPD/PCM Frequency Analysis",
          "B97-D3/def2-TZVPPD/PCM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVPPD/PCM Transition State Geometry Optimization",
          "B97-D3/def2-TZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVPPD/PCM Unknown",
          "B97-D3/def2-TZVPPD/SMD Single Point",
          "B97-D3/def2-TZVPPD/SMD Force",
          "B97-D3/def2-TZVPPD/SMD Geometry Optimization",
          "B97-D3/def2-TZVPPD/SMD Frequency Analysis",
          "B97-D3/def2-TZVPPD/SMD Frequency Flattening Geometry Optimization",
          "B97-D3/def2-TZVPPD/SMD Transition State Geometry Optimization",
          "B97-D3/def2-TZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-TZVPPD/SMD Unknown",
          "B97-D3/def2-QZVPD/VACUUM Single Point",
          "B97-D3/def2-QZVPD/VACUUM Force",
          "B97-D3/def2-QZVPD/VACUUM Geometry Optimization",
          "B97-D3/def2-QZVPD/VACUUM Frequency Analysis",
          "B97-D3/def2-QZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-QZVPD/VACUUM Transition State Geometry Optimization",
          "B97-D3/def2-QZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-QZVPD/VACUUM Unknown",
          "B97-D3/def2-QZVPD/PCM Single Point",
          "B97-D3/def2-QZVPD/PCM Force",
          "B97-D3/def2-QZVPD/PCM Geometry Optimization",
          "B97-D3/def2-QZVPD/PCM Frequency Analysis",
          "B97-D3/def2-QZVPD/PCM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-QZVPD/PCM Transition State Geometry Optimization",
          "B97-D3/def2-QZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-QZVPD/PCM Unknown",
          "B97-D3/def2-QZVPD/SMD Single Point",
          "B97-D3/def2-QZVPD/SMD Force",
          "B97-D3/def2-QZVPD/SMD Geometry Optimization",
          "B97-D3/def2-QZVPD/SMD Frequency Analysis",
          "B97-D3/def2-QZVPD/SMD Frequency Flattening Geometry Optimization",
          "B97-D3/def2-QZVPD/SMD Transition State Geometry Optimization",
          "B97-D3/def2-QZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-QZVPD/SMD Unknown",
          "B97-D3/def2-QZVPPD/VACUUM Single Point",
          "B97-D3/def2-QZVPPD/VACUUM Force",
          "B97-D3/def2-QZVPPD/VACUUM Geometry Optimization",
          "B97-D3/def2-QZVPPD/VACUUM Frequency Analysis",
          "B97-D3/def2-QZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-QZVPPD/VACUUM Transition State Geometry Optimization",
          "B97-D3/def2-QZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-QZVPPD/VACUUM Unknown",
          "B97-D3/def2-QZVPPD/PCM Single Point",
          "B97-D3/def2-QZVPPD/PCM Force",
          "B97-D3/def2-QZVPPD/PCM Geometry Optimization",
          "B97-D3/def2-QZVPPD/PCM Frequency Analysis",
          "B97-D3/def2-QZVPPD/PCM Frequency Flattening Geometry Optimization",
          "B97-D3/def2-QZVPPD/PCM Transition State Geometry Optimization",
          "B97-D3/def2-QZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-QZVPPD/PCM Unknown",
          "B97-D3/def2-QZVPPD/SMD Single Point",
          "B97-D3/def2-QZVPPD/SMD Force",
          "B97-D3/def2-QZVPPD/SMD Geometry Optimization",
          "B97-D3/def2-QZVPPD/SMD Frequency Analysis",
          "B97-D3/def2-QZVPPD/SMD Frequency Flattening Geometry Optimization",
          "B97-D3/def2-QZVPPD/SMD Transition State Geometry Optimization",
          "B97-D3/def2-QZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97-D3/def2-QZVPPD/SMD Unknown",
          "B97M-V/6-31g*/VACUUM Single Point",
          "B97M-V/6-31g*/VACUUM Force",
          "B97M-V/6-31g*/VACUUM Geometry Optimization",
          "B97M-V/6-31g*/VACUUM Frequency Analysis",
          "B97M-V/6-31g*/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-V/6-31g*/VACUUM Transition State Geometry Optimization",
          "B97M-V/6-31g*/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/6-31g*/VACUUM Unknown",
          "B97M-V/6-31g*/PCM Single Point",
          "B97M-V/6-31g*/PCM Force",
          "B97M-V/6-31g*/PCM Geometry Optimization",
          "B97M-V/6-31g*/PCM Frequency Analysis",
          "B97M-V/6-31g*/PCM Frequency Flattening Geometry Optimization",
          "B97M-V/6-31g*/PCM Transition State Geometry Optimization",
          "B97M-V/6-31g*/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/6-31g*/PCM Unknown",
          "B97M-V/6-31g*/SMD Single Point",
          "B97M-V/6-31g*/SMD Force",
          "B97M-V/6-31g*/SMD Geometry Optimization",
          "B97M-V/6-31g*/SMD Frequency Analysis",
          "B97M-V/6-31g*/SMD Frequency Flattening Geometry Optimization",
          "B97M-V/6-31g*/SMD Transition State Geometry Optimization",
          "B97M-V/6-31g*/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/6-31g*/SMD Unknown",
          "B97M-V/def2-SVPD/VACUUM Single Point",
          "B97M-V/def2-SVPD/VACUUM Force",
          "B97M-V/def2-SVPD/VACUUM Geometry Optimization",
          "B97M-V/def2-SVPD/VACUUM Frequency Analysis",
          "B97M-V/def2-SVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-SVPD/VACUUM Transition State Geometry Optimization",
          "B97M-V/def2-SVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-SVPD/VACUUM Unknown",
          "B97M-V/def2-SVPD/PCM Single Point",
          "B97M-V/def2-SVPD/PCM Force",
          "B97M-V/def2-SVPD/PCM Geometry Optimization",
          "B97M-V/def2-SVPD/PCM Frequency Analysis",
          "B97M-V/def2-SVPD/PCM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-SVPD/PCM Transition State Geometry Optimization",
          "B97M-V/def2-SVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-SVPD/PCM Unknown",
          "B97M-V/def2-SVPD/SMD Single Point",
          "B97M-V/def2-SVPD/SMD Force",
          "B97M-V/def2-SVPD/SMD Geometry Optimization",
          "B97M-V/def2-SVPD/SMD Frequency Analysis",
          "B97M-V/def2-SVPD/SMD Frequency Flattening Geometry Optimization",
          "B97M-V/def2-SVPD/SMD Transition State Geometry Optimization",
          "B97M-V/def2-SVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-SVPD/SMD Unknown",
          "B97M-V/def2-TZVP/VACUUM Single Point",
          "B97M-V/def2-TZVP/VACUUM Force",
          "B97M-V/def2-TZVP/VACUUM Geometry Optimization",
          "B97M-V/def2-TZVP/VACUUM Frequency Analysis",
          "B97M-V/def2-TZVP/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVP/VACUUM Transition State Geometry Optimization",
          "B97M-V/def2-TZVP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVP/VACUUM Unknown",
          "B97M-V/def2-TZVP/PCM Single Point",
          "B97M-V/def2-TZVP/PCM Force",
          "B97M-V/def2-TZVP/PCM Geometry Optimization",
          "B97M-V/def2-TZVP/PCM Frequency Analysis",
          "B97M-V/def2-TZVP/PCM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVP/PCM Transition State Geometry Optimization",
          "B97M-V/def2-TZVP/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVP/PCM Unknown",
          "B97M-V/def2-TZVP/SMD Single Point",
          "B97M-V/def2-TZVP/SMD Force",
          "B97M-V/def2-TZVP/SMD Geometry Optimization",
          "B97M-V/def2-TZVP/SMD Frequency Analysis",
          "B97M-V/def2-TZVP/SMD Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVP/SMD Transition State Geometry Optimization",
          "B97M-V/def2-TZVP/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVP/SMD Unknown",
          "B97M-V/def2-TZVPD/VACUUM Single Point",
          "B97M-V/def2-TZVPD/VACUUM Force",
          "B97M-V/def2-TZVPD/VACUUM Geometry Optimization",
          "B97M-V/def2-TZVPD/VACUUM Frequency Analysis",
          "B97M-V/def2-TZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVPD/VACUUM Transition State Geometry Optimization",
          "B97M-V/def2-TZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVPD/VACUUM Unknown",
          "B97M-V/def2-TZVPD/PCM Single Point",
          "B97M-V/def2-TZVPD/PCM Force",
          "B97M-V/def2-TZVPD/PCM Geometry Optimization",
          "B97M-V/def2-TZVPD/PCM Frequency Analysis",
          "B97M-V/def2-TZVPD/PCM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVPD/PCM Transition State Geometry Optimization",
          "B97M-V/def2-TZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVPD/PCM Unknown",
          "B97M-V/def2-TZVPD/SMD Single Point",
          "B97M-V/def2-TZVPD/SMD Force",
          "B97M-V/def2-TZVPD/SMD Geometry Optimization",
          "B97M-V/def2-TZVPD/SMD Frequency Analysis",
          "B97M-V/def2-TZVPD/SMD Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVPD/SMD Transition State Geometry Optimization",
          "B97M-V/def2-TZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVPD/SMD Unknown",
          "B97M-V/def2-TZVPP/VACUUM Single Point",
          "B97M-V/def2-TZVPP/VACUUM Force",
          "B97M-V/def2-TZVPP/VACUUM Geometry Optimization",
          "B97M-V/def2-TZVPP/VACUUM Frequency Analysis",
          "B97M-V/def2-TZVPP/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVPP/VACUUM Transition State Geometry Optimization",
          "B97M-V/def2-TZVPP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVPP/VACUUM Unknown",
          "B97M-V/def2-TZVPP/PCM Single Point",
          "B97M-V/def2-TZVPP/PCM Force",
          "B97M-V/def2-TZVPP/PCM Geometry Optimization",
          "B97M-V/def2-TZVPP/PCM Frequency Analysis",
          "B97M-V/def2-TZVPP/PCM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVPP/PCM Transition State Geometry Optimization",
          "B97M-V/def2-TZVPP/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVPP/PCM Unknown",
          "B97M-V/def2-TZVPP/SMD Single Point",
          "B97M-V/def2-TZVPP/SMD Force",
          "B97M-V/def2-TZVPP/SMD Geometry Optimization",
          "B97M-V/def2-TZVPP/SMD Frequency Analysis",
          "B97M-V/def2-TZVPP/SMD Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVPP/SMD Transition State Geometry Optimization",
          "B97M-V/def2-TZVPP/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVPP/SMD Unknown",
          "B97M-V/def2-TZVPPD/VACUUM Single Point",
          "B97M-V/def2-TZVPPD/VACUUM Force",
          "B97M-V/def2-TZVPPD/VACUUM Geometry Optimization",
          "B97M-V/def2-TZVPPD/VACUUM Frequency Analysis",
          "B97M-V/def2-TZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVPPD/VACUUM Transition State Geometry Optimization",
          "B97M-V/def2-TZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVPPD/VACUUM Unknown",
          "B97M-V/def2-TZVPPD/PCM Single Point",
          "B97M-V/def2-TZVPPD/PCM Force",
          "B97M-V/def2-TZVPPD/PCM Geometry Optimization",
          "B97M-V/def2-TZVPPD/PCM Frequency Analysis",
          "B97M-V/def2-TZVPPD/PCM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVPPD/PCM Transition State Geometry Optimization",
          "B97M-V/def2-TZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVPPD/PCM Unknown",
          "B97M-V/def2-TZVPPD/SMD Single Point",
          "B97M-V/def2-TZVPPD/SMD Force",
          "B97M-V/def2-TZVPPD/SMD Geometry Optimization",
          "B97M-V/def2-TZVPPD/SMD Frequency Analysis",
          "B97M-V/def2-TZVPPD/SMD Frequency Flattening Geometry Optimization",
          "B97M-V/def2-TZVPPD/SMD Transition State Geometry Optimization",
          "B97M-V/def2-TZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-TZVPPD/SMD Unknown",
          "B97M-V/def2-QZVPD/VACUUM Single Point",
          "B97M-V/def2-QZVPD/VACUUM Force",
          "B97M-V/def2-QZVPD/VACUUM Geometry Optimization",
          "B97M-V/def2-QZVPD/VACUUM Frequency Analysis",
          "B97M-V/def2-QZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-QZVPD/VACUUM Transition State Geometry Optimization",
          "B97M-V/def2-QZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-QZVPD/VACUUM Unknown",
          "B97M-V/def2-QZVPD/PCM Single Point",
          "B97M-V/def2-QZVPD/PCM Force",
          "B97M-V/def2-QZVPD/PCM Geometry Optimization",
          "B97M-V/def2-QZVPD/PCM Frequency Analysis",
          "B97M-V/def2-QZVPD/PCM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-QZVPD/PCM Transition State Geometry Optimization",
          "B97M-V/def2-QZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-QZVPD/PCM Unknown",
          "B97M-V/def2-QZVPD/SMD Single Point",
          "B97M-V/def2-QZVPD/SMD Force",
          "B97M-V/def2-QZVPD/SMD Geometry Optimization",
          "B97M-V/def2-QZVPD/SMD Frequency Analysis",
          "B97M-V/def2-QZVPD/SMD Frequency Flattening Geometry Optimization",
          "B97M-V/def2-QZVPD/SMD Transition State Geometry Optimization",
          "B97M-V/def2-QZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-QZVPD/SMD Unknown",
          "B97M-V/def2-QZVPPD/VACUUM Single Point",
          "B97M-V/def2-QZVPPD/VACUUM Force",
          "B97M-V/def2-QZVPPD/VACUUM Geometry Optimization",
          "B97M-V/def2-QZVPPD/VACUUM Frequency Analysis",
          "B97M-V/def2-QZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-QZVPPD/VACUUM Transition State Geometry Optimization",
          "B97M-V/def2-QZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-QZVPPD/VACUUM Unknown",
          "B97M-V/def2-QZVPPD/PCM Single Point",
          "B97M-V/def2-QZVPPD/PCM Force",
          "B97M-V/def2-QZVPPD/PCM Geometry Optimization",
          "B97M-V/def2-QZVPPD/PCM Frequency Analysis",
          "B97M-V/def2-QZVPPD/PCM Frequency Flattening Geometry Optimization",
          "B97M-V/def2-QZVPPD/PCM Transition State Geometry Optimization",
          "B97M-V/def2-QZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-QZVPPD/PCM Unknown",
          "B97M-V/def2-QZVPPD/SMD Single Point",
          "B97M-V/def2-QZVPPD/SMD Force",
          "B97M-V/def2-QZVPPD/SMD Geometry Optimization",
          "B97M-V/def2-QZVPPD/SMD Frequency Analysis",
          "B97M-V/def2-QZVPPD/SMD Frequency Flattening Geometry Optimization",
          "B97M-V/def2-QZVPPD/SMD Transition State Geometry Optimization",
          "B97M-V/def2-QZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-V/def2-QZVPPD/SMD Unknown",
          "B97M-rV/6-31g*/VACUUM Single Point",
          "B97M-rV/6-31g*/VACUUM Force",
          "B97M-rV/6-31g*/VACUUM Geometry Optimization",
          "B97M-rV/6-31g*/VACUUM Frequency Analysis",
          "B97M-rV/6-31g*/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-rV/6-31g*/VACUUM Transition State Geometry Optimization",
          "B97M-rV/6-31g*/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/6-31g*/VACUUM Unknown",
          "B97M-rV/6-31g*/PCM Single Point",
          "B97M-rV/6-31g*/PCM Force",
          "B97M-rV/6-31g*/PCM Geometry Optimization",
          "B97M-rV/6-31g*/PCM Frequency Analysis",
          "B97M-rV/6-31g*/PCM Frequency Flattening Geometry Optimization",
          "B97M-rV/6-31g*/PCM Transition State Geometry Optimization",
          "B97M-rV/6-31g*/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/6-31g*/PCM Unknown",
          "B97M-rV/6-31g*/SMD Single Point",
          "B97M-rV/6-31g*/SMD Force",
          "B97M-rV/6-31g*/SMD Geometry Optimization",
          "B97M-rV/6-31g*/SMD Frequency Analysis",
          "B97M-rV/6-31g*/SMD Frequency Flattening Geometry Optimization",
          "B97M-rV/6-31g*/SMD Transition State Geometry Optimization",
          "B97M-rV/6-31g*/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/6-31g*/SMD Unknown",
          "B97M-rV/def2-SVPD/VACUUM Single Point",
          "B97M-rV/def2-SVPD/VACUUM Force",
          "B97M-rV/def2-SVPD/VACUUM Geometry Optimization",
          "B97M-rV/def2-SVPD/VACUUM Frequency Analysis",
          "B97M-rV/def2-SVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-SVPD/VACUUM Transition State Geometry Optimization",
          "B97M-rV/def2-SVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-SVPD/VACUUM Unknown",
          "B97M-rV/def2-SVPD/PCM Single Point",
          "B97M-rV/def2-SVPD/PCM Force",
          "B97M-rV/def2-SVPD/PCM Geometry Optimization",
          "B97M-rV/def2-SVPD/PCM Frequency Analysis",
          "B97M-rV/def2-SVPD/PCM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-SVPD/PCM Transition State Geometry Optimization",
          "B97M-rV/def2-SVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-SVPD/PCM Unknown",
          "B97M-rV/def2-SVPD/SMD Single Point",
          "B97M-rV/def2-SVPD/SMD Force",
          "B97M-rV/def2-SVPD/SMD Geometry Optimization",
          "B97M-rV/def2-SVPD/SMD Frequency Analysis",
          "B97M-rV/def2-SVPD/SMD Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-SVPD/SMD Transition State Geometry Optimization",
          "B97M-rV/def2-SVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-SVPD/SMD Unknown",
          "B97M-rV/def2-TZVP/VACUUM Single Point",
          "B97M-rV/def2-TZVP/VACUUM Force",
          "B97M-rV/def2-TZVP/VACUUM Geometry Optimization",
          "B97M-rV/def2-TZVP/VACUUM Frequency Analysis",
          "B97M-rV/def2-TZVP/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVP/VACUUM Transition State Geometry Optimization",
          "B97M-rV/def2-TZVP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVP/VACUUM Unknown",
          "B97M-rV/def2-TZVP/PCM Single Point",
          "B97M-rV/def2-TZVP/PCM Force",
          "B97M-rV/def2-TZVP/PCM Geometry Optimization",
          "B97M-rV/def2-TZVP/PCM Frequency Analysis",
          "B97M-rV/def2-TZVP/PCM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVP/PCM Transition State Geometry Optimization",
          "B97M-rV/def2-TZVP/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVP/PCM Unknown",
          "B97M-rV/def2-TZVP/SMD Single Point",
          "B97M-rV/def2-TZVP/SMD Force",
          "B97M-rV/def2-TZVP/SMD Geometry Optimization",
          "B97M-rV/def2-TZVP/SMD Frequency Analysis",
          "B97M-rV/def2-TZVP/SMD Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVP/SMD Transition State Geometry Optimization",
          "B97M-rV/def2-TZVP/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVP/SMD Unknown",
          "B97M-rV/def2-TZVPD/VACUUM Single Point",
          "B97M-rV/def2-TZVPD/VACUUM Force",
          "B97M-rV/def2-TZVPD/VACUUM Geometry Optimization",
          "B97M-rV/def2-TZVPD/VACUUM Frequency Analysis",
          "B97M-rV/def2-TZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVPD/VACUUM Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPD/VACUUM Unknown",
          "B97M-rV/def2-TZVPD/PCM Single Point",
          "B97M-rV/def2-TZVPD/PCM Force",
          "B97M-rV/def2-TZVPD/PCM Geometry Optimization",
          "B97M-rV/def2-TZVPD/PCM Frequency Analysis",
          "B97M-rV/def2-TZVPD/PCM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVPD/PCM Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPD/PCM Unknown",
          "B97M-rV/def2-TZVPD/SMD Single Point",
          "B97M-rV/def2-TZVPD/SMD Force",
          "B97M-rV/def2-TZVPD/SMD Geometry Optimization",
          "B97M-rV/def2-TZVPD/SMD Frequency Analysis",
          "B97M-rV/def2-TZVPD/SMD Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVPD/SMD Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPD/SMD Unknown",
          "B97M-rV/def2-TZVPP/VACUUM Single Point",
          "B97M-rV/def2-TZVPP/VACUUM Force",
          "B97M-rV/def2-TZVPP/VACUUM Geometry Optimization",
          "B97M-rV/def2-TZVPP/VACUUM Frequency Analysis",
          "B97M-rV/def2-TZVPP/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVPP/VACUUM Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPP/VACUUM Unknown",
          "B97M-rV/def2-TZVPP/PCM Single Point",
          "B97M-rV/def2-TZVPP/PCM Force",
          "B97M-rV/def2-TZVPP/PCM Geometry Optimization",
          "B97M-rV/def2-TZVPP/PCM Frequency Analysis",
          "B97M-rV/def2-TZVPP/PCM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVPP/PCM Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPP/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPP/PCM Unknown",
          "B97M-rV/def2-TZVPP/SMD Single Point",
          "B97M-rV/def2-TZVPP/SMD Force",
          "B97M-rV/def2-TZVPP/SMD Geometry Optimization",
          "B97M-rV/def2-TZVPP/SMD Frequency Analysis",
          "B97M-rV/def2-TZVPP/SMD Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVPP/SMD Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPP/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPP/SMD Unknown",
          "B97M-rV/def2-TZVPPD/VACUUM Single Point",
          "B97M-rV/def2-TZVPPD/VACUUM Force",
          "B97M-rV/def2-TZVPPD/VACUUM Geometry Optimization",
          "B97M-rV/def2-TZVPPD/VACUUM Frequency Analysis",
          "B97M-rV/def2-TZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVPPD/VACUUM Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPPD/VACUUM Unknown",
          "B97M-rV/def2-TZVPPD/PCM Single Point",
          "B97M-rV/def2-TZVPPD/PCM Force",
          "B97M-rV/def2-TZVPPD/PCM Geometry Optimization",
          "B97M-rV/def2-TZVPPD/PCM Frequency Analysis",
          "B97M-rV/def2-TZVPPD/PCM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVPPD/PCM Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPPD/PCM Unknown",
          "B97M-rV/def2-TZVPPD/SMD Single Point",
          "B97M-rV/def2-TZVPPD/SMD Force",
          "B97M-rV/def2-TZVPPD/SMD Geometry Optimization",
          "B97M-rV/def2-TZVPPD/SMD Frequency Analysis",
          "B97M-rV/def2-TZVPPD/SMD Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-TZVPPD/SMD Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-TZVPPD/SMD Unknown",
          "B97M-rV/def2-QZVPD/VACUUM Single Point",
          "B97M-rV/def2-QZVPD/VACUUM Force",
          "B97M-rV/def2-QZVPD/VACUUM Geometry Optimization",
          "B97M-rV/def2-QZVPD/VACUUM Frequency Analysis",
          "B97M-rV/def2-QZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-QZVPD/VACUUM Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPD/VACUUM Unknown",
          "B97M-rV/def2-QZVPD/PCM Single Point",
          "B97M-rV/def2-QZVPD/PCM Force",
          "B97M-rV/def2-QZVPD/PCM Geometry Optimization",
          "B97M-rV/def2-QZVPD/PCM Frequency Analysis",
          "B97M-rV/def2-QZVPD/PCM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-QZVPD/PCM Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPD/PCM Unknown",
          "B97M-rV/def2-QZVPD/SMD Single Point",
          "B97M-rV/def2-QZVPD/SMD Force",
          "B97M-rV/def2-QZVPD/SMD Geometry Optimization",
          "B97M-rV/def2-QZVPD/SMD Frequency Analysis",
          "B97M-rV/def2-QZVPD/SMD Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-QZVPD/SMD Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPD/SMD Unknown",
          "B97M-rV/def2-QZVPPD/VACUUM Single Point",
          "B97M-rV/def2-QZVPPD/VACUUM Force",
          "B97M-rV/def2-QZVPPD/VACUUM Geometry Optimization",
          "B97M-rV/def2-QZVPPD/VACUUM Frequency Analysis",
          "B97M-rV/def2-QZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-QZVPPD/VACUUM Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPPD/VACUUM Unknown",
          "B97M-rV/def2-QZVPPD/PCM Single Point",
          "B97M-rV/def2-QZVPPD/PCM Force",
          "B97M-rV/def2-QZVPPD/PCM Geometry Optimization",
          "B97M-rV/def2-QZVPPD/PCM Frequency Analysis",
          "B97M-rV/def2-QZVPPD/PCM Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-QZVPPD/PCM Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPPD/PCM Unknown",
          "B97M-rV/def2-QZVPPD/SMD Single Point",
          "B97M-rV/def2-QZVPPD/SMD Force",
          "B97M-rV/def2-QZVPPD/SMD Geometry Optimization",
          "B97M-rV/def2-QZVPPD/SMD Frequency Analysis",
          "B97M-rV/def2-QZVPPD/SMD Frequency Flattening Geometry Optimization",
          "B97M-rV/def2-QZVPPD/SMD Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B97M-rV/def2-QZVPPD/SMD Unknown",
          "B3LYP/6-31g*/VACUUM Single Point",
          "B3LYP/6-31g*/VACUUM Force",
          "B3LYP/6-31g*/VACUUM Geometry Optimization",
          "B3LYP/6-31g*/VACUUM Frequency Analysis",
          "B3LYP/6-31g*/VACUUM Frequency Flattening Geometry Optimization",
          "B3LYP/6-31g*/VACUUM Transition State Geometry Optimization",
          "B3LYP/6-31g*/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/6-31g*/VACUUM Unknown",
          "B3LYP/6-31g*/PCM Single Point",
          "B3LYP/6-31g*/PCM Force",
          "B3LYP/6-31g*/PCM Geometry Optimization",
          "B3LYP/6-31g*/PCM Frequency Analysis",
          "B3LYP/6-31g*/PCM Frequency Flattening Geometry Optimization",
          "B3LYP/6-31g*/PCM Transition State Geometry Optimization",
          "B3LYP/6-31g*/PCM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/6-31g*/PCM Unknown",
          "B3LYP/6-31g*/SMD Single Point",
          "B3LYP/6-31g*/SMD Force",
          "B3LYP/6-31g*/SMD Geometry Optimization",
          "B3LYP/6-31g*/SMD Frequency Analysis",
          "B3LYP/6-31g*/SMD Frequency Flattening Geometry Optimization",
          "B3LYP/6-31g*/SMD Transition State Geometry Optimization",
          "B3LYP/6-31g*/SMD Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/6-31g*/SMD Unknown",
          "B3LYP/def2-SVPD/VACUUM Single Point",
          "B3LYP/def2-SVPD/VACUUM Force",
          "B3LYP/def2-SVPD/VACUUM Geometry Optimization",
          "B3LYP/def2-SVPD/VACUUM Frequency Analysis",
          "B3LYP/def2-SVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-SVPD/VACUUM Transition State Geometry Optimization",
          "B3LYP/def2-SVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-SVPD/VACUUM Unknown",
          "B3LYP/def2-SVPD/PCM Single Point",
          "B3LYP/def2-SVPD/PCM Force",
          "B3LYP/def2-SVPD/PCM Geometry Optimization",
          "B3LYP/def2-SVPD/PCM Frequency Analysis",
          "B3LYP/def2-SVPD/PCM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-SVPD/PCM Transition State Geometry Optimization",
          "B3LYP/def2-SVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-SVPD/PCM Unknown",
          "B3LYP/def2-SVPD/SMD Single Point",
          "B3LYP/def2-SVPD/SMD Force",
          "B3LYP/def2-SVPD/SMD Geometry Optimization",
          "B3LYP/def2-SVPD/SMD Frequency Analysis",
          "B3LYP/def2-SVPD/SMD Frequency Flattening Geometry Optimization",
          "B3LYP/def2-SVPD/SMD Transition State Geometry Optimization",
          "B3LYP/def2-SVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-SVPD/SMD Unknown",
          "B3LYP/def2-TZVP/VACUUM Single Point",
          "B3LYP/def2-TZVP/VACUUM Force",
          "B3LYP/def2-TZVP/VACUUM Geometry Optimization",
          "B3LYP/def2-TZVP/VACUUM Frequency Analysis",
          "B3LYP/def2-TZVP/VACUUM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVP/VACUUM Transition State Geometry Optimization",
          "B3LYP/def2-TZVP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVP/VACUUM Unknown",
          "B3LYP/def2-TZVP/PCM Single Point",
          "B3LYP/def2-TZVP/PCM Force",
          "B3LYP/def2-TZVP/PCM Geometry Optimization",
          "B3LYP/def2-TZVP/PCM Frequency Analysis",
          "B3LYP/def2-TZVP/PCM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVP/PCM Transition State Geometry Optimization",
          "B3LYP/def2-TZVP/PCM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVP/PCM Unknown",
          "B3LYP/def2-TZVP/SMD Single Point",
          "B3LYP/def2-TZVP/SMD Force",
          "B3LYP/def2-TZVP/SMD Geometry Optimization",
          "B3LYP/def2-TZVP/SMD Frequency Analysis",
          "B3LYP/def2-TZVP/SMD Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVP/SMD Transition State Geometry Optimization",
          "B3LYP/def2-TZVP/SMD Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVP/SMD Unknown",
          "B3LYP/def2-TZVPD/VACUUM Single Point",
          "B3LYP/def2-TZVPD/VACUUM Force",
          "B3LYP/def2-TZVPD/VACUUM Geometry Optimization",
          "B3LYP/def2-TZVPD/VACUUM Frequency Analysis",
          "B3LYP/def2-TZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVPD/VACUUM Transition State Geometry Optimization",
          "B3LYP/def2-TZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVPD/VACUUM Unknown",
          "B3LYP/def2-TZVPD/PCM Single Point",
          "B3LYP/def2-TZVPD/PCM Force",
          "B3LYP/def2-TZVPD/PCM Geometry Optimization",
          "B3LYP/def2-TZVPD/PCM Frequency Analysis",
          "B3LYP/def2-TZVPD/PCM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVPD/PCM Transition State Geometry Optimization",
          "B3LYP/def2-TZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVPD/PCM Unknown",
          "B3LYP/def2-TZVPD/SMD Single Point",
          "B3LYP/def2-TZVPD/SMD Force",
          "B3LYP/def2-TZVPD/SMD Geometry Optimization",
          "B3LYP/def2-TZVPD/SMD Frequency Analysis",
          "B3LYP/def2-TZVPD/SMD Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVPD/SMD Transition State Geometry Optimization",
          "B3LYP/def2-TZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVPD/SMD Unknown",
          "B3LYP/def2-TZVPP/VACUUM Single Point",
          "B3LYP/def2-TZVPP/VACUUM Force",
          "B3LYP/def2-TZVPP/VACUUM Geometry Optimization",
          "B3LYP/def2-TZVPP/VACUUM Frequency Analysis",
          "B3LYP/def2-TZVPP/VACUUM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVPP/VACUUM Transition State Geometry Optimization",
          "B3LYP/def2-TZVPP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVPP/VACUUM Unknown",
          "B3LYP/def2-TZVPP/PCM Single Point",
          "B3LYP/def2-TZVPP/PCM Force",
          "B3LYP/def2-TZVPP/PCM Geometry Optimization",
          "B3LYP/def2-TZVPP/PCM Frequency Analysis",
          "B3LYP/def2-TZVPP/PCM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVPP/PCM Transition State Geometry Optimization",
          "B3LYP/def2-TZVPP/PCM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVPP/PCM Unknown",
          "B3LYP/def2-TZVPP/SMD Single Point",
          "B3LYP/def2-TZVPP/SMD Force",
          "B3LYP/def2-TZVPP/SMD Geometry Optimization",
          "B3LYP/def2-TZVPP/SMD Frequency Analysis",
          "B3LYP/def2-TZVPP/SMD Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVPP/SMD Transition State Geometry Optimization",
          "B3LYP/def2-TZVPP/SMD Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVPP/SMD Unknown",
          "B3LYP/def2-TZVPPD/VACUUM Single Point",
          "B3LYP/def2-TZVPPD/VACUUM Force",
          "B3LYP/def2-TZVPPD/VACUUM Geometry Optimization",
          "B3LYP/def2-TZVPPD/VACUUM Frequency Analysis",
          "B3LYP/def2-TZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVPPD/VACUUM Transition State Geometry Optimization",
          "B3LYP/def2-TZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVPPD/VACUUM Unknown",
          "B3LYP/def2-TZVPPD/PCM Single Point",
          "B3LYP/def2-TZVPPD/PCM Force",
          "B3LYP/def2-TZVPPD/PCM Geometry Optimization",
          "B3LYP/def2-TZVPPD/PCM Frequency Analysis",
          "B3LYP/def2-TZVPPD/PCM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVPPD/PCM Transition State Geometry Optimization",
          "B3LYP/def2-TZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVPPD/PCM Unknown",
          "B3LYP/def2-TZVPPD/SMD Single Point",
          "B3LYP/def2-TZVPPD/SMD Force",
          "B3LYP/def2-TZVPPD/SMD Geometry Optimization",
          "B3LYP/def2-TZVPPD/SMD Frequency Analysis",
          "B3LYP/def2-TZVPPD/SMD Frequency Flattening Geometry Optimization",
          "B3LYP/def2-TZVPPD/SMD Transition State Geometry Optimization",
          "B3LYP/def2-TZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-TZVPPD/SMD Unknown",
          "B3LYP/def2-QZVPD/VACUUM Single Point",
          "B3LYP/def2-QZVPD/VACUUM Force",
          "B3LYP/def2-QZVPD/VACUUM Geometry Optimization",
          "B3LYP/def2-QZVPD/VACUUM Frequency Analysis",
          "B3LYP/def2-QZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-QZVPD/VACUUM Transition State Geometry Optimization",
          "B3LYP/def2-QZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-QZVPD/VACUUM Unknown",
          "B3LYP/def2-QZVPD/PCM Single Point",
          "B3LYP/def2-QZVPD/PCM Force",
          "B3LYP/def2-QZVPD/PCM Geometry Optimization",
          "B3LYP/def2-QZVPD/PCM Frequency Analysis",
          "B3LYP/def2-QZVPD/PCM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-QZVPD/PCM Transition State Geometry Optimization",
          "B3LYP/def2-QZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-QZVPD/PCM Unknown",
          "B3LYP/def2-QZVPD/SMD Single Point",
          "B3LYP/def2-QZVPD/SMD Force",
          "B3LYP/def2-QZVPD/SMD Geometry Optimization",
          "B3LYP/def2-QZVPD/SMD Frequency Analysis",
          "B3LYP/def2-QZVPD/SMD Frequency Flattening Geometry Optimization",
          "B3LYP/def2-QZVPD/SMD Transition State Geometry Optimization",
          "B3LYP/def2-QZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-QZVPD/SMD Unknown",
          "B3LYP/def2-QZVPPD/VACUUM Single Point",
          "B3LYP/def2-QZVPPD/VACUUM Force",
          "B3LYP/def2-QZVPPD/VACUUM Geometry Optimization",
          "B3LYP/def2-QZVPPD/VACUUM Frequency Analysis",
          "B3LYP/def2-QZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-QZVPPD/VACUUM Transition State Geometry Optimization",
          "B3LYP/def2-QZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-QZVPPD/VACUUM Unknown",
          "B3LYP/def2-QZVPPD/PCM Single Point",
          "B3LYP/def2-QZVPPD/PCM Force",
          "B3LYP/def2-QZVPPD/PCM Geometry Optimization",
          "B3LYP/def2-QZVPPD/PCM Frequency Analysis",
          "B3LYP/def2-QZVPPD/PCM Frequency Flattening Geometry Optimization",
          "B3LYP/def2-QZVPPD/PCM Transition State Geometry Optimization",
          "B3LYP/def2-QZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-QZVPPD/PCM Unknown",
          "B3LYP/def2-QZVPPD/SMD Single Point",
          "B3LYP/def2-QZVPPD/SMD Force",
          "B3LYP/def2-QZVPPD/SMD Geometry Optimization",
          "B3LYP/def2-QZVPPD/SMD Frequency Analysis",
          "B3LYP/def2-QZVPPD/SMD Frequency Flattening Geometry Optimization",
          "B3LYP/def2-QZVPPD/SMD Transition State Geometry Optimization",
          "B3LYP/def2-QZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "B3LYP/def2-QZVPPD/SMD Unknown",
          "wB97X-D/6-31g*/VACUUM Single Point",
          "wB97X-D/6-31g*/VACUUM Force",
          "wB97X-D/6-31g*/VACUUM Geometry Optimization",
          "wB97X-D/6-31g*/VACUUM Frequency Analysis",
          "wB97X-D/6-31g*/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D/6-31g*/VACUUM Transition State Geometry Optimization",
          "wB97X-D/6-31g*/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/6-31g*/VACUUM Unknown",
          "wB97X-D/6-31g*/PCM Single Point",
          "wB97X-D/6-31g*/PCM Force",
          "wB97X-D/6-31g*/PCM Geometry Optimization",
          "wB97X-D/6-31g*/PCM Frequency Analysis",
          "wB97X-D/6-31g*/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D/6-31g*/PCM Transition State Geometry Optimization",
          "wB97X-D/6-31g*/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/6-31g*/PCM Unknown",
          "wB97X-D/6-31g*/SMD Single Point",
          "wB97X-D/6-31g*/SMD Force",
          "wB97X-D/6-31g*/SMD Geometry Optimization",
          "wB97X-D/6-31g*/SMD Frequency Analysis",
          "wB97X-D/6-31g*/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D/6-31g*/SMD Transition State Geometry Optimization",
          "wB97X-D/6-31g*/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/6-31g*/SMD Unknown",
          "wB97X-D/def2-SVPD/VACUUM Single Point",
          "wB97X-D/def2-SVPD/VACUUM Force",
          "wB97X-D/def2-SVPD/VACUUM Geometry Optimization",
          "wB97X-D/def2-SVPD/VACUUM Frequency Analysis",
          "wB97X-D/def2-SVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-SVPD/VACUUM Transition State Geometry Optimization",
          "wB97X-D/def2-SVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-SVPD/VACUUM Unknown",
          "wB97X-D/def2-SVPD/PCM Single Point",
          "wB97X-D/def2-SVPD/PCM Force",
          "wB97X-D/def2-SVPD/PCM Geometry Optimization",
          "wB97X-D/def2-SVPD/PCM Frequency Analysis",
          "wB97X-D/def2-SVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-SVPD/PCM Transition State Geometry Optimization",
          "wB97X-D/def2-SVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-SVPD/PCM Unknown",
          "wB97X-D/def2-SVPD/SMD Single Point",
          "wB97X-D/def2-SVPD/SMD Force",
          "wB97X-D/def2-SVPD/SMD Geometry Optimization",
          "wB97X-D/def2-SVPD/SMD Frequency Analysis",
          "wB97X-D/def2-SVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-SVPD/SMD Transition State Geometry Optimization",
          "wB97X-D/def2-SVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-SVPD/SMD Unknown",
          "wB97X-D/def2-TZVP/VACUUM Single Point",
          "wB97X-D/def2-TZVP/VACUUM Force",
          "wB97X-D/def2-TZVP/VACUUM Geometry Optimization",
          "wB97X-D/def2-TZVP/VACUUM Frequency Analysis",
          "wB97X-D/def2-TZVP/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVP/VACUUM Transition State Geometry Optimization",
          "wB97X-D/def2-TZVP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVP/VACUUM Unknown",
          "wB97X-D/def2-TZVP/PCM Single Point",
          "wB97X-D/def2-TZVP/PCM Force",
          "wB97X-D/def2-TZVP/PCM Geometry Optimization",
          "wB97X-D/def2-TZVP/PCM Frequency Analysis",
          "wB97X-D/def2-TZVP/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVP/PCM Transition State Geometry Optimization",
          "wB97X-D/def2-TZVP/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVP/PCM Unknown",
          "wB97X-D/def2-TZVP/SMD Single Point",
          "wB97X-D/def2-TZVP/SMD Force",
          "wB97X-D/def2-TZVP/SMD Geometry Optimization",
          "wB97X-D/def2-TZVP/SMD Frequency Analysis",
          "wB97X-D/def2-TZVP/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVP/SMD Transition State Geometry Optimization",
          "wB97X-D/def2-TZVP/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVP/SMD Unknown",
          "wB97X-D/def2-TZVPD/VACUUM Single Point",
          "wB97X-D/def2-TZVPD/VACUUM Force",
          "wB97X-D/def2-TZVPD/VACUUM Geometry Optimization",
          "wB97X-D/def2-TZVPD/VACUUM Frequency Analysis",
          "wB97X-D/def2-TZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVPD/VACUUM Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPD/VACUUM Unknown",
          "wB97X-D/def2-TZVPD/PCM Single Point",
          "wB97X-D/def2-TZVPD/PCM Force",
          "wB97X-D/def2-TZVPD/PCM Geometry Optimization",
          "wB97X-D/def2-TZVPD/PCM Frequency Analysis",
          "wB97X-D/def2-TZVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVPD/PCM Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPD/PCM Unknown",
          "wB97X-D/def2-TZVPD/SMD Single Point",
          "wB97X-D/def2-TZVPD/SMD Force",
          "wB97X-D/def2-TZVPD/SMD Geometry Optimization",
          "wB97X-D/def2-TZVPD/SMD Frequency Analysis",
          "wB97X-D/def2-TZVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVPD/SMD Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPD/SMD Unknown",
          "wB97X-D/def2-TZVPP/VACUUM Single Point",
          "wB97X-D/def2-TZVPP/VACUUM Force",
          "wB97X-D/def2-TZVPP/VACUUM Geometry Optimization",
          "wB97X-D/def2-TZVPP/VACUUM Frequency Analysis",
          "wB97X-D/def2-TZVPP/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVPP/VACUUM Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPP/VACUUM Unknown",
          "wB97X-D/def2-TZVPP/PCM Single Point",
          "wB97X-D/def2-TZVPP/PCM Force",
          "wB97X-D/def2-TZVPP/PCM Geometry Optimization",
          "wB97X-D/def2-TZVPP/PCM Frequency Analysis",
          "wB97X-D/def2-TZVPP/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVPP/PCM Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPP/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPP/PCM Unknown",
          "wB97X-D/def2-TZVPP/SMD Single Point",
          "wB97X-D/def2-TZVPP/SMD Force",
          "wB97X-D/def2-TZVPP/SMD Geometry Optimization",
          "wB97X-D/def2-TZVPP/SMD Frequency Analysis",
          "wB97X-D/def2-TZVPP/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVPP/SMD Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPP/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPP/SMD Unknown",
          "wB97X-D/def2-TZVPPD/VACUUM Single Point",
          "wB97X-D/def2-TZVPPD/VACUUM Force",
          "wB97X-D/def2-TZVPPD/VACUUM Geometry Optimization",
          "wB97X-D/def2-TZVPPD/VACUUM Frequency Analysis",
          "wB97X-D/def2-TZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVPPD/VACUUM Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPPD/VACUUM Unknown",
          "wB97X-D/def2-TZVPPD/PCM Single Point",
          "wB97X-D/def2-TZVPPD/PCM Force",
          "wB97X-D/def2-TZVPPD/PCM Geometry Optimization",
          "wB97X-D/def2-TZVPPD/PCM Frequency Analysis",
          "wB97X-D/def2-TZVPPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVPPD/PCM Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPPD/PCM Unknown",
          "wB97X-D/def2-TZVPPD/SMD Single Point",
          "wB97X-D/def2-TZVPPD/SMD Force",
          "wB97X-D/def2-TZVPPD/SMD Geometry Optimization",
          "wB97X-D/def2-TZVPPD/SMD Frequency Analysis",
          "wB97X-D/def2-TZVPPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-TZVPPD/SMD Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-TZVPPD/SMD Unknown",
          "wB97X-D/def2-QZVPD/VACUUM Single Point",
          "wB97X-D/def2-QZVPD/VACUUM Force",
          "wB97X-D/def2-QZVPD/VACUUM Geometry Optimization",
          "wB97X-D/def2-QZVPD/VACUUM Frequency Analysis",
          "wB97X-D/def2-QZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-QZVPD/VACUUM Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPD/VACUUM Unknown",
          "wB97X-D/def2-QZVPD/PCM Single Point",
          "wB97X-D/def2-QZVPD/PCM Force",
          "wB97X-D/def2-QZVPD/PCM Geometry Optimization",
          "wB97X-D/def2-QZVPD/PCM Frequency Analysis",
          "wB97X-D/def2-QZVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-QZVPD/PCM Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPD/PCM Unknown",
          "wB97X-D/def2-QZVPD/SMD Single Point",
          "wB97X-D/def2-QZVPD/SMD Force",
          "wB97X-D/def2-QZVPD/SMD Geometry Optimization",
          "wB97X-D/def2-QZVPD/SMD Frequency Analysis",
          "wB97X-D/def2-QZVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-QZVPD/SMD Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPD/SMD Unknown",
          "wB97X-D/def2-QZVPPD/VACUUM Single Point",
          "wB97X-D/def2-QZVPPD/VACUUM Force",
          "wB97X-D/def2-QZVPPD/VACUUM Geometry Optimization",
          "wB97X-D/def2-QZVPPD/VACUUM Frequency Analysis",
          "wB97X-D/def2-QZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-QZVPPD/VACUUM Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPPD/VACUUM Unknown",
          "wB97X-D/def2-QZVPPD/PCM Single Point",
          "wB97X-D/def2-QZVPPD/PCM Force",
          "wB97X-D/def2-QZVPPD/PCM Geometry Optimization",
          "wB97X-D/def2-QZVPPD/PCM Frequency Analysis",
          "wB97X-D/def2-QZVPPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-QZVPPD/PCM Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPPD/PCM Unknown",
          "wB97X-D/def2-QZVPPD/SMD Single Point",
          "wB97X-D/def2-QZVPPD/SMD Force",
          "wB97X-D/def2-QZVPPD/SMD Geometry Optimization",
          "wB97X-D/def2-QZVPPD/SMD Frequency Analysis",
          "wB97X-D/def2-QZVPPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D/def2-QZVPPD/SMD Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D/def2-QZVPPD/SMD Unknown",
          "wB97X-D3/6-31g*/VACUUM Single Point",
          "wB97X-D3/6-31g*/VACUUM Force",
          "wB97X-D3/6-31g*/VACUUM Geometry Optimization",
          "wB97X-D3/6-31g*/VACUUM Frequency Analysis",
          "wB97X-D3/6-31g*/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D3/6-31g*/VACUUM Transition State Geometry Optimization",
          "wB97X-D3/6-31g*/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/6-31g*/VACUUM Unknown",
          "wB97X-D3/6-31g*/PCM Single Point",
          "wB97X-D3/6-31g*/PCM Force",
          "wB97X-D3/6-31g*/PCM Geometry Optimization",
          "wB97X-D3/6-31g*/PCM Frequency Analysis",
          "wB97X-D3/6-31g*/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D3/6-31g*/PCM Transition State Geometry Optimization",
          "wB97X-D3/6-31g*/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/6-31g*/PCM Unknown",
          "wB97X-D3/6-31g*/SMD Single Point",
          "wB97X-D3/6-31g*/SMD Force",
          "wB97X-D3/6-31g*/SMD Geometry Optimization",
          "wB97X-D3/6-31g*/SMD Frequency Analysis",
          "wB97X-D3/6-31g*/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D3/6-31g*/SMD Transition State Geometry Optimization",
          "wB97X-D3/6-31g*/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/6-31g*/SMD Unknown",
          "wB97X-D3/def2-SVPD/VACUUM Single Point",
          "wB97X-D3/def2-SVPD/VACUUM Force",
          "wB97X-D3/def2-SVPD/VACUUM Geometry Optimization",
          "wB97X-D3/def2-SVPD/VACUUM Frequency Analysis",
          "wB97X-D3/def2-SVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-SVPD/VACUUM Transition State Geometry Optimization",
          "wB97X-D3/def2-SVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-SVPD/VACUUM Unknown",
          "wB97X-D3/def2-SVPD/PCM Single Point",
          "wB97X-D3/def2-SVPD/PCM Force",
          "wB97X-D3/def2-SVPD/PCM Geometry Optimization",
          "wB97X-D3/def2-SVPD/PCM Frequency Analysis",
          "wB97X-D3/def2-SVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-SVPD/PCM Transition State Geometry Optimization",
          "wB97X-D3/def2-SVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-SVPD/PCM Unknown",
          "wB97X-D3/def2-SVPD/SMD Single Point",
          "wB97X-D3/def2-SVPD/SMD Force",
          "wB97X-D3/def2-SVPD/SMD Geometry Optimization",
          "wB97X-D3/def2-SVPD/SMD Frequency Analysis",
          "wB97X-D3/def2-SVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-SVPD/SMD Transition State Geometry Optimization",
          "wB97X-D3/def2-SVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-SVPD/SMD Unknown",
          "wB97X-D3/def2-TZVP/VACUUM Single Point",
          "wB97X-D3/def2-TZVP/VACUUM Force",
          "wB97X-D3/def2-TZVP/VACUUM Geometry Optimization",
          "wB97X-D3/def2-TZVP/VACUUM Frequency Analysis",
          "wB97X-D3/def2-TZVP/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVP/VACUUM Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVP/VACUUM Unknown",
          "wB97X-D3/def2-TZVP/PCM Single Point",
          "wB97X-D3/def2-TZVP/PCM Force",
          "wB97X-D3/def2-TZVP/PCM Geometry Optimization",
          "wB97X-D3/def2-TZVP/PCM Frequency Analysis",
          "wB97X-D3/def2-TZVP/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVP/PCM Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVP/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVP/PCM Unknown",
          "wB97X-D3/def2-TZVP/SMD Single Point",
          "wB97X-D3/def2-TZVP/SMD Force",
          "wB97X-D3/def2-TZVP/SMD Geometry Optimization",
          "wB97X-D3/def2-TZVP/SMD Frequency Analysis",
          "wB97X-D3/def2-TZVP/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVP/SMD Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVP/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVP/SMD Unknown",
          "wB97X-D3/def2-TZVPD/VACUUM Single Point",
          "wB97X-D3/def2-TZVPD/VACUUM Force",
          "wB97X-D3/def2-TZVPD/VACUUM Geometry Optimization",
          "wB97X-D3/def2-TZVPD/VACUUM Frequency Analysis",
          "wB97X-D3/def2-TZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVPD/VACUUM Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPD/VACUUM Unknown",
          "wB97X-D3/def2-TZVPD/PCM Single Point",
          "wB97X-D3/def2-TZVPD/PCM Force",
          "wB97X-D3/def2-TZVPD/PCM Geometry Optimization",
          "wB97X-D3/def2-TZVPD/PCM Frequency Analysis",
          "wB97X-D3/def2-TZVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVPD/PCM Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPD/PCM Unknown",
          "wB97X-D3/def2-TZVPD/SMD Single Point",
          "wB97X-D3/def2-TZVPD/SMD Force",
          "wB97X-D3/def2-TZVPD/SMD Geometry Optimization",
          "wB97X-D3/def2-TZVPD/SMD Frequency Analysis",
          "wB97X-D3/def2-TZVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVPD/SMD Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPD/SMD Unknown",
          "wB97X-D3/def2-TZVPP/VACUUM Single Point",
          "wB97X-D3/def2-TZVPP/VACUUM Force",
          "wB97X-D3/def2-TZVPP/VACUUM Geometry Optimization",
          "wB97X-D3/def2-TZVPP/VACUUM Frequency Analysis",
          "wB97X-D3/def2-TZVPP/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVPP/VACUUM Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPP/VACUUM Unknown",
          "wB97X-D3/def2-TZVPP/PCM Single Point",
          "wB97X-D3/def2-TZVPP/PCM Force",
          "wB97X-D3/def2-TZVPP/PCM Geometry Optimization",
          "wB97X-D3/def2-TZVPP/PCM Frequency Analysis",
          "wB97X-D3/def2-TZVPP/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVPP/PCM Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPP/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPP/PCM Unknown",
          "wB97X-D3/def2-TZVPP/SMD Single Point",
          "wB97X-D3/def2-TZVPP/SMD Force",
          "wB97X-D3/def2-TZVPP/SMD Geometry Optimization",
          "wB97X-D3/def2-TZVPP/SMD Frequency Analysis",
          "wB97X-D3/def2-TZVPP/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVPP/SMD Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPP/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPP/SMD Unknown",
          "wB97X-D3/def2-TZVPPD/VACUUM Single Point",
          "wB97X-D3/def2-TZVPPD/VACUUM Force",
          "wB97X-D3/def2-TZVPPD/VACUUM Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/VACUUM Frequency Analysis",
          "wB97X-D3/def2-TZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/VACUUM Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/VACUUM Unknown",
          "wB97X-D3/def2-TZVPPD/PCM Single Point",
          "wB97X-D3/def2-TZVPPD/PCM Force",
          "wB97X-D3/def2-TZVPPD/PCM Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/PCM Frequency Analysis",
          "wB97X-D3/def2-TZVPPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/PCM Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/PCM Unknown",
          "wB97X-D3/def2-TZVPPD/SMD Single Point",
          "wB97X-D3/def2-TZVPPD/SMD Force",
          "wB97X-D3/def2-TZVPPD/SMD Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/SMD Frequency Analysis",
          "wB97X-D3/def2-TZVPPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/SMD Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-TZVPPD/SMD Unknown",
          "wB97X-D3/def2-QZVPD/VACUUM Single Point",
          "wB97X-D3/def2-QZVPD/VACUUM Force",
          "wB97X-D3/def2-QZVPD/VACUUM Geometry Optimization",
          "wB97X-D3/def2-QZVPD/VACUUM Frequency Analysis",
          "wB97X-D3/def2-QZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-QZVPD/VACUUM Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPD/VACUUM Unknown",
          "wB97X-D3/def2-QZVPD/PCM Single Point",
          "wB97X-D3/def2-QZVPD/PCM Force",
          "wB97X-D3/def2-QZVPD/PCM Geometry Optimization",
          "wB97X-D3/def2-QZVPD/PCM Frequency Analysis",
          "wB97X-D3/def2-QZVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-QZVPD/PCM Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPD/PCM Unknown",
          "wB97X-D3/def2-QZVPD/SMD Single Point",
          "wB97X-D3/def2-QZVPD/SMD Force",
          "wB97X-D3/def2-QZVPD/SMD Geometry Optimization",
          "wB97X-D3/def2-QZVPD/SMD Frequency Analysis",
          "wB97X-D3/def2-QZVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-QZVPD/SMD Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPD/SMD Unknown",
          "wB97X-D3/def2-QZVPPD/VACUUM Single Point",
          "wB97X-D3/def2-QZVPPD/VACUUM Force",
          "wB97X-D3/def2-QZVPPD/VACUUM Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/VACUUM Frequency Analysis",
          "wB97X-D3/def2-QZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/VACUUM Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/VACUUM Unknown",
          "wB97X-D3/def2-QZVPPD/PCM Single Point",
          "wB97X-D3/def2-QZVPPD/PCM Force",
          "wB97X-D3/def2-QZVPPD/PCM Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/PCM Frequency Analysis",
          "wB97X-D3/def2-QZVPPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/PCM Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/PCM Unknown",
          "wB97X-D3/def2-QZVPPD/SMD Single Point",
          "wB97X-D3/def2-QZVPPD/SMD Force",
          "wB97X-D3/def2-QZVPPD/SMD Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/SMD Frequency Analysis",
          "wB97X-D3/def2-QZVPPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/SMD Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-D3/def2-QZVPPD/SMD Unknown",
          "wB97X-V/6-31g*/VACUUM Single Point",
          "wB97X-V/6-31g*/VACUUM Force",
          "wB97X-V/6-31g*/VACUUM Geometry Optimization",
          "wB97X-V/6-31g*/VACUUM Frequency Analysis",
          "wB97X-V/6-31g*/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-V/6-31g*/VACUUM Transition State Geometry Optimization",
          "wB97X-V/6-31g*/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/6-31g*/VACUUM Unknown",
          "wB97X-V/6-31g*/PCM Single Point",
          "wB97X-V/6-31g*/PCM Force",
          "wB97X-V/6-31g*/PCM Geometry Optimization",
          "wB97X-V/6-31g*/PCM Frequency Analysis",
          "wB97X-V/6-31g*/PCM Frequency Flattening Geometry Optimization",
          "wB97X-V/6-31g*/PCM Transition State Geometry Optimization",
          "wB97X-V/6-31g*/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/6-31g*/PCM Unknown",
          "wB97X-V/6-31g*/SMD Single Point",
          "wB97X-V/6-31g*/SMD Force",
          "wB97X-V/6-31g*/SMD Geometry Optimization",
          "wB97X-V/6-31g*/SMD Frequency Analysis",
          "wB97X-V/6-31g*/SMD Frequency Flattening Geometry Optimization",
          "wB97X-V/6-31g*/SMD Transition State Geometry Optimization",
          "wB97X-V/6-31g*/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/6-31g*/SMD Unknown",
          "wB97X-V/def2-SVPD/VACUUM Single Point",
          "wB97X-V/def2-SVPD/VACUUM Force",
          "wB97X-V/def2-SVPD/VACUUM Geometry Optimization",
          "wB97X-V/def2-SVPD/VACUUM Frequency Analysis",
          "wB97X-V/def2-SVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-SVPD/VACUUM Transition State Geometry Optimization",
          "wB97X-V/def2-SVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-SVPD/VACUUM Unknown",
          "wB97X-V/def2-SVPD/PCM Single Point",
          "wB97X-V/def2-SVPD/PCM Force",
          "wB97X-V/def2-SVPD/PCM Geometry Optimization",
          "wB97X-V/def2-SVPD/PCM Frequency Analysis",
          "wB97X-V/def2-SVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-SVPD/PCM Transition State Geometry Optimization",
          "wB97X-V/def2-SVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-SVPD/PCM Unknown",
          "wB97X-V/def2-SVPD/SMD Single Point",
          "wB97X-V/def2-SVPD/SMD Force",
          "wB97X-V/def2-SVPD/SMD Geometry Optimization",
          "wB97X-V/def2-SVPD/SMD Frequency Analysis",
          "wB97X-V/def2-SVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-SVPD/SMD Transition State Geometry Optimization",
          "wB97X-V/def2-SVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-SVPD/SMD Unknown",
          "wB97X-V/def2-TZVP/VACUUM Single Point",
          "wB97X-V/def2-TZVP/VACUUM Force",
          "wB97X-V/def2-TZVP/VACUUM Geometry Optimization",
          "wB97X-V/def2-TZVP/VACUUM Frequency Analysis",
          "wB97X-V/def2-TZVP/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVP/VACUUM Transition State Geometry Optimization",
          "wB97X-V/def2-TZVP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVP/VACUUM Unknown",
          "wB97X-V/def2-TZVP/PCM Single Point",
          "wB97X-V/def2-TZVP/PCM Force",
          "wB97X-V/def2-TZVP/PCM Geometry Optimization",
          "wB97X-V/def2-TZVP/PCM Frequency Analysis",
          "wB97X-V/def2-TZVP/PCM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVP/PCM Transition State Geometry Optimization",
          "wB97X-V/def2-TZVP/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVP/PCM Unknown",
          "wB97X-V/def2-TZVP/SMD Single Point",
          "wB97X-V/def2-TZVP/SMD Force",
          "wB97X-V/def2-TZVP/SMD Geometry Optimization",
          "wB97X-V/def2-TZVP/SMD Frequency Analysis",
          "wB97X-V/def2-TZVP/SMD Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVP/SMD Transition State Geometry Optimization",
          "wB97X-V/def2-TZVP/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVP/SMD Unknown",
          "wB97X-V/def2-TZVPD/VACUUM Single Point",
          "wB97X-V/def2-TZVPD/VACUUM Force",
          "wB97X-V/def2-TZVPD/VACUUM Geometry Optimization",
          "wB97X-V/def2-TZVPD/VACUUM Frequency Analysis",
          "wB97X-V/def2-TZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVPD/VACUUM Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPD/VACUUM Unknown",
          "wB97X-V/def2-TZVPD/PCM Single Point",
          "wB97X-V/def2-TZVPD/PCM Force",
          "wB97X-V/def2-TZVPD/PCM Geometry Optimization",
          "wB97X-V/def2-TZVPD/PCM Frequency Analysis",
          "wB97X-V/def2-TZVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVPD/PCM Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPD/PCM Unknown",
          "wB97X-V/def2-TZVPD/SMD Single Point",
          "wB97X-V/def2-TZVPD/SMD Force",
          "wB97X-V/def2-TZVPD/SMD Geometry Optimization",
          "wB97X-V/def2-TZVPD/SMD Frequency Analysis",
          "wB97X-V/def2-TZVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVPD/SMD Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPD/SMD Unknown",
          "wB97X-V/def2-TZVPP/VACUUM Single Point",
          "wB97X-V/def2-TZVPP/VACUUM Force",
          "wB97X-V/def2-TZVPP/VACUUM Geometry Optimization",
          "wB97X-V/def2-TZVPP/VACUUM Frequency Analysis",
          "wB97X-V/def2-TZVPP/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVPP/VACUUM Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPP/VACUUM Unknown",
          "wB97X-V/def2-TZVPP/PCM Single Point",
          "wB97X-V/def2-TZVPP/PCM Force",
          "wB97X-V/def2-TZVPP/PCM Geometry Optimization",
          "wB97X-V/def2-TZVPP/PCM Frequency Analysis",
          "wB97X-V/def2-TZVPP/PCM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVPP/PCM Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPP/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPP/PCM Unknown",
          "wB97X-V/def2-TZVPP/SMD Single Point",
          "wB97X-V/def2-TZVPP/SMD Force",
          "wB97X-V/def2-TZVPP/SMD Geometry Optimization",
          "wB97X-V/def2-TZVPP/SMD Frequency Analysis",
          "wB97X-V/def2-TZVPP/SMD Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVPP/SMD Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPP/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPP/SMD Unknown",
          "wB97X-V/def2-TZVPPD/VACUUM Single Point",
          "wB97X-V/def2-TZVPPD/VACUUM Force",
          "wB97X-V/def2-TZVPPD/VACUUM Geometry Optimization",
          "wB97X-V/def2-TZVPPD/VACUUM Frequency Analysis",
          "wB97X-V/def2-TZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVPPD/VACUUM Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPPD/VACUUM Unknown",
          "wB97X-V/def2-TZVPPD/PCM Single Point",
          "wB97X-V/def2-TZVPPD/PCM Force",
          "wB97X-V/def2-TZVPPD/PCM Geometry Optimization",
          "wB97X-V/def2-TZVPPD/PCM Frequency Analysis",
          "wB97X-V/def2-TZVPPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVPPD/PCM Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPPD/PCM Unknown",
          "wB97X-V/def2-TZVPPD/SMD Single Point",
          "wB97X-V/def2-TZVPPD/SMD Force",
          "wB97X-V/def2-TZVPPD/SMD Geometry Optimization",
          "wB97X-V/def2-TZVPPD/SMD Frequency Analysis",
          "wB97X-V/def2-TZVPPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-TZVPPD/SMD Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-TZVPPD/SMD Unknown",
          "wB97X-V/def2-QZVPD/VACUUM Single Point",
          "wB97X-V/def2-QZVPD/VACUUM Force",
          "wB97X-V/def2-QZVPD/VACUUM Geometry Optimization",
          "wB97X-V/def2-QZVPD/VACUUM Frequency Analysis",
          "wB97X-V/def2-QZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-QZVPD/VACUUM Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPD/VACUUM Unknown",
          "wB97X-V/def2-QZVPD/PCM Single Point",
          "wB97X-V/def2-QZVPD/PCM Force",
          "wB97X-V/def2-QZVPD/PCM Geometry Optimization",
          "wB97X-V/def2-QZVPD/PCM Frequency Analysis",
          "wB97X-V/def2-QZVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-QZVPD/PCM Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPD/PCM Unknown",
          "wB97X-V/def2-QZVPD/SMD Single Point",
          "wB97X-V/def2-QZVPD/SMD Force",
          "wB97X-V/def2-QZVPD/SMD Geometry Optimization",
          "wB97X-V/def2-QZVPD/SMD Frequency Analysis",
          "wB97X-V/def2-QZVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-QZVPD/SMD Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPD/SMD Unknown",
          "wB97X-V/def2-QZVPPD/VACUUM Single Point",
          "wB97X-V/def2-QZVPPD/VACUUM Force",
          "wB97X-V/def2-QZVPPD/VACUUM Geometry Optimization",
          "wB97X-V/def2-QZVPPD/VACUUM Frequency Analysis",
          "wB97X-V/def2-QZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-QZVPPD/VACUUM Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPPD/VACUUM Unknown",
          "wB97X-V/def2-QZVPPD/PCM Single Point",
          "wB97X-V/def2-QZVPPD/PCM Force",
          "wB97X-V/def2-QZVPPD/PCM Geometry Optimization",
          "wB97X-V/def2-QZVPPD/PCM Frequency Analysis",
          "wB97X-V/def2-QZVPPD/PCM Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-QZVPPD/PCM Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPPD/PCM Unknown",
          "wB97X-V/def2-QZVPPD/SMD Single Point",
          "wB97X-V/def2-QZVPPD/SMD Force",
          "wB97X-V/def2-QZVPPD/SMD Geometry Optimization",
          "wB97X-V/def2-QZVPPD/SMD Frequency Analysis",
          "wB97X-V/def2-QZVPPD/SMD Frequency Flattening Geometry Optimization",
          "wB97X-V/def2-QZVPPD/SMD Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97X-V/def2-QZVPPD/SMD Unknown",
          "wB97M-V/6-31g*/VACUUM Single Point",
          "wB97M-V/6-31g*/VACUUM Force",
          "wB97M-V/6-31g*/VACUUM Geometry Optimization",
          "wB97M-V/6-31g*/VACUUM Frequency Analysis",
          "wB97M-V/6-31g*/VACUUM Frequency Flattening Geometry Optimization",
          "wB97M-V/6-31g*/VACUUM Transition State Geometry Optimization",
          "wB97M-V/6-31g*/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/6-31g*/VACUUM Unknown",
          "wB97M-V/6-31g*/PCM Single Point",
          "wB97M-V/6-31g*/PCM Force",
          "wB97M-V/6-31g*/PCM Geometry Optimization",
          "wB97M-V/6-31g*/PCM Frequency Analysis",
          "wB97M-V/6-31g*/PCM Frequency Flattening Geometry Optimization",
          "wB97M-V/6-31g*/PCM Transition State Geometry Optimization",
          "wB97M-V/6-31g*/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/6-31g*/PCM Unknown",
          "wB97M-V/6-31g*/SMD Single Point",
          "wB97M-V/6-31g*/SMD Force",
          "wB97M-V/6-31g*/SMD Geometry Optimization",
          "wB97M-V/6-31g*/SMD Frequency Analysis",
          "wB97M-V/6-31g*/SMD Frequency Flattening Geometry Optimization",
          "wB97M-V/6-31g*/SMD Transition State Geometry Optimization",
          "wB97M-V/6-31g*/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/6-31g*/SMD Unknown",
          "wB97M-V/def2-SVPD/VACUUM Single Point",
          "wB97M-V/def2-SVPD/VACUUM Force",
          "wB97M-V/def2-SVPD/VACUUM Geometry Optimization",
          "wB97M-V/def2-SVPD/VACUUM Frequency Analysis",
          "wB97M-V/def2-SVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-SVPD/VACUUM Transition State Geometry Optimization",
          "wB97M-V/def2-SVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-SVPD/VACUUM Unknown",
          "wB97M-V/def2-SVPD/PCM Single Point",
          "wB97M-V/def2-SVPD/PCM Force",
          "wB97M-V/def2-SVPD/PCM Geometry Optimization",
          "wB97M-V/def2-SVPD/PCM Frequency Analysis",
          "wB97M-V/def2-SVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-SVPD/PCM Transition State Geometry Optimization",
          "wB97M-V/def2-SVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-SVPD/PCM Unknown",
          "wB97M-V/def2-SVPD/SMD Single Point",
          "wB97M-V/def2-SVPD/SMD Force",
          "wB97M-V/def2-SVPD/SMD Geometry Optimization",
          "wB97M-V/def2-SVPD/SMD Frequency Analysis",
          "wB97M-V/def2-SVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-SVPD/SMD Transition State Geometry Optimization",
          "wB97M-V/def2-SVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-SVPD/SMD Unknown",
          "wB97M-V/def2-TZVP/VACUUM Single Point",
          "wB97M-V/def2-TZVP/VACUUM Force",
          "wB97M-V/def2-TZVP/VACUUM Geometry Optimization",
          "wB97M-V/def2-TZVP/VACUUM Frequency Analysis",
          "wB97M-V/def2-TZVP/VACUUM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVP/VACUUM Transition State Geometry Optimization",
          "wB97M-V/def2-TZVP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVP/VACUUM Unknown",
          "wB97M-V/def2-TZVP/PCM Single Point",
          "wB97M-V/def2-TZVP/PCM Force",
          "wB97M-V/def2-TZVP/PCM Geometry Optimization",
          "wB97M-V/def2-TZVP/PCM Frequency Analysis",
          "wB97M-V/def2-TZVP/PCM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVP/PCM Transition State Geometry Optimization",
          "wB97M-V/def2-TZVP/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVP/PCM Unknown",
          "wB97M-V/def2-TZVP/SMD Single Point",
          "wB97M-V/def2-TZVP/SMD Force",
          "wB97M-V/def2-TZVP/SMD Geometry Optimization",
          "wB97M-V/def2-TZVP/SMD Frequency Analysis",
          "wB97M-V/def2-TZVP/SMD Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVP/SMD Transition State Geometry Optimization",
          "wB97M-V/def2-TZVP/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVP/SMD Unknown",
          "wB97M-V/def2-TZVPD/VACUUM Single Point",
          "wB97M-V/def2-TZVPD/VACUUM Force",
          "wB97M-V/def2-TZVPD/VACUUM Geometry Optimization",
          "wB97M-V/def2-TZVPD/VACUUM Frequency Analysis",
          "wB97M-V/def2-TZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVPD/VACUUM Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPD/VACUUM Unknown",
          "wB97M-V/def2-TZVPD/PCM Single Point",
          "wB97M-V/def2-TZVPD/PCM Force",
          "wB97M-V/def2-TZVPD/PCM Geometry Optimization",
          "wB97M-V/def2-TZVPD/PCM Frequency Analysis",
          "wB97M-V/def2-TZVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVPD/PCM Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPD/PCM Unknown",
          "wB97M-V/def2-TZVPD/SMD Single Point",
          "wB97M-V/def2-TZVPD/SMD Force",
          "wB97M-V/def2-TZVPD/SMD Geometry Optimization",
          "wB97M-V/def2-TZVPD/SMD Frequency Analysis",
          "wB97M-V/def2-TZVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVPD/SMD Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPD/SMD Unknown",
          "wB97M-V/def2-TZVPP/VACUUM Single Point",
          "wB97M-V/def2-TZVPP/VACUUM Force",
          "wB97M-V/def2-TZVPP/VACUUM Geometry Optimization",
          "wB97M-V/def2-TZVPP/VACUUM Frequency Analysis",
          "wB97M-V/def2-TZVPP/VACUUM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVPP/VACUUM Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPP/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPP/VACUUM Unknown",
          "wB97M-V/def2-TZVPP/PCM Single Point",
          "wB97M-V/def2-TZVPP/PCM Force",
          "wB97M-V/def2-TZVPP/PCM Geometry Optimization",
          "wB97M-V/def2-TZVPP/PCM Frequency Analysis",
          "wB97M-V/def2-TZVPP/PCM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVPP/PCM Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPP/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPP/PCM Unknown",
          "wB97M-V/def2-TZVPP/SMD Single Point",
          "wB97M-V/def2-TZVPP/SMD Force",
          "wB97M-V/def2-TZVPP/SMD Geometry Optimization",
          "wB97M-V/def2-TZVPP/SMD Frequency Analysis",
          "wB97M-V/def2-TZVPP/SMD Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVPP/SMD Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPP/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPP/SMD Unknown",
          "wB97M-V/def2-TZVPPD/VACUUM Single Point",
          "wB97M-V/def2-TZVPPD/VACUUM Force",
          "wB97M-V/def2-TZVPPD/VACUUM Geometry Optimization",
          "wB97M-V/def2-TZVPPD/VACUUM Frequency Analysis",
          "wB97M-V/def2-TZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVPPD/VACUUM Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPPD/VACUUM Unknown",
          "wB97M-V/def2-TZVPPD/PCM Single Point",
          "wB97M-V/def2-TZVPPD/PCM Force",
          "wB97M-V/def2-TZVPPD/PCM Geometry Optimization",
          "wB97M-V/def2-TZVPPD/PCM Frequency Analysis",
          "wB97M-V/def2-TZVPPD/PCM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVPPD/PCM Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPPD/PCM Unknown",
          "wB97M-V/def2-TZVPPD/SMD Single Point",
          "wB97M-V/def2-TZVPPD/SMD Force",
          "wB97M-V/def2-TZVPPD/SMD Geometry Optimization",
          "wB97M-V/def2-TZVPPD/SMD Frequency Analysis",
          "wB97M-V/def2-TZVPPD/SMD Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-TZVPPD/SMD Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-TZVPPD/SMD Unknown",
          "wB97M-V/def2-QZVPD/VACUUM Single Point",
          "wB97M-V/def2-QZVPD/VACUUM Force",
          "wB97M-V/def2-QZVPD/VACUUM Geometry Optimization",
          "wB97M-V/def2-QZVPD/VACUUM Frequency Analysis",
          "wB97M-V/def2-QZVPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-QZVPD/VACUUM Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPD/VACUUM Unknown",
          "wB97M-V/def2-QZVPD/PCM Single Point",
          "wB97M-V/def2-QZVPD/PCM Force",
          "wB97M-V/def2-QZVPD/PCM Geometry Optimization",
          "wB97M-V/def2-QZVPD/PCM Frequency Analysis",
          "wB97M-V/def2-QZVPD/PCM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-QZVPD/PCM Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPD/PCM Unknown",
          "wB97M-V/def2-QZVPD/SMD Single Point",
          "wB97M-V/def2-QZVPD/SMD Force",
          "wB97M-V/def2-QZVPD/SMD Geometry Optimization",
          "wB97M-V/def2-QZVPD/SMD Frequency Analysis",
          "wB97M-V/def2-QZVPD/SMD Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-QZVPD/SMD Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPD/SMD Unknown",
          "wB97M-V/def2-QZVPPD/VACUUM Single Point",
          "wB97M-V/def2-QZVPPD/VACUUM Force",
          "wB97M-V/def2-QZVPPD/VACUUM Geometry Optimization",
          "wB97M-V/def2-QZVPPD/VACUUM Frequency Analysis",
          "wB97M-V/def2-QZVPPD/VACUUM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-QZVPPD/VACUUM Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPPD/VACUUM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPPD/VACUUM Unknown",
          "wB97M-V/def2-QZVPPD/PCM Single Point",
          "wB97M-V/def2-QZVPPD/PCM Force",
          "wB97M-V/def2-QZVPPD/PCM Geometry Optimization",
          "wB97M-V/def2-QZVPPD/PCM Frequency Analysis",
          "wB97M-V/def2-QZVPPD/PCM Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-QZVPPD/PCM Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPPD/PCM Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPPD/PCM Unknown",
          "wB97M-V/def2-QZVPPD/SMD Single Point",
          "wB97M-V/def2-QZVPPD/SMD Force",
          "wB97M-V/def2-QZVPPD/SMD Geometry Optimization",
          "wB97M-V/def2-QZVPPD/SMD Frequency Analysis",
          "wB97M-V/def2-QZVPPD/SMD Frequency Flattening Geometry Optimization",
          "wB97M-V/def2-QZVPPD/SMD Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPPD/SMD Frequency Flattening Transition State Geometry Optimization",
          "wB97M-V/def2-QZVPPD/SMD Unknown"
        ],
        "title": "CalcType",
        "description": "Calculation types (LOT + task type) for Q-Chem "
      },
      "emmet__core__qchem__calc_types__enums__TaskType": {
        "enum": [
          "Single Point",
          "Force",
          "Geometry Optimization",
          "Frequency Analysis",
          "Frequency Flattening Geometry Optimization",
          "Transition State Geometry Optimization",
          "Frequency Flattening Transition State Geometry Optimization",
          "Unknown"
        ],
        "title": "TaskType",
        "description": "Calculation task types for Q-Chem "
      },
      "emmet__core__summary__HasProps": {
        "enum": [
          "materials",
          "thermo",
          "xas",
          "grain_boundaries",
          "chemenv",
          "electronic_structure",
          "absorption",
          "bandstructure",
          "dos",
          "magnetism",
          "elasticity",
          "dielectric",
          "piezoelectric",
          "surface_properties",
          "oxi_states",
          "provenance",
          "charge_density",
          "eos",
          "phonon",
          "insertion_electrodes",
          "substrates"
        ],
        "title": "HasProps",
        "description": "Enum of possible hasprops values."
      },
      "emmet__core__vasp__calc_types__enums__CalcType": {
        "enum": [
          "AM05 NSCF Line",
          "AM05 NSCF Uniform",
          "AM05 Dielectric",
          "AM05 DFPT",
          "AM05 DFPT Dielectric",
          "AM05 NMR Nuclear Shielding",
          "AM05 NMR Electric Field Gradient",
          "AM05 Static",
          "AM05 Structure Optimization",
          "AM05 Deformation",
          "AM05 Unrecognized",
          "GGA NSCF Line",
          "GGA NSCF Uniform",
          "GGA Dielectric",
          "GGA DFPT",
          "GGA DFPT Dielectric",
          "GGA NMR Nuclear Shielding",
          "GGA NMR Electric Field Gradient",
          "GGA Static",
          "GGA Structure Optimization",
          "GGA Deformation",
          "GGA Unrecognized",
          "PBE NSCF Line",
          "PBE NSCF Uniform",
          "PBE Dielectric",
          "PBE DFPT",
          "PBE DFPT Dielectric",
          "PBE NMR Nuclear Shielding",
          "PBE NMR Electric Field Gradient",
          "PBE Static",
          "PBE Structure Optimization",
          "PBE Deformation",
          "PBE Unrecognized",
          "PBESol NSCF Line",
          "PBESol NSCF Uniform",
          "PBESol Dielectric",
          "PBESol DFPT",
          "PBESol DFPT Dielectric",
          "PBESol NMR Nuclear Shielding",
          "PBESol NMR Electric Field Gradient",
          "PBESol Static",
          "PBESol Structure Optimization",
          "PBESol Deformation",
          "PBESol Unrecognized",
          "RevPBE+PADE NSCF Line",
          "RevPBE+PADE NSCF Uniform",
          "RevPBE+PADE Dielectric",
          "RevPBE+PADE DFPT",
          "RevPBE+PADE DFPT Dielectric",
          "RevPBE+PADE NMR Nuclear Shielding",
          "RevPBE+PADE NMR Electric Field Gradient",
          "RevPBE+PADE Static",
          "RevPBE+PADE Structure Optimization",
          "RevPBE+PADE Deformation",
          "RevPBE+PADE Unrecognized",
          "optB86b NSCF Line",
          "optB86b NSCF Uniform",
          "optB86b Dielectric",
          "optB86b DFPT",
          "optB86b DFPT Dielectric",
          "optB86b NMR Nuclear Shielding",
          "optB86b NMR Electric Field Gradient",
          "optB86b Static",
          "optB86b Structure Optimization",
          "optB86b Deformation",
          "optB86b Unrecognized",
          "optB88 NSCF Line",
          "optB88 NSCF Uniform",
          "optB88 Dielectric",
          "optB88 DFPT",
          "optB88 DFPT Dielectric",
          "optB88 NMR Nuclear Shielding",
          "optB88 NMR Electric Field Gradient",
          "optB88 Static",
          "optB88 Structure Optimization",
          "optB88 Deformation",
          "optB88 Unrecognized",
          "optPBE NSCF Line",
          "optPBE NSCF Uniform",
          "optPBE Dielectric",
          "optPBE DFPT",
          "optPBE DFPT Dielectric",
          "optPBE NMR Nuclear Shielding",
          "optPBE NMR Electric Field Gradient",
          "optPBE Static",
          "optPBE Structure Optimization",
          "optPBE Deformation",
          "optPBE Unrecognized",
          "revPBE NSCF Line",
          "revPBE NSCF Uniform",
          "revPBE Dielectric",
          "revPBE DFPT",
          "revPBE DFPT Dielectric",
          "revPBE NMR Nuclear Shielding",
          "revPBE NMR Electric Field Gradient",
          "revPBE Static",
          "revPBE Structure Optimization",
          "revPBE Deformation",
          "revPBE Unrecognized",
          "B3LYP NSCF Line",
          "B3LYP NSCF Uniform",
          "B3LYP Dielectric",
          "B3LYP DFPT",
          "B3LYP DFPT Dielectric",
          "B3LYP NMR Nuclear Shielding",
          "B3LYP NMR Electric Field Gradient",
          "B3LYP Static",
          "B3LYP Structure Optimization",
          "B3LYP Deformation",
          "B3LYP Unrecognized",
          "HF NSCF Line",
          "HF NSCF Uniform",
          "HF Dielectric",
          "HF DFPT",
          "HF DFPT Dielectric",
          "HF NMR Nuclear Shielding",
          "HF NMR Electric Field Gradient",
          "HF Static",
          "HF Structure Optimization",
          "HF Deformation",
          "HF Unrecognized",
          "HSE03 NSCF Line",
          "HSE03 NSCF Uniform",
          "HSE03 Dielectric",
          "HSE03 DFPT",
          "HSE03 DFPT Dielectric",
          "HSE03 NMR Nuclear Shielding",
          "HSE03 NMR Electric Field Gradient",
          "HSE03 Static",
          "HSE03 Structure Optimization",
          "HSE03 Deformation",
          "HSE03 Unrecognized",
          "HSE06 NSCF Line",
          "HSE06 NSCF Uniform",
          "HSE06 Dielectric",
          "HSE06 DFPT",
          "HSE06 DFPT Dielectric",
          "HSE06 NMR Nuclear Shielding",
          "HSE06 NMR Electric Field Gradient",
          "HSE06 Static",
          "HSE06 Structure Optimization",
          "HSE06 Deformation",
          "HSE06 Unrecognized",
          "PB0 NSCF Line",
          "PB0 NSCF Uniform",
          "PB0 Dielectric",
          "PB0 DFPT",
          "PB0 DFPT Dielectric",
          "PB0 NMR Nuclear Shielding",
          "PB0 NMR Electric Field Gradient",
          "PB0 Static",
          "PB0 Structure Optimization",
          "PB0 Deformation",
          "PB0 Unrecognized",
          "M06L NSCF Line",
          "M06L NSCF Uniform",
          "M06L Dielectric",
          "M06L DFPT",
          "M06L DFPT Dielectric",
          "M06L NMR Nuclear Shielding",
          "M06L NMR Electric Field Gradient",
          "M06L Static",
          "M06L Structure Optimization",
          "M06L Deformation",
          "M06L Unrecognized",
          "MBJL NSCF Line",
          "MBJL NSCF Uniform",
          "MBJL Dielectric",
          "MBJL DFPT",
          "MBJL DFPT Dielectric",
          "MBJL NMR Nuclear Shielding",
          "MBJL NMR Electric Field Gradient",
          "MBJL Static",
          "MBJL Structure Optimization",
          "MBJL Deformation",
          "MBJL Unrecognized",
          "MS0 NSCF Line",
          "MS0 NSCF Uniform",
          "MS0 Dielectric",
          "MS0 DFPT",
          "MS0 DFPT Dielectric",
          "MS0 NMR Nuclear Shielding",
          "MS0 NMR Electric Field Gradient",
          "MS0 Static",
          "MS0 Structure Optimization",
          "MS0 Deformation",
          "MS0 Unrecognized",
          "MS1 NSCF Line",
          "MS1 NSCF Uniform",
          "MS1 Dielectric",
          "MS1 DFPT",
          "MS1 DFPT Dielectric",
          "MS1 NMR Nuclear Shielding",
          "MS1 NMR Electric Field Gradient",
          "MS1 Static",
          "MS1 Structure Optimization",
          "MS1 Deformation",
          "MS1 Unrecognized",
          "MS2 NSCF Line",
          "MS2 NSCF Uniform",
          "MS2 Dielectric",
          "MS2 DFPT",
          "MS2 DFPT Dielectric",
          "MS2 NMR Nuclear Shielding",
          "MS2 NMR Electric Field Gradient",
          "MS2 Static",
          "MS2 Structure Optimization",
          "MS2 Deformation",
          "MS2 Unrecognized",
          "RTPSS NSCF Line",
          "RTPSS NSCF Uniform",
          "RTPSS Dielectric",
          "RTPSS DFPT",
          "RTPSS DFPT Dielectric",
          "RTPSS NMR Nuclear Shielding",
          "RTPSS NMR Electric Field Gradient",
          "RTPSS Static",
          "RTPSS Structure Optimization",
          "RTPSS Deformation",
          "RTPSS Unrecognized",
          "SCAN NSCF Line",
          "SCAN NSCF Uniform",
          "SCAN Dielectric",
          "SCAN DFPT",
          "SCAN DFPT Dielectric",
          "SCAN NMR Nuclear Shielding",
          "SCAN NMR Electric Field Gradient",
          "SCAN Static",
          "SCAN Structure Optimization",
          "SCAN Deformation",
          "SCAN Unrecognized",
          "R2SCAN NSCF Line",
          "R2SCAN NSCF Uniform",
          "R2SCAN Dielectric",
          "R2SCAN DFPT",
          "R2SCAN DFPT Dielectric",
          "R2SCAN NMR Nuclear Shielding",
          "R2SCAN NMR Electric Field Gradient",
          "R2SCAN Static",
          "R2SCAN Structure Optimization",
          "R2SCAN Deformation",
          "R2SCAN Unrecognized",
          "TPSS NSCF Line",
          "TPSS NSCF Uniform",
          "TPSS Dielectric",
          "TPSS DFPT",
          "TPSS DFPT Dielectric",
          "TPSS NMR Nuclear Shielding",
          "TPSS NMR Electric Field Gradient",
          "TPSS Static",
          "TPSS Structure Optimization",
          "TPSS Deformation",
          "TPSS Unrecognized",
          "R2SCAN-rVV10 NSCF Line",
          "R2SCAN-rVV10 NSCF Uniform",
          "R2SCAN-rVV10 Dielectric",
          "R2SCAN-rVV10 DFPT",
          "R2SCAN-rVV10 DFPT Dielectric",
          "R2SCAN-rVV10 NMR Nuclear Shielding",
          "R2SCAN-rVV10 NMR Electric Field Gradient",
          "R2SCAN-rVV10 Static",
          "R2SCAN-rVV10 Structure Optimization",
          "R2SCAN-rVV10 Deformation",
          "R2SCAN-rVV10 Unrecognized",
          "SCAN-rVV10 NSCF Line",
          "SCAN-rVV10 NSCF Uniform",
          "SCAN-rVV10 Dielectric",
          "SCAN-rVV10 DFPT",
          "SCAN-rVV10 DFPT Dielectric",
          "SCAN-rVV10 NMR Nuclear Shielding",
          "SCAN-rVV10 NMR Electric Field Gradient",
          "SCAN-rVV10 Static",
          "SCAN-rVV10 Structure Optimization",
          "SCAN-rVV10 Deformation",
          "SCAN-rVV10 Unrecognized",
          "optB86b-vdW NSCF Line",
          "optB86b-vdW NSCF Uniform",
          "optB86b-vdW Dielectric",
          "optB86b-vdW DFPT",
          "optB86b-vdW DFPT Dielectric",
          "optB86b-vdW NMR Nuclear Shielding",
          "optB86b-vdW NMR Electric Field Gradient",
          "optB86b-vdW Static",
          "optB86b-vdW Structure Optimization",
          "optB86b-vdW Deformation",
          "optB86b-vdW Unrecognized",
          "optB88-vdW NSCF Line",
          "optB88-vdW NSCF Uniform",
          "optB88-vdW Dielectric",
          "optB88-vdW DFPT",
          "optB88-vdW DFPT Dielectric",
          "optB88-vdW NMR Nuclear Shielding",
          "optB88-vdW NMR Electric Field Gradient",
          "optB88-vdW Static",
          "optB88-vdW Structure Optimization",
          "optB88-vdW Deformation",
          "optB88-vdW Unrecognized",
          "optPBE-vdW NSCF Line",
          "optPBE-vdW NSCF Uniform",
          "optPBE-vdW Dielectric",
          "optPBE-vdW DFPT",
          "optPBE-vdW DFPT Dielectric",
          "optPBE-vdW NMR Nuclear Shielding",
          "optPBE-vdW NMR Electric Field Gradient",
          "optPBE-vdW Static",
          "optPBE-vdW Structure Optimization",
          "optPBE-vdW Deformation",
          "optPBE-vdW Unrecognized",
          "rev-vdW-DF2 NSCF Line",
          "rev-vdW-DF2 NSCF Uniform",
          "rev-vdW-DF2 Dielectric",
          "rev-vdW-DF2 DFPT",
          "rev-vdW-DF2 DFPT Dielectric",
          "rev-vdW-DF2 NMR Nuclear Shielding",
          "rev-vdW-DF2 NMR Electric Field Gradient",
          "rev-vdW-DF2 Static",
          "rev-vdW-DF2 Structure Optimization",
          "rev-vdW-DF2 Deformation",
          "rev-vdW-DF2 Unrecognized",
          "revPBE-vdW NSCF Line",
          "revPBE-vdW NSCF Uniform",
          "revPBE-vdW Dielectric",
          "revPBE-vdW DFPT",
          "revPBE-vdW DFPT Dielectric",
          "revPBE-vdW NMR Nuclear Shielding",
          "revPBE-vdW NMR Electric Field Gradient",
          "revPBE-vdW Static",
          "revPBE-vdW Structure Optimization",
          "revPBE-vdW Deformation",
          "revPBE-vdW Unrecognized",
          "vdW-DF2 NSCF Line",
          "vdW-DF2 NSCF Uniform",
          "vdW-DF2 Dielectric",
          "vdW-DF2 DFPT",
          "vdW-DF2 DFPT Dielectric",
          "vdW-DF2 NMR Nuclear Shielding",
          "vdW-DF2 NMR Electric Field Gradient",
          "vdW-DF2 Static",
          "vdW-DF2 Structure Optimization",
          "vdW-DF2 Deformation",
          "vdW-DF2 Unrecognized",
          "AM05+U NSCF Line",
          "AM05+U NSCF Uniform",
          "AM05+U Dielectric",
          "AM05+U DFPT",
          "AM05+U DFPT Dielectric",
          "AM05+U NMR Nuclear Shielding",
          "AM05+U NMR Electric Field Gradient",
          "AM05+U Static",
          "AM05+U Structure Optimization",
          "AM05+U Deformation",
          "AM05+U Unrecognized",
          "GGA+U NSCF Line",
          "GGA+U NSCF Uniform",
          "GGA+U Dielectric",
          "GGA+U DFPT",
          "GGA+U DFPT Dielectric",
          "GGA+U NMR Nuclear Shielding",
          "GGA+U NMR Electric Field Gradient",
          "GGA+U Static",
          "GGA+U Structure Optimization",
          "GGA+U Deformation",
          "GGA+U Unrecognized",
          "PBE+U NSCF Line",
          "PBE+U NSCF Uniform",
          "PBE+U Dielectric",
          "PBE+U DFPT",
          "PBE+U DFPT Dielectric",
          "PBE+U NMR Nuclear Shielding",
          "PBE+U NMR Electric Field Gradient",
          "PBE+U Static",
          "PBE+U Structure Optimization",
          "PBE+U Deformation",
          "PBE+U Unrecognized",
          "PBESol+U NSCF Line",
          "PBESol+U NSCF Uniform",
          "PBESol+U Dielectric",
          "PBESol+U DFPT",
          "PBESol+U DFPT Dielectric",
          "PBESol+U NMR Nuclear Shielding",
          "PBESol+U NMR Electric Field Gradient",
          "PBESol+U Static",
          "PBESol+U Structure Optimization",
          "PBESol+U Deformation",
          "PBESol+U Unrecognized",
          "RevPBE+PADE+U NSCF Line",
          "RevPBE+PADE+U NSCF Uniform",
          "RevPBE+PADE+U Dielectric",
          "RevPBE+PADE+U DFPT",
          "RevPBE+PADE+U DFPT Dielectric",
          "RevPBE+PADE+U NMR Nuclear Shielding",
          "RevPBE+PADE+U NMR Electric Field Gradient",
          "RevPBE+PADE+U Static",
          "RevPBE+PADE+U Structure Optimization",
          "RevPBE+PADE+U Deformation",
          "RevPBE+PADE+U Unrecognized",
          "optB86b+U NSCF Line",
          "optB86b+U NSCF Uniform",
          "optB86b+U Dielectric",
          "optB86b+U DFPT",
          "optB86b+U DFPT Dielectric",
          "optB86b+U NMR Nuclear Shielding",
          "optB86b+U NMR Electric Field Gradient",
          "optB86b+U Static",
          "optB86b+U Structure Optimization",
          "optB86b+U Deformation",
          "optB86b+U Unrecognized",
          "optB88+U NSCF Line",
          "optB88+U NSCF Uniform",
          "optB88+U Dielectric",
          "optB88+U DFPT",
          "optB88+U DFPT Dielectric",
          "optB88+U NMR Nuclear Shielding",
          "optB88+U NMR Electric Field Gradient",
          "optB88+U Static",
          "optB88+U Structure Optimization",
          "optB88+U Deformation",
          "optB88+U Unrecognized",
          "optPBE+U NSCF Line",
          "optPBE+U NSCF Uniform",
          "optPBE+U Dielectric",
          "optPBE+U DFPT",
          "optPBE+U DFPT Dielectric",
          "optPBE+U NMR Nuclear Shielding",
          "optPBE+U NMR Electric Field Gradient",
          "optPBE+U Static",
          "optPBE+U Structure Optimization",
          "optPBE+U Deformation",
          "optPBE+U Unrecognized",
          "revPBE+U NSCF Line",
          "revPBE+U NSCF Uniform",
          "revPBE+U Dielectric",
          "revPBE+U DFPT",
          "revPBE+U DFPT Dielectric",
          "revPBE+U NMR Nuclear Shielding",
          "revPBE+U NMR Electric Field Gradient",
          "revPBE+U Static",
          "revPBE+U Structure Optimization",
          "revPBE+U Deformation",
          "revPBE+U Unrecognized",
          "B3LYP+U NSCF Line",
          "B3LYP+U NSCF Uniform",
          "B3LYP+U Dielectric",
          "B3LYP+U DFPT",
          "B3LYP+U DFPT Dielectric",
          "B3LYP+U NMR Nuclear Shielding",
          "B3LYP+U NMR Electric Field Gradient",
          "B3LYP+U Static",
          "B3LYP+U Structure Optimization",
          "B3LYP+U Deformation",
          "B3LYP+U Unrecognized",
          "HF+U NSCF Line",
          "HF+U NSCF Uniform",
          "HF+U Dielectric",
          "HF+U DFPT",
          "HF+U DFPT Dielectric",
          "HF+U NMR Nuclear Shielding",
          "HF+U NMR Electric Field Gradient",
          "HF+U Static",
          "HF+U Structure Optimization",
          "HF+U Deformation",
          "HF+U Unrecognized",
          "HSE03+U NSCF Line",
          "HSE03+U NSCF Uniform",
          "HSE03+U Dielectric",
          "HSE03+U DFPT",
          "HSE03+U DFPT Dielectric",
          "HSE03+U NMR Nuclear Shielding",
          "HSE03+U NMR Electric Field Gradient",
          "HSE03+U Static",
          "HSE03+U Structure Optimization",
          "HSE03+U Deformation",
          "HSE03+U Unrecognized",
          "HSE06+U NSCF Line",
          "HSE06+U NSCF Uniform",
          "HSE06+U Dielectric",
          "HSE06+U DFPT",
          "HSE06+U DFPT Dielectric",
          "HSE06+U NMR Nuclear Shielding",
          "HSE06+U NMR Electric Field Gradient",
          "HSE06+U Static",
          "HSE06+U Structure Optimization",
          "HSE06+U Deformation",
          "HSE06+U Unrecognized",
          "PB0+U NSCF Line",
          "PB0+U NSCF Uniform",
          "PB0+U Dielectric",
          "PB0+U DFPT",
          "PB0+U DFPT Dielectric",
          "PB0+U NMR Nuclear Shielding",
          "PB0+U NMR Electric Field Gradient",
          "PB0+U Static",
          "PB0+U Structure Optimization",
          "PB0+U Deformation",
          "PB0+U Unrecognized",
          "M06L+U NSCF Line",
          "M06L+U NSCF Uniform",
          "M06L+U Dielectric",
          "M06L+U DFPT",
          "M06L+U DFPT Dielectric",
          "M06L+U NMR Nuclear Shielding",
          "M06L+U NMR Electric Field Gradient",
          "M06L+U Static",
          "M06L+U Structure Optimization",
          "M06L+U Deformation",
          "M06L+U Unrecognized",
          "MBJL+U NSCF Line",
          "MBJL+U NSCF Uniform",
          "MBJL+U Dielectric",
          "MBJL+U DFPT",
          "MBJL+U DFPT Dielectric",
          "MBJL+U NMR Nuclear Shielding",
          "MBJL+U NMR Electric Field Gradient",
          "MBJL+U Static",
          "MBJL+U Structure Optimization",
          "MBJL+U Deformation",
          "MBJL+U Unrecognized",
          "MS0+U NSCF Line",
          "MS0+U NSCF Uniform",
          "MS0+U Dielectric",
          "MS0+U DFPT",
          "MS0+U DFPT Dielectric",
          "MS0+U NMR Nuclear Shielding",
          "MS0+U NMR Electric Field Gradient",
          "MS0+U Static",
          "MS0+U Structure Optimization",
          "MS0+U Deformation",
          "MS0+U Unrecognized",
          "MS1+U NSCF Line",
          "MS1+U NSCF Uniform",
          "MS1+U Dielectric",
          "MS1+U DFPT",
          "MS1+U DFPT Dielectric",
          "MS1+U NMR Nuclear Shielding",
          "MS1+U NMR Electric Field Gradient",
          "MS1+U Static",
          "MS1+U Structure Optimization",
          "MS1+U Deformation",
          "MS1+U Unrecognized",
          "MS2+U NSCF Line",
          "MS2+U NSCF Uniform",
          "MS2+U Dielectric",
          "MS2+U DFPT",
          "MS2+U DFPT Dielectric",
          "MS2+U NMR Nuclear Shielding",
          "MS2+U NMR Electric Field Gradient",
          "MS2+U Static",
          "MS2+U Structure Optimization",
          "MS2+U Deformation",
          "MS2+U Unrecognized",
          "RTPSS+U NSCF Line",
          "RTPSS+U NSCF Uniform",
          "RTPSS+U Dielectric",
          "RTPSS+U DFPT",
          "RTPSS+U DFPT Dielectric",
          "RTPSS+U NMR Nuclear Shielding",
          "RTPSS+U NMR Electric Field Gradient",
          "RTPSS+U Static",
          "RTPSS+U Structure Optimization",
          "RTPSS+U Deformation",
          "RTPSS+U Unrecognized",
          "SCAN+U NSCF Line",
          "SCAN+U NSCF Uniform",
          "SCAN+U Dielectric",
          "SCAN+U DFPT",
          "SCAN+U DFPT Dielectric",
          "SCAN+U NMR Nuclear Shielding",
          "SCAN+U NMR Electric Field Gradient",
          "SCAN+U Static",
          "SCAN+U Structure Optimization",
          "SCAN+U Deformation",
          "SCAN+U Unrecognized",
          "R2SCAN+U NSCF Line",
          "R2SCAN+U NSCF Uniform",
          "R2SCAN+U Dielectric",
          "R2SCAN+U DFPT",
          "R2SCAN+U DFPT Dielectric",
          "R2SCAN+U NMR Nuclear Shielding",
          "R2SCAN+U NMR Electric Field Gradient",
          "R2SCAN+U Static",
          "R2SCAN+U Structure Optimization",
          "R2SCAN+U Deformation",
          "R2SCAN+U Unrecognized",
          "TPSS+U NSCF Line",
          "TPSS+U NSCF Uniform",
          "TPSS+U Dielectric",
          "TPSS+U DFPT",
          "TPSS+U DFPT Dielectric",
          "TPSS+U NMR Nuclear Shielding",
          "TPSS+U NMR Electric Field Gradient",
          "TPSS+U Static",
          "TPSS+U Structure Optimization",
          "TPSS+U Deformation",
          "TPSS+U Unrecognized",
          "R2SCAN-rVV10+U NSCF Line",
          "R2SCAN-rVV10+U NSCF Uniform",
          "R2SCAN-rVV10+U Dielectric",
          "R2SCAN-rVV10+U DFPT",
          "R2SCAN-rVV10+U DFPT Dielectric",
          "R2SCAN-rVV10+U NMR Nuclear Shielding",
          "R2SCAN-rVV10+U NMR Electric Field Gradient",
          "R2SCAN-rVV10+U Static",
          "R2SCAN-rVV10+U Structure Optimization",
          "R2SCAN-rVV10+U Deformation",
          "R2SCAN-rVV10+U Unrecognized",
          "SCAN-rVV10+U NSCF Line",
          "SCAN-rVV10+U NSCF Uniform",
          "SCAN-rVV10+U Dielectric",
          "SCAN-rVV10+U DFPT",
          "SCAN-rVV10+U DFPT Dielectric",
          "SCAN-rVV10+U NMR Nuclear Shielding",
          "SCAN-rVV10+U NMR Electric Field Gradient",
          "SCAN-rVV10+U Static",
          "SCAN-rVV10+U Structure Optimization",
          "SCAN-rVV10+U Deformation",
          "SCAN-rVV10+U Unrecognized",
          "optB86b-vdW+U NSCF Line",
          "optB86b-vdW+U NSCF Uniform",
          "optB86b-vdW+U Dielectric",
          "optB86b-vdW+U DFPT",
          "optB86b-vdW+U DFPT Dielectric",
          "optB86b-vdW+U NMR Nuclear Shielding",
          "optB86b-vdW+U NMR Electric Field Gradient",
          "optB86b-vdW+U Static",
          "optB86b-vdW+U Structure Optimization",
          "optB86b-vdW+U Deformation",
          "optB86b-vdW+U Unrecognized",
          "optB88-vdW+U NSCF Line",
          "optB88-vdW+U NSCF Uniform",
          "optB88-vdW+U Dielectric",
          "optB88-vdW+U DFPT",
          "optB88-vdW+U DFPT Dielectric",
          "optB88-vdW+U NMR Nuclear Shielding",
          "optB88-vdW+U NMR Electric Field Gradient",
          "optB88-vdW+U Static",
          "optB88-vdW+U Structure Optimization",
          "optB88-vdW+U Deformation",
          "optB88-vdW+U Unrecognized",
          "optPBE-vdW+U NSCF Line",
          "optPBE-vdW+U NSCF Uniform",
          "optPBE-vdW+U Dielectric",
          "optPBE-vdW+U DFPT",
          "optPBE-vdW+U DFPT Dielectric",
          "optPBE-vdW+U NMR Nuclear Shielding",
          "optPBE-vdW+U NMR Electric Field Gradient",
          "optPBE-vdW+U Static",
          "optPBE-vdW+U Structure Optimization",
          "optPBE-vdW+U Deformation",
          "optPBE-vdW+U Unrecognized",
          "rev-vdW-DF2+U NSCF Line",
          "rev-vdW-DF2+U NSCF Uniform",
          "rev-vdW-DF2+U Dielectric",
          "rev-vdW-DF2+U DFPT",
          "rev-vdW-DF2+U DFPT Dielectric",
          "rev-vdW-DF2+U NMR Nuclear Shielding",
          "rev-vdW-DF2+U NMR Electric Field Gradient",
          "rev-vdW-DF2+U Static",
          "rev-vdW-DF2+U Structure Optimization",
          "rev-vdW-DF2+U Deformation",
          "rev-vdW-DF2+U Unrecognized",
          "revPBE-vdW+U NSCF Line",
          "revPBE-vdW+U NSCF Uniform",
          "revPBE-vdW+U Dielectric",
          "revPBE-vdW+U DFPT",
          "revPBE-vdW+U DFPT Dielectric",
          "revPBE-vdW+U NMR Nuclear Shielding",
          "revPBE-vdW+U NMR Electric Field Gradient",
          "revPBE-vdW+U Static",
          "revPBE-vdW+U Structure Optimization",
          "revPBE-vdW+U Deformation",
          "revPBE-vdW+U Unrecognized",
          "vdW-DF2+U NSCF Line",
          "vdW-DF2+U NSCF Uniform",
          "vdW-DF2+U Dielectric",
          "vdW-DF2+U DFPT",
          "vdW-DF2+U DFPT Dielectric",
          "vdW-DF2+U NMR Nuclear Shielding",
          "vdW-DF2+U NMR Electric Field Gradient",
          "vdW-DF2+U Static",
          "vdW-DF2+U Structure Optimization",
          "vdW-DF2+U Deformation",
          "vdW-DF2+U Unrecognized",
          "LDA NSCF Line",
          "LDA NSCF Uniform",
          "LDA Dielectric",
          "LDA DFPT",
          "LDA DFPT Dielectric",
          "LDA NMR Nuclear Shielding",
          "LDA NMR Electric Field Gradient",
          "LDA Static",
          "LDA Structure Optimization",
          "LDA Deformation",
          "LDA Unrecognized",
          "LDA+U NSCF Line",
          "LDA+U NSCF Uniform",
          "LDA+U Dielectric",
          "LDA+U DFPT",
          "LDA+U DFPT Dielectric",
          "LDA+U NMR Nuclear Shielding",
          "LDA+U NMR Electric Field Gradient",
          "LDA+U Static",
          "LDA+U Structure Optimization",
          "GGA Optic",
          "PBE Optic",
          "LDA+U Deformation",
          "LDA+U Unrecognized"
        ],
        "title": "CalcType",
        "description": "VASP calculation types"
      },
      "emmet__core__vasp__calc_types__enums__TaskType": {
        "enum": [
          "NSCF Line",
          "NSCF Uniform",
          "Dielectric",
          "DFPT",
          "DFPT Dielectric",
          "NMR Nuclear Shielding",
          "NMR Electric Field Gradient",
          "Static",
          "Structure Optimization",
          "Deformation",
          "Unrecognized",
          "Optic"
        ],
        "title": "TaskType",
        "description": "VASP calculation task types"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "descriptions": "MP API key to authorize requests",
        "name": "X-API-KEY",
        "in": "header",
        "type": "apiKey"
      }
    }
  },
  "tags": [
    {
      "name": "Materials Summary",
      "description": "Route providing a large amount of amalgamated data for a material. This is constructed by             combining subsets of data from many of the other API endpoints. The summary endpoint is very useful for             performing queries for materials over a large property space. Note that every unique material within             the Materials Project should have a set of summary data. See the `SummaryDoc` schema for a full list of             fields returned by this route."
    },
    {
      "name": "Materials",
      "description": "Route for \"core\" information associated with a given material in the Materials Project             database. The unique identifier for a material is its `material_id` (e.g. `mp-149`). Core data in             this context refers to the crystal structure, information associated with it such as the density             and chemical formula, and the associated calculations which are identified with unique `task_id`             values. It does not contain any materials properties such as the formation energy or band gap, please             consult other property-specific endpoints for this information. See the `MaterialsDoc` schema for             a full list of fields returned by this route."
    },
    {
      "name": "Materials Tasks",
      "description": "Route for \"core\" information associated with a given calculation in the Materials Project             database. Multiple calculations can ultimately be associated with a unique material, and are the source             of its reported properties. The unique identifier for a calculation is its `task_id`. Note             that the `material_id` chosen for a given material is sourced from one of the `task_id` values             associated with it. Core data in this context refers to calculation quantities such as parsed input             and output data (e.g. VASP input flags, atomic forces, structures) and runtime statistics. See the             `TaskDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials Thermo",
      "description": "Route providing computed thermodynamic data for a material such as             formation energy and energy above hull. Corrected energy values are also available that employ             the schemes discussed by             [Jain *et al.*](https://journals.aps.org/prb/abstract/10.1103/PhysRevB.84.045115)             and [Wang *et al.*](https://chemrxiv.org/engage/chemrxiv/article-details/60c758d9469df42a4ef45757)            See the `ThermoDoc` schema for a full list of fields returned by this route.",
      "externalDocs": {
        "description": "For a more detailed description",
        "url": "https://docs.materialsproject.org/methodology/total-energies"
      }
    },
    {
      "name": "Materials Dielectric",
      "description": "Route providing computed dielectric data for a material following the             methodology discussed by [Petousis *et al.*](https://doi.org/10.1038/sdata.2016.134)             Note that dielectric data has not been calculated for all materials in the Materials             Project database. See the `DielectricDoc` schema for a full list of fields returned by this route.",
      "externalDocs": {
        "description": "For a more detailed description",
        "url": "https://docs.materialsproject.org/methodology/dielectricity"
      }
    },
    {
      "name": "Materials Magnetism",
      "description": "Route providing computed magnetic ordering related data for a material following the             methodology discussed by [Horton *et al.*](https://doi.org/10.1038/s41524-019-0199-7)             Note that magnetic data has not been calculated for all materials in the Materials             Project database. See the `MagnetismDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials Piezoelectric",
      "description": "Route providing computed piezoelectric data for a material following the             methodology discussed by [de Jong *et al.*](https://doi.org/10.1038/sdata.2015.53)             Note that piezoelectric data has not been calculated for all materials in the Materials             Project database. See the `PiezoDoc` schema for a full list of fields returned by this route.",
      "externalDocs": {
        "description": "For a more detailed description",
        "url": "https://docs.materialsproject.org/methodology/piezoelectricity"
      }
    },
    {
      "name": "Materials Phonon",
      "description": "Route providing computed phonon data for a material following the             methodology discussed by [Petretto *et al.*](https://doi.org/10.1038/sdata.2018.65)             Note that phonon data has not been calculated for all materials in the Materials             Project database. See the `PhononBSDOSDoc` schema for a full list of fields returned by this route.",
      "externalDocs": {
        "description": "For a more detailed description",
        "url": "https://docs.materialsproject.org/methodology/phonons"
      }
    },
    {
      "name": "Materials EOS",
      "description": "Route providing computed equations of state data for a material following the             methodology discussed by [Latimer *et al.*](https://doi.org/10.1038/s41524-018-0091-x)             Note that equations of state data has not been calculated for all materials in the Materials             Project database. See the `EOSDoc` schema for a full list of fields returned by this route.",
      "externalDocs": {
        "description": "For a more detailed description",
        "url": "https://docs.materialsproject.org/methodology/equations-of-state"
      }
    },
    {
      "name": "Materials Similarity",
      "description": "Route providing a computed similarity metric between materials following the             methodology discussed by Zimmerman *et al.* in [10.3389/fmats.2017.00034](https://doi.org/10.3389/fmats.2017.00034)             and [10.1039/C9RA07755C](https://doi.org/10.1039/C9RA07755C).             Note that similarity data has not been calculated for all materials in the Materials             Project database. See the `imilarityDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials XAS",
      "description": "Route providing computed x-ray absorption spectroscopy data for a material following the             methodology discussed by [Mathew *et al.*](https://doi.org/10.1038/sdata.2018.151)             and [Chen *et al.*](https://doi.org/10.1038/s41597-021-00936-5)             Note that x-ray absorption spectroscopy data has not been calculated for all materials in the Materials             Project database. See the `XASDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials Grain Boundaries",
      "description": "Route providing computed grain boundary data for a material following the             methodology discussed by [Hui *et al.*](https://doi.org/10.1016/j.actamat.2019.12.030)             Note that grain boundary data has not been calculated for all materials in the Materials             Project database. See the `GrainBoundaryDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials Electronic Structure",
      "description": "Routes providing computed electronic structure related data for a material such as             band gap and fermi level. Python objects for line-mode band structures, density of states, and             fermi surfaces are also available. This data was obtained following the methodology discussed by             [Munro *et al.*](https://doi.org/10.1038/s41524-020-00383-7) and [Ganose *et al.*](https://doi.org/10.21105/joss.03089)             Note that full band structure, density of states, and fermi surface data has not been calculated for             all materials in the Materials Project database. See the `ElectronicStructureDoc` and `FermiDoc` schema             for a full list of fields returned by the associated routes.",
      "externalDocs": {
        "description": "For a more detailed description",
        "url": "https://docs.materialsproject.org/methodology/electronic-structure"
      }
    },
    {
      "name": "Materials Elasticity",
      "description": "Route providing computed elasticity data for a material following the             methodology discussed by [de Jong *et al.*](https://doi.org/10.1038/sdata.2015.9)             Note that elasticity data has not been calculated for all materials in the Materials             Project database. See the `ElasticityDoc` schema for a full list of fields returned by this route.",
      "externalDocs": {
        "description": "For a more detailed description",
        "url": "https://docs.materialsproject.org/methodology/elasticity"
      }
    },
    {
      "name": "Materials Substrates",
      "description": "Route providing computed suggested substrate data for a material following the             methodology discussed by [Ding *et al.*](https://doi.org/10.1021/acsami.6b01630)             Note that substrate data has not been calculated for all materials in the Materials             Project database. See the `SubstratesDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials Surface Properties",
      "description": "Route providing computed surface property data for a material following the             methodology discussed by [Tran *et al.*](https://doi.org/10.1038/sdata.2016.80)             Note that surface data has not been calculated for all materials in the Materials             Project database. See the `SurfacePropDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Robocrystallographer",
      "description": "Route providing a computed text description for a material following the             methodology discussed by [Ganose *et al.*](https://doi.org/10.1557/mrc.2019.94)             Note that descriptions may not been calculated for all materials in the Materials             Project database. See the `RobocrysDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials Synthesis",
      "description": "Route providing a synthesis recipes for materials extracted from literature             following the methodology discussed by [Kononova *et al.*](https://doi.org/10.1038/s41597-019-0224-1)             Note that synthesis recipes may not be available for all materials in the Materials             Project database. See the `SynthesisSearchResultModel` schema for a full list of fields returned by this route."
    },
    {
      "name": "Electrodes",
      "description": "Route providing computed electrode data for a material following the             methodology discussed by [Shen *et al.*](https://doi.org/10.1038/s41524-020-00422-3)             Note that electrode data has not been calculated for all materials in the Materials             Project database. See the `InsertionElectrodeDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials Oxidation States",
      "description": "Route providing computed oxidation state data for a material following the             methodology employed by the [BVAnalyzer](https://pymatgen.org/pymatgen.analysis.bond_valence.html)             in Pymatgen. Note that oxidation state data has not been calculated for all materials in the Materials             Project database. See the `OxidationStateDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials Provenance",
      "description": "Route providing provenance data for a material such as whether it is theoretical,             its associated ICSD entries, and relevant references in literature. Note that provenance data             may not be available for all materials in the Materials Project database. See the `ProvenanceDoc`             schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials Charge Density",
      "description": "Route providing computed charge density data for a material following the             methodology discussed by [Shen *et al.*](https://arxiv.org/abs/2107.03540). Please email             <heavy.api.use@materialsproject.org> if you would like to retrieve a large amount of this data.             Note that charge densities may not be calculated for all materials in the Materials             Project database. See the `ChgcarDataDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Materials Alloys",
      "description": "Route for retrevial of information about which hypothetical alloy(s) a given material might belong to, following the methodolgy discussed by [Woods-Robinson, Horton and Persson](https://arxiv.org/pdf/2206.10715)."
    },
    {
      "name": "MPComplete",
      "description": "Route for submitting structures to the Materials Project. If calculations are run with the             submitted structure, the submitter will be credited with the submitted public name and email."
    },
    {
      "name": "DOIs",
      "description": "Route providing DOI and bibtex reference information for a material.             Note that this data may not be available for all materials in the Materials             Project database. See the `DOIDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Molecules Tasks",
      "description": "Route for basic task information for DFT calculations in the Materials Project             molecules database. Multiple calculations can ultimately be associated with a unique molecule,             and are the source of its reported properties. The unique identifier for a calculation is its             `task_id`. See the `TaskDocument` schema for a full list of fields returned by this route."
    },
    {
      "name": "Associated Molecules",
      "description": "Route for 'associated' molecule data. Construction of the Materials Project molecules             database occurs in two stages. In the first stage, calculations using the exact same formula, charge,             spin multiplicity, and molecular geometry (defined by bond lengths, angles, etc.) are associated.             In the second stage, multiple 'associated molecules' with the same basic properties (formula, charge, spin)             and connectivity (based on molecular graph isomorphism) are collected, forming the 'core' molecules             collection. This route provides access to data for individual 'associated molecules'. The 'Core Molecules'             route (/molecules/molecules/) contains data for core molecules. See the `MoleculeDoc` schema for a full list             of fields returned by this route."
    },
    {
      "name": "Core Molecules",
      "description": "Route for 'core' molecule data. Construction of the Materials Project molecules             database occurs in two stages. In the first stage, calculations using the exact same formula, charge,             spin multiplicity, and molecular geometry (defined by bond lengths, angles, etc.) are associated.             In the second stage, multiple 'associated molecules' with the same basic properties (formula, charge, spin)             and connectivity (based on molecular graph isomorphism) are collected, forming the 'core' molecules             collection. This route provides access to data for individual 'associated molecules'. The 'Associated Molecules'             route (/molecules/assoc/) contains data for 'associated' molecules. See the `MoleculeDoc` schema for a full list             of fields returned by this route."
    },
    {
      "name": "Molecules Partial Charges",
      "description": "Route for molecular partial charge data. See the `PartialChargesDoc` schema for a full list             of fields returned by this route."
    },
    {
      "name": "Molecules Partial Spins",
      "description": "Route for molecular partial spin data. See the `PartialSpinsDoc` schema for a full list             of fields returned by this route."
    },
    {
      "name": "Molecules Bonds",
      "description": "Route for molecular bonding data. See the `MoleculeBondingDoc` schema for a full list             of fields returned by this route."
    },
    {
      "name": "Molecules Metal Binding",
      "description": "Route for data regarding metal binding to molecules. See the `MetalBindingDoc` schema             for a full list of fields returned by this route."
    },
    {
      "name": "Molecules Orbitals",
      "description": "Route for molecular orbital information obtained via Natural Bonding Orbital analysis.             See the `OrbitalDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Molecules Redox",
      "description": "Route for molecular redox information (e.g. ionization energy, reduction free energy,             redox potentials). See the `RedoxDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "Molecules Thermo",
      "description": "Route for molecular thermochemistry information. See the `MoleculeThermoDoc` schema for             a full list of fields returned by this route."
    },
    {
      "name": "Molecules Vibrations",
      "description": "Route for molecular normal mode and IR spectroscopy data. See the `VibrationDoc` schema for             a full list of fields returned by this route."
    },
    {
      "name": "Molecules Summary",
      "description": "Route for a summary of all data calculated on 'core' molecules in the Materials Project             molecules database. See the `MoleculeSummaryDoc` schema for a full list of fields returned by this route."
    },
    {
      "name": "JCESR Electrolyte Genome",
      "description": "Route providing computed data for a legacy molecule such as charge,             electron affinity, and ionization energy. The unique identifier for a molecule             is its `task_id` (e.g. `mol-45807`). See the `MoleculesDoc` schema for a full list of             fields returned by this route."
    }
  ],
  "security": [{ "ApiKeyAuth": [] }]
}
